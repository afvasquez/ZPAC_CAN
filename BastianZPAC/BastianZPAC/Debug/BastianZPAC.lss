
BastianZPAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002590  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002590  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000011a8  20000438  000029c8  00010438  2**2
                  ALLOC
  3 .stack        00002000  200015e0  00003b70  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010506  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000200e  00000000  00000000  000209c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005057  00000000  00000000  000229cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005e0  00000000  00000000  00027a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000610  00000000  00000000  00028006  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000161b0  00000000  00000000  00028616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008b51  00000000  00000000  0003e7c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000857db  00000000  00000000  00047317  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001028  00000000  00000000  000ccaf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200035e0 	.word	0x200035e0
       4:	00001881 	.word	0x00001881
       8:	0000187d 	.word	0x0000187d
       c:	0000187d 	.word	0x0000187d
	...
      2c:	00000371 	.word	0x00000371
	...
      38:	000003d9 	.word	0x000003d9
      3c:	0000041d 	.word	0x0000041d
      40:	0000187d 	.word	0x0000187d
      44:	0000187d 	.word	0x0000187d
      48:	0000187d 	.word	0x0000187d
      4c:	0000187d 	.word	0x0000187d
      50:	0000187d 	.word	0x0000187d
      54:	0000187d 	.word	0x0000187d
      58:	0000187d 	.word	0x0000187d
      5c:	0000187d 	.word	0x0000187d
      60:	0000187d 	.word	0x0000187d
      64:	00000251 	.word	0x00000251
      68:	00000261 	.word	0x00000261
      6c:	00000271 	.word	0x00000271
      70:	00000281 	.word	0x00000281
	...
      7c:	0000187d 	.word	0x0000187d
      80:	0000187d 	.word	0x0000187d
      84:	0000187d 	.word	0x0000187d
      88:	0000187d 	.word	0x0000187d
      8c:	0000187d 	.word	0x0000187d
      90:	0000187d 	.word	0x0000187d
	...
      9c:	0000187d 	.word	0x0000187d
      a0:	0000187d 	.word	0x0000187d
      a4:	0000187d 	.word	0x0000187d
      a8:	0000187d 	.word	0x0000187d
      ac:	0000187d 	.word	0x0000187d

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000438 	.word	0x20000438
      d0:	00000000 	.word	0x00000000
      d4:	00002590 	.word	0x00002590

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00002590 	.word	0x00002590
     104:	2000043c 	.word	0x2000043c
     108:	00002590 	.word	0x00002590
     10c:	00000000 	.word	0x00000000

00000110 <_Z8tsk_busyv>:
	while (1)
	{
	}
}

void tsk_busy(void) {
     110:	b570      	push	{r4, r5, r6, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     112:	4c0b      	ldr	r4, [pc, #44]	; (140 <_Z8tsk_busyv+0x30>)
	while (1) {
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_BUSY, true);
		vTaskDelay(450);
     114:	4e0b      	ldr	r6, [pc, #44]	; (144 <_Z8tsk_busyv+0x34>)
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_BUSY, false);
		vTaskDelay(450);
     116:	1c35      	adds	r5, r6, #0
     118:	6a23      	ldr	r3, [r4, #32]
	}
}

void tsk_busy(void) {
	while (1) {
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_BUSY, true);
     11a:	041a      	lsls	r2, r3, #16
     11c:	d402      	bmi.n	124 <_Z8tsk_busyv+0x14>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     11e:	2380      	movs	r3, #128	; 0x80
     120:	025b      	lsls	r3, r3, #9
     122:	61a3      	str	r3, [r4, #24]
		vTaskDelay(450);
     124:	20e1      	movs	r0, #225	; 0xe1
     126:	0040      	lsls	r0, r0, #1
     128:	47b0      	blx	r6
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     12a:	6a23      	ldr	r3, [r4, #32]
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_BUSY, false);
     12c:	041a      	lsls	r2, r3, #16
     12e:	d402      	bmi.n	136 <_Z8tsk_busyv+0x26>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     130:	2380      	movs	r3, #128	; 0x80
     132:	025b      	lsls	r3, r3, #9
     134:	6163      	str	r3, [r4, #20]
		vTaskDelay(450);
     136:	20e1      	movs	r0, #225	; 0xe1
     138:	0040      	lsls	r0, r0, #1
     13a:	47a8      	blx	r5
	while (1)
	{
	}
}

void tsk_busy(void) {
     13c:	e7ec      	b.n	118 <_Z8tsk_busyv+0x8>
     13e:	46c0      	nop			; (mov r8, r8)
     140:	41004400 	.word	0x41004400
     144:	0000110d 	.word	0x0000110d

00000148 <_Z9tsk_debugv>:
		vTaskDelay(450);
	}
}


void tsk_debug(void) {
     148:	b570      	push	{r4, r5, r6, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     14a:	4c0b      	ldr	r4, [pc, #44]	; (178 <_Z9tsk_debugv+0x30>)
	while (1) {
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_DEBUG, true);
		vTaskDelay(300);
     14c:	4e0b      	ldr	r6, [pc, #44]	; (17c <_Z9tsk_debugv+0x34>)
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_DEBUG, false);
		vTaskDelay(300);
     14e:	1c35      	adds	r5, r6, #0
     150:	6a23      	ldr	r3, [r4, #32]
}


void tsk_debug(void) {
	while (1) {
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_DEBUG, true);
     152:	041a      	lsls	r2, r3, #16
     154:	d402      	bmi.n	15c <_Z9tsk_debugv+0x14>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     156:	2380      	movs	r3, #128	; 0x80
     158:	029b      	lsls	r3, r3, #10
     15a:	61a3      	str	r3, [r4, #24]
		vTaskDelay(300);
     15c:	2096      	movs	r0, #150	; 0x96
     15e:	0040      	lsls	r0, r0, #1
     160:	47b0      	blx	r6
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     162:	6a23      	ldr	r3, [r4, #32]
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_DEBUG, false);
     164:	041a      	lsls	r2, r3, #16
     166:	d402      	bmi.n	16e <_Z9tsk_debugv+0x26>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     168:	2380      	movs	r3, #128	; 0x80
     16a:	029b      	lsls	r3, r3, #10
     16c:	6163      	str	r3, [r4, #20]
		vTaskDelay(300);
     16e:	2096      	movs	r0, #150	; 0x96
     170:	0040      	lsls	r0, r0, #1
     172:	47a8      	blx	r5
		vTaskDelay(450);
	}
}


void tsk_debug(void) {
     174:	e7ec      	b.n	150 <_Z9tsk_debugv+0x8>
     176:	46c0      	nop			; (mov r8, r8)
     178:	41004400 	.word	0x41004400
     17c:	0000110d 	.word	0x0000110d

00000180 <_Z9tsk_errorv>:
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_DEBUG, false);
		vTaskDelay(300);
	}
}

void tsk_error(void) {
     180:	b570      	push	{r4, r5, r6, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     182:	4c0a      	ldr	r4, [pc, #40]	; (1ac <_Z9tsk_errorv+0x2c>)
	while (1) {
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_ERROR, true);
		vTaskDelay(550);
     184:	4e0a      	ldr	r6, [pc, #40]	; (1b0 <_Z9tsk_errorv+0x30>)
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_ERROR, false);
		vTaskDelay(550);
     186:	1c35      	adds	r5, r6, #0
     188:	6a23      	ldr	r3, [r4, #32]
	}
}

void tsk_error(void) {
	while (1) {
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_ERROR, true);
     18a:	041a      	lsls	r2, r3, #16
     18c:	d402      	bmi.n	194 <_Z9tsk_errorv+0x14>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     18e:	2380      	movs	r3, #128	; 0x80
     190:	02db      	lsls	r3, r3, #11
     192:	61a3      	str	r3, [r4, #24]
		vTaskDelay(550);
     194:	4807      	ldr	r0, [pc, #28]	; (1b4 <_Z9tsk_errorv+0x34>)
     196:	47b0      	blx	r6
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     198:	6a23      	ldr	r3, [r4, #32]
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_ERROR, false);
     19a:	041a      	lsls	r2, r3, #16
     19c:	d402      	bmi.n	1a4 <_Z9tsk_errorv+0x24>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     19e:	2380      	movs	r3, #128	; 0x80
     1a0:	02db      	lsls	r3, r3, #11
     1a2:	6163      	str	r3, [r4, #20]
		vTaskDelay(550);
     1a4:	4803      	ldr	r0, [pc, #12]	; (1b4 <_Z9tsk_errorv+0x34>)
     1a6:	47a8      	blx	r5
		if ( !port_pin_get_input_level(CAN_PIN_SENSE) ) port_pin_set_output_level(LED_DEBUG, false);
		vTaskDelay(300);
	}
}

void tsk_error(void) {
     1a8:	e7ee      	b.n	188 <_Z9tsk_errorv+0x8>
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	41004400 	.word	0x41004400
     1b0:	0000110d 	.word	0x0000110d
     1b4:	00000226 	.word	0x00000226

000001b8 <main>:
void tsk_busy(void);
void tsk_debug(void);
void tsk_error(void);

int main(void)
{
     1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ba:	b087      	sub	sp, #28
	/* Initialize the SAM system */
	system_init();
     1bc:	4b1c      	ldr	r3, [pc, #112]	; (230 <main+0x78>)
     1be:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1c0:	ad04      	add	r5, sp, #16
     1c2:	2701      	movs	r7, #1
     1c4:	706f      	strb	r7, [r5, #1]
	config->powersave  = false;
     1c6:	2400      	movs	r4, #0
     1c8:	70ac      	strb	r4, [r5, #2]
	//////////////////////////////////////////////////////////////////////////
	// Set the LED outputs for this board.
	struct port_config led_out;
	port_get_config_defaults(&led_out);
	
	led_out.direction = PORT_PIN_DIR_OUTPUT;
     1ca:	702f      	strb	r7, [r5, #0]
	port_pin_set_config(LED_BUSY, &led_out);
     1cc:	2010      	movs	r0, #16
     1ce:	1c29      	adds	r1, r5, #0
     1d0:	4e18      	ldr	r6, [pc, #96]	; (234 <main+0x7c>)
     1d2:	47b0      	blx	r6
	port_pin_set_config(LED_ERROR, &led_out);
     1d4:	2012      	movs	r0, #18
     1d6:	1c29      	adds	r1, r5, #0
     1d8:	47b0      	blx	r6
	port_pin_set_config(LED_DEBUG, &led_out);
     1da:	2011      	movs	r0, #17
     1dc:	1c29      	adds	r1, r5, #0
     1de:	47b0      	blx	r6
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1e0:	a905      	add	r1, sp, #20
     1e2:	700c      	strb	r4, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1e4:	704f      	strb	r7, [r1, #1]
	config->powersave  = false;
     1e6:	708c      	strb	r4, [r1, #2]
	
	struct port_config led_in;
	port_get_config_defaults(&led_in);
	led_in.direction = PORT_PIN_DIR_INPUT;
	
	port_pin_set_config(CAN_PIN_SENSE, &led_in);
     1e8:	200f      	movs	r0, #15
     1ea:	47b0      	blx	r6
	xTaskCreate(tsk_busy,
	(const char *)"IrDA",
	configMINIMAL_STACK_SIZE,
	NULL,
	3,
	NULL );
     1ec:	4e12      	ldr	r6, [pc, #72]	; (238 <main+0x80>)
     1ee:	2703      	movs	r7, #3
     1f0:	9700      	str	r7, [sp, #0]
     1f2:	9401      	str	r4, [sp, #4]
     1f4:	9402      	str	r4, [sp, #8]
     1f6:	9403      	str	r4, [sp, #12]
     1f8:	4810      	ldr	r0, [pc, #64]	; (23c <main+0x84>)
     1fa:	1c31      	adds	r1, r6, #0
     1fc:	228c      	movs	r2, #140	; 0x8c
     1fe:	2300      	movs	r3, #0
     200:	4d0f      	ldr	r5, [pc, #60]	; (240 <main+0x88>)
     202:	47a8      	blx	r5
	xTaskCreate(tsk_debug,
	(const char *)"IrDA",
	configMINIMAL_STACK_SIZE,
	NULL,
	3,
	NULL );
     204:	9700      	str	r7, [sp, #0]
     206:	9401      	str	r4, [sp, #4]
     208:	9402      	str	r4, [sp, #8]
     20a:	9403      	str	r4, [sp, #12]
     20c:	480d      	ldr	r0, [pc, #52]	; (244 <main+0x8c>)
     20e:	1c31      	adds	r1, r6, #0
     210:	228c      	movs	r2, #140	; 0x8c
     212:	2300      	movs	r3, #0
     214:	47a8      	blx	r5
	xTaskCreate(tsk_error,
	(const char *)"IrDA",
	configMINIMAL_STACK_SIZE,
	NULL,
	3,
	NULL );
     216:	9700      	str	r7, [sp, #0]
     218:	9401      	str	r4, [sp, #4]
     21a:	9402      	str	r4, [sp, #8]
     21c:	9403      	str	r4, [sp, #12]
     21e:	480a      	ldr	r0, [pc, #40]	; (248 <main+0x90>)
     220:	1c31      	adds	r1, r6, #0
     222:	228c      	movs	r2, #140	; 0x8c
     224:	2300      	movs	r3, #0
     226:	47a8      	blx	r5
	
	// Enable global interrupts
	//system_interrupt_enable_global();
	
	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
     228:	4b08      	ldr	r3, [pc, #32]	; (24c <main+0x94>)
     22a:	4798      	blx	r3
     22c:	e7fe      	b.n	22c <main+0x74>
     22e:	46c0      	nop			; (mov r8, r8)
     230:	000020a1 	.word	0x000020a1
     234:	00002135 	.word	0x00002135
     238:	00002494 	.word	0x00002494
     23c:	00000111 	.word	0x00000111
     240:	00000cb1 	.word	0x00000cb1
     244:	00000149 	.word	0x00000149
     248:	00000181 	.word	0x00000181
     24c:	00000e85 	.word	0x00000e85

00000250 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     250:	b508      	push	{r3, lr}
     252:	4b02      	ldr	r3, [pc, #8]	; (25c <SERCOM0_Handler+0xc>)
     254:	685b      	ldr	r3, [r3, #4]
     256:	2000      	movs	r0, #0
     258:	4798      	blx	r3
     25a:	bd08      	pop	{r3, pc}
     25c:	20000454 	.word	0x20000454

00000260 <SERCOM1_Handler>:
     260:	b508      	push	{r3, lr}
     262:	4b02      	ldr	r3, [pc, #8]	; (26c <SERCOM1_Handler+0xc>)
     264:	689b      	ldr	r3, [r3, #8]
     266:	2001      	movs	r0, #1
     268:	4798      	blx	r3
     26a:	bd08      	pop	{r3, pc}
     26c:	20000454 	.word	0x20000454

00000270 <SERCOM2_Handler>:
     270:	b508      	push	{r3, lr}
     272:	4b02      	ldr	r3, [pc, #8]	; (27c <SERCOM2_Handler+0xc>)
     274:	68db      	ldr	r3, [r3, #12]
     276:	2002      	movs	r0, #2
     278:	4798      	blx	r3
     27a:	bd08      	pop	{r3, pc}
     27c:	20000454 	.word	0x20000454

00000280 <SERCOM3_Handler>:
     280:	b508      	push	{r3, lr}
     282:	4b02      	ldr	r3, [pc, #8]	; (28c <SERCOM3_Handler+0xc>)
     284:	691b      	ldr	r3, [r3, #16]
     286:	2003      	movs	r0, #3
     288:	4798      	blx	r3
     28a:	bd08      	pop	{r3, pc}
     28c:	20000454 	.word	0x20000454

00000290 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     290:	1c03      	adds	r3, r0, #0
     292:	3308      	adds	r3, #8
     294:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     296:	2201      	movs	r2, #1
     298:	4252      	negs	r2, r2
     29a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     29c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     29e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     2a0:	2300      	movs	r3, #0
     2a2:	6003      	str	r3, [r0, #0]
}
     2a4:	4770      	bx	lr
     2a6:	46c0      	nop			; (mov r8, r8)

000002a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     2a8:	2300      	movs	r3, #0
     2aa:	6103      	str	r3, [r0, #16]
}
     2ac:	4770      	bx	lr
     2ae:	46c0      	nop			; (mov r8, r8)

000002b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     2b0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     2b2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     2b4:	689a      	ldr	r2, [r3, #8]
     2b6:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     2b8:	689a      	ldr	r2, [r3, #8]
     2ba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
     2bc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     2be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     2c0:	6803      	ldr	r3, [r0, #0]
     2c2:	3301      	adds	r3, #1
     2c4:	6003      	str	r3, [r0, #0]
}
     2c6:	4770      	bx	lr

000002c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     2c8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     2ca:	680c      	ldr	r4, [r1, #0]
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2cc:	1c02      	adds	r2, r0, #0
     2ce:	3208      	adds	r2, #8
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     2d0:	1c63      	adds	r3, r4, #1
     2d2:	d101      	bne.n	2d8 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     2d4:	6902      	ldr	r2, [r0, #16]
     2d6:	e005      	b.n	2e4 <vListInsert+0x1c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2d8:	6853      	ldr	r3, [r2, #4]
     2da:	681d      	ldr	r5, [r3, #0]
     2dc:	42ac      	cmp	r4, r5
     2de:	d301      	bcc.n	2e4 <vListInsert+0x1c>
     2e0:	1c1a      	adds	r2, r3, #0
     2e2:	e7f9      	b.n	2d8 <vListInsert+0x10>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     2e4:	6853      	ldr	r3, [r2, #4]
     2e6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     2e8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     2ea:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     2ec:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     2ee:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     2f0:	6803      	ldr	r3, [r0, #0]
     2f2:	3301      	adds	r3, #1
     2f4:	6003      	str	r3, [r0, #0]
}
     2f6:	bd30      	pop	{r4, r5, pc}

000002f8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     2f8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     2fa:	6842      	ldr	r2, [r0, #4]
     2fc:	6881      	ldr	r1, [r0, #8]
     2fe:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     300:	6882      	ldr	r2, [r0, #8]
     302:	6841      	ldr	r1, [r0, #4]
     304:	6051      	str	r1, [r2, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     306:	685a      	ldr	r2, [r3, #4]
     308:	4282      	cmp	r2, r0
     30a:	d101      	bne.n	310 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     30c:	6892      	ldr	r2, [r2, #8]
     30e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     310:	2200      	movs	r2, #0
     312:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     314:	6818      	ldr	r0, [r3, #0]
     316:	3801      	subs	r0, #1
     318:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
     31a:	4770      	bx	lr

0000031c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
     31c:	4b03      	ldr	r3, [pc, #12]	; (32c <prvTaskExitError+0x10>)
     31e:	681b      	ldr	r3, [r3, #0]
     320:	3301      	adds	r3, #1
     322:	d001      	beq.n	328 <prvTaskExitError+0xc>
     324:	b672      	cpsid	i
     326:	e7fe      	b.n	326 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
     328:	b672      	cpsid	i
     32a:	e7fe      	b.n	32a <prvTaskExitError+0xe>
     32c:	20000000 	.word	0x20000000

00000330 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
     330:	4a06      	ldr	r2, [pc, #24]	; (34c <pxCurrentTCBConst2>)
     332:	6813      	ldr	r3, [r2, #0]
     334:	6818      	ldr	r0, [r3, #0]
     336:	3020      	adds	r0, #32
     338:	f380 8809 	msr	PSP, r0
     33c:	2002      	movs	r0, #2
     33e:	f380 8814 	msr	CONTROL, r0
     342:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
     344:	46ae      	mov	lr, r5
     346:	b662      	cpsie	i
     348:	bd00      	pop	{pc}
     34a:	46c0      	nop			; (mov r8, r8)

0000034c <pxCurrentTCBConst2>:
     34c:	200014b0 	.word	0x200014b0

00000350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     350:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     352:	1f03      	subs	r3, r0, #4
     354:	2480      	movs	r4, #128	; 0x80
     356:	0464      	lsls	r4, r4, #17
     358:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
     35a:	3b04      	subs	r3, #4
     35c:	6019      	str	r1, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
     35e:	3b04      	subs	r3, #4
     360:	4902      	ldr	r1, [pc, #8]	; (36c <pxPortInitialiseStack+0x1c>)
     362:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
     364:	3b14      	subs	r3, #20
     366:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */

	return pxTopOfStack;
     368:	3840      	subs	r0, #64	; 0x40
}
     36a:	bd10      	pop	{r4, pc}
     36c:	0000031d 	.word	0x0000031d

00000370 <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
     370:	4770      	bx	lr
     372:	46c0      	nop			; (mov r8, r8)

00000374 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
     374:	2280      	movs	r2, #128	; 0x80
     376:	0552      	lsls	r2, r2, #21
     378:	4b03      	ldr	r3, [pc, #12]	; (388 <vPortYield+0x14>)
     37a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
     37c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     380:	f3bf 8f6f 	isb	sy
}
     384:	4770      	bx	lr
     386:	46c0      	nop			; (mov r8, r8)
     388:	e000ed04 	.word	0xe000ed04

0000038c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
     38c:	b672      	cpsid	i
    uxCriticalNesting++;
     38e:	4b04      	ldr	r3, [pc, #16]	; (3a0 <vPortEnterCritical+0x14>)
     390:	681a      	ldr	r2, [r3, #0]
     392:	3201      	adds	r2, #1
     394:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
     396:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
     39a:	f3bf 8f6f 	isb	sy
}
     39e:	4770      	bx	lr
     3a0:	20000000 	.word	0x20000000

000003a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
     3a4:	4b06      	ldr	r3, [pc, #24]	; (3c0 <vPortExitCritical+0x1c>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	2b00      	cmp	r3, #0
     3aa:	d101      	bne.n	3b0 <vPortExitCritical+0xc>
     3ac:	b672      	cpsid	i
     3ae:	e7fe      	b.n	3ae <vPortExitCritical+0xa>
    uxCriticalNesting--;
     3b0:	3b01      	subs	r3, #1
     3b2:	4a03      	ldr	r2, [pc, #12]	; (3c0 <vPortExitCritical+0x1c>)
     3b4:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
     3b6:	2b00      	cmp	r3, #0
     3b8:	d100      	bne.n	3bc <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
     3ba:	b662      	cpsie	i
    }
}
     3bc:	4770      	bx	lr
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	20000000 	.word	0x20000000

000003c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
     3c4:	f3ef 8010 	mrs	r0, PRIMASK
     3c8:	b672      	cpsid	i
     3ca:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
     3cc:	2000      	movs	r0, #0
     3ce:	46c0      	nop			; (mov r8, r8)

000003d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
     3d0:	f380 8810 	msr	PRIMASK, r0
     3d4:	4770      	bx	lr
     3d6:	46c0      	nop			; (mov r8, r8)

000003d8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     3d8:	f3ef 8009 	mrs	r0, PSP
     3dc:	4b0e      	ldr	r3, [pc, #56]	; (418 <pxCurrentTCBConst>)
     3de:	681a      	ldr	r2, [r3, #0]
     3e0:	3820      	subs	r0, #32
     3e2:	6010      	str	r0, [r2, #0]
     3e4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     3e6:	4644      	mov	r4, r8
     3e8:	464d      	mov	r5, r9
     3ea:	4656      	mov	r6, sl
     3ec:	465f      	mov	r7, fp
     3ee:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
     3f0:	b508      	push	{r3, lr}
     3f2:	b672      	cpsid	i
     3f4:	f000 fef2 	bl	11dc <vTaskSwitchContext>
     3f8:	b662      	cpsie	i
     3fa:	bc0c      	pop	{r2, r3}
     3fc:	6811      	ldr	r1, [r2, #0]
     3fe:	6808      	ldr	r0, [r1, #0]
     400:	3010      	adds	r0, #16
     402:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     404:	46a0      	mov	r8, r4
     406:	46a9      	mov	r9, r5
     408:	46b2      	mov	sl, r6
     40a:	46bb      	mov	fp, r7
     40c:	f380 8809 	msr	PSP, r0
     410:	3820      	subs	r0, #32
     412:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
     414:	4718      	bx	r3
     416:	46c0      	nop			; (mov r8, r8)

00000418 <pxCurrentTCBConst>:
     418:	200014b0 	.word	0x200014b0

0000041c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     41c:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
     41e:	4b07      	ldr	r3, [pc, #28]	; (43c <SysTick_Handler+0x20>)
     420:	4798      	blx	r3
     422:	1c04      	adds	r4, r0, #0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
     424:	4b06      	ldr	r3, [pc, #24]	; (440 <SysTick_Handler+0x24>)
     426:	4798      	blx	r3
     428:	2800      	cmp	r0, #0
     42a:	d003      	beq.n	434 <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     42c:	2280      	movs	r2, #128	; 0x80
     42e:	0552      	lsls	r2, r2, #21
     430:	4b04      	ldr	r3, [pc, #16]	; (444 <SysTick_Handler+0x28>)
     432:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
     434:	1c20      	adds	r0, r4, #0
     436:	4b04      	ldr	r3, [pc, #16]	; (448 <SysTick_Handler+0x2c>)
     438:	4798      	blx	r3
}
     43a:	bd10      	pop	{r4, pc}
     43c:	000003c5 	.word	0x000003c5
     440:	00000f15 	.word	0x00000f15
     444:	e000ed04 	.word	0xe000ed04
     448:	000003d1 	.word	0x000003d1

0000044c <vPortSetupTimerInterrupt>:
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
     44c:	2200      	movs	r2, #0
     44e:	4b04      	ldr	r3, [pc, #16]	; (460 <vPortSetupTimerInterrupt+0x14>)
     450:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     452:	4a04      	ldr	r2, [pc, #16]	; (464 <vPortSetupTimerInterrupt+0x18>)
     454:	4b04      	ldr	r3, [pc, #16]	; (468 <vPortSetupTimerInterrupt+0x1c>)
     456:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     458:	2207      	movs	r2, #7
     45a:	4b04      	ldr	r3, [pc, #16]	; (46c <vPortSetupTimerInterrupt+0x20>)
     45c:	601a      	str	r2, [r3, #0]
}
     45e:	4770      	bx	lr
     460:	e000e018 	.word	0xe000e018
     464:	0000bb7f 	.word	0x0000bb7f
     468:	e000e014 	.word	0xe000e014
     46c:	e000e010 	.word	0xe000e010

00000470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     470:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     472:	4b0a      	ldr	r3, [pc, #40]	; (49c <xPortStartScheduler+0x2c>)
     474:	6819      	ldr	r1, [r3, #0]
     476:	22ff      	movs	r2, #255	; 0xff
     478:	0412      	lsls	r2, r2, #16
     47a:	430a      	orrs	r2, r1
     47c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     47e:	6819      	ldr	r1, [r3, #0]
     480:	22ff      	movs	r2, #255	; 0xff
     482:	0612      	lsls	r2, r2, #24
     484:	430a      	orrs	r2, r1
     486:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
     488:	4b05      	ldr	r3, [pc, #20]	; (4a0 <xPortStartScheduler+0x30>)
     48a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     48c:	2200      	movs	r2, #0
     48e:	4b05      	ldr	r3, [pc, #20]	; (4a4 <xPortStartScheduler+0x34>)
     490:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
     492:	4b05      	ldr	r3, [pc, #20]	; (4a8 <xPortStartScheduler+0x38>)
     494:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
     496:	4b05      	ldr	r3, [pc, #20]	; (4ac <xPortStartScheduler+0x3c>)
     498:	4798      	blx	r3
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	e000ed20 	.word	0xe000ed20
     4a0:	0000044d 	.word	0x0000044d
     4a4:	20000000 	.word	0x20000000
     4a8:	00000331 	.word	0x00000331
     4ac:	0000031d 	.word	0x0000031d

000004b0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     4b0:	b570      	push	{r4, r5, r6, lr}
     4b2:	1c04      	adds	r4, r0, #0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
     4b4:	4b2a      	ldr	r3, [pc, #168]	; (560 <pvPortMalloc+0xb0>)
     4b6:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
     4b8:	4b2a      	ldr	r3, [pc, #168]	; (564 <pvPortMalloc+0xb4>)
     4ba:	689b      	ldr	r3, [r3, #8]
     4bc:	2b00      	cmp	r3, #0
     4be:	d110      	bne.n	4e2 <pvPortMalloc+0x32>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     4c0:	4b28      	ldr	r3, [pc, #160]	; (564 <pvPortMalloc+0xb4>)
     4c2:	1c1a      	adds	r2, r3, #0
     4c4:	3214      	adds	r2, #20
     4c6:	2107      	movs	r1, #7
     4c8:	438a      	bics	r2, r1

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4ca:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
     4cc:	2500      	movs	r5, #0
     4ce:	605d      	str	r5, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     4d0:	4925      	ldr	r1, [pc, #148]	; (568 <pvPortMalloc+0xb8>)
     4d2:	4826      	ldr	r0, [pc, #152]	; (56c <pvPortMalloc+0xbc>)
     4d4:	6108      	str	r0, [r1, #16]
	xEnd.pxNextFreeBlock = NULL;
     4d6:	60cd      	str	r5, [r1, #12]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     4d8:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     4da:	310c      	adds	r1, #12
     4dc:	6011      	str	r1, [r2, #0]
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
			xHeapHasBeenInitialised = pdTRUE;
     4de:	2201      	movs	r2, #1
     4e0:	609a      	str	r2, [r3, #8]

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     4e2:	2500      	movs	r5, #0
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
     4e4:	2c00      	cmp	r4, #0
     4e6:	d036      	beq.n	556 <pvPortMalloc+0xa6>
		{
			xWantedSize += heapSTRUCT_SIZE;
     4e8:	1c21      	adds	r1, r4, #0
     4ea:	3108      	adds	r1, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
     4ec:	0748      	lsls	r0, r1, #29
     4ee:	d002      	beq.n	4f6 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     4f0:	2307      	movs	r3, #7
     4f2:	4399      	bics	r1, r3
     4f4:	3108      	adds	r1, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     4f6:	1e4b      	subs	r3, r1, #1

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     4f8:	2500      	movs	r5, #0
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
     4fa:	4a1d      	ldr	r2, [pc, #116]	; (570 <pvPortMalloc+0xc0>)
     4fc:	4293      	cmp	r3, r2
     4fe:	d82a      	bhi.n	556 <pvPortMalloc+0xa6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
     500:	4c18      	ldr	r4, [pc, #96]	; (564 <pvPortMalloc+0xb4>)
     502:	6823      	ldr	r3, [r4, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     504:	685a      	ldr	r2, [r3, #4]
     506:	4291      	cmp	r1, r2
     508:	d905      	bls.n	516 <pvPortMalloc+0x66>
     50a:	681a      	ldr	r2, [r3, #0]
     50c:	2a00      	cmp	r2, #0
     50e:	d002      	beq.n	516 <pvPortMalloc+0x66>
     510:	1c1c      	adds	r4, r3, #0
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
     512:	1c13      	adds	r3, r2, #0
     514:	e7f6      	b.n	504 <pvPortMalloc+0x54>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
     516:	4a14      	ldr	r2, [pc, #80]	; (568 <pvPortMalloc+0xb8>)
     518:	320c      	adds	r2, #12
     51a:	4293      	cmp	r3, r2
     51c:	d01a      	beq.n	554 <pvPortMalloc+0xa4>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     51e:	6825      	ldr	r5, [r4, #0]
     520:	3508      	adds	r5, #8

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     522:	681e      	ldr	r6, [r3, #0]
     524:	6026      	str	r6, [r4, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     526:	6858      	ldr	r0, [r3, #4]
     528:	1a42      	subs	r2, r0, r1
     52a:	2a10      	cmp	r2, #16
     52c:	d90c      	bls.n	548 <pvPortMalloc+0x98>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     52e:	1858      	adds	r0, r3, r1

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     530:	6042      	str	r2, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
     532:	6059      	str	r1, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     534:	6844      	ldr	r4, [r0, #4]
     536:	490b      	ldr	r1, [pc, #44]	; (564 <pvPortMalloc+0xb4>)
     538:	680a      	ldr	r2, [r1, #0]
     53a:	6856      	ldr	r6, [r2, #4]
     53c:	42b4      	cmp	r4, r6
     53e:	d901      	bls.n	544 <pvPortMalloc+0x94>
     540:	1c11      	adds	r1, r2, #0
     542:	e7f9      	b.n	538 <pvPortMalloc+0x88>
     544:	6002      	str	r2, [r0, #0]
     546:	6008      	str	r0, [r1, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
     548:	4a0a      	ldr	r2, [pc, #40]	; (574 <pvPortMalloc+0xc4>)
     54a:	685b      	ldr	r3, [r3, #4]
     54c:	6810      	ldr	r0, [r2, #0]
     54e:	1ac3      	subs	r3, r0, r3
     550:	6013      	str	r3, [r2, #0]
     552:	e000      	b.n	556 <pvPortMalloc+0xa6>

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
     554:	2500      	movs	r5, #0
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <pvPortMalloc+0xc8>)
     558:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
     55a:	1c28      	adds	r0, r5, #0
     55c:	bd70      	pop	{r4, r5, r6, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	00000ee5 	.word	0x00000ee5
     564:	20000470 	.word	0x20000470
     568:	20001470 	.word	0x20001470
     56c:	00000ff8 	.word	0x00000ff8
     570:	00000ff6 	.word	0x00000ff6
     574:	20000004 	.word	0x20000004
     578:	00001025 	.word	0x00001025

0000057c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     57c:	b538      	push	{r3, r4, r5, lr}
     57e:	1e04      	subs	r4, r0, #0
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     580:	d015      	beq.n	5ae <vPortFree+0x32>
		before it. */
		puc -= heapSTRUCT_SIZE;

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
     582:	1c05      	adds	r5, r0, #0
     584:	3d08      	subs	r5, #8

		vTaskSuspendAll();
     586:	4b0a      	ldr	r3, [pc, #40]	; (5b0 <vPortFree+0x34>)
     588:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     58a:	6869      	ldr	r1, [r5, #4]
     58c:	4a09      	ldr	r2, [pc, #36]	; (5b4 <vPortFree+0x38>)
     58e:	6813      	ldr	r3, [r2, #0]
     590:	6858      	ldr	r0, [r3, #4]
     592:	4281      	cmp	r1, r0
     594:	d901      	bls.n	59a <vPortFree+0x1e>
     596:	1c1a      	adds	r2, r3, #0
     598:	e7f9      	b.n	58e <vPortFree+0x12>
     59a:	3c08      	subs	r4, #8
     59c:	6023      	str	r3, [r4, #0]
     59e:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
     5a0:	4b05      	ldr	r3, [pc, #20]	; (5b8 <vPortFree+0x3c>)
     5a2:	6862      	ldr	r2, [r4, #4]
     5a4:	6819      	ldr	r1, [r3, #0]
     5a6:	188a      	adds	r2, r1, r2
     5a8:	601a      	str	r2, [r3, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <vPortFree+0x40>)
     5ac:	4798      	blx	r3
	}
}
     5ae:	bd38      	pop	{r3, r4, r5, pc}
     5b0:	00000ee5 	.word	0x00000ee5
     5b4:	20000470 	.word	0x20000470
     5b8:	20000004 	.word	0x20000004
     5bc:	00001025 	.word	0x00001025

000005c0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     5c0:	b538      	push	{r3, r4, r5, lr}
     5c2:	1c04      	adds	r4, r0, #0
     5c4:	1c15      	adds	r5, r2, #0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     5c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
     5c8:	2a00      	cmp	r2, #0
     5ca:	d108      	bne.n	5de <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     5cc:	6801      	ldr	r1, [r0, #0]
     5ce:	2900      	cmp	r1, #0
     5d0:	d12a      	bne.n	628 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     5d2:	6840      	ldr	r0, [r0, #4]
     5d4:	4b16      	ldr	r3, [pc, #88]	; (630 <prvCopyDataToQueue+0x70>)
     5d6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     5d8:	2300      	movs	r3, #0
     5da:	6063      	str	r3, [r4, #4]
     5dc:	e024      	b.n	628 <prvCopyDataToQueue+0x68>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     5de:	2d00      	cmp	r5, #0
     5e0:	d10c      	bne.n	5fc <prvCopyDataToQueue+0x3c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     5e2:	6880      	ldr	r0, [r0, #8]
     5e4:	4b13      	ldr	r3, [pc, #76]	; (634 <prvCopyDataToQueue+0x74>)
     5e6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     5e8:	68a2      	ldr	r2, [r4, #8]
     5ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
     5ec:	1853      	adds	r3, r2, r1
     5ee:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     5f0:	6862      	ldr	r2, [r4, #4]
     5f2:	4293      	cmp	r3, r2
     5f4:	d318      	bcc.n	628 <prvCopyDataToQueue+0x68>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     5f6:	6823      	ldr	r3, [r4, #0]
     5f8:	60a3      	str	r3, [r4, #8]
     5fa:	e015      	b.n	628 <prvCopyDataToQueue+0x68>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     5fc:	68c0      	ldr	r0, [r0, #12]
     5fe:	4b0d      	ldr	r3, [pc, #52]	; (634 <prvCopyDataToQueue+0x74>)
     600:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     602:	6c21      	ldr	r1, [r4, #64]	; 0x40
     604:	424a      	negs	r2, r1
     606:	68e1      	ldr	r1, [r4, #12]
     608:	188b      	adds	r3, r1, r2
     60a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     60c:	6821      	ldr	r1, [r4, #0]
     60e:	428b      	cmp	r3, r1
     610:	d202      	bcs.n	618 <prvCopyDataToQueue+0x58>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     612:	6863      	ldr	r3, [r4, #4]
     614:	189a      	adds	r2, r3, r2
     616:	60e2      	str	r2, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     618:	2d02      	cmp	r5, #2
     61a:	d105      	bne.n	628 <prvCopyDataToQueue+0x68>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     61c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     61e:	2b00      	cmp	r3, #0
     620:	d002      	beq.n	628 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
     622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     624:	3b01      	subs	r3, #1
     626:	63a3      	str	r3, [r4, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
     628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     62a:	3301      	adds	r3, #1
     62c:	63a3      	str	r3, [r4, #56]	; 0x38
}
     62e:	bd38      	pop	{r3, r4, r5, pc}
     630:	000014b5 	.word	0x000014b5
     634:	000022f9 	.word	0x000022f9

00000638 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     638:	b510      	push	{r4, lr}
     63a:	b082      	sub	sp, #8
     63c:	9001      	str	r0, [sp, #4]
     63e:	1c0a      	adds	r2, r1, #0
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     640:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     642:	2c00      	cmp	r4, #0
     644:	d101      	bne.n	64a <prvNotifyQueueSetContainer+0x12>
     646:	b672      	cpsid	i
     648:	e7fe      	b.n	648 <prvNotifyQueueSetContainer+0x10>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     64a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     64c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     64e:	4299      	cmp	r1, r3
     650:	d301      	bcc.n	656 <prvNotifyQueueSetContainer+0x1e>
     652:	b672      	cpsid	i
     654:	e7fe      	b.n	654 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     658:	2000      	movs	r0, #0
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     65a:	428b      	cmp	r3, r1
     65c:	d90d      	bls.n	67a <prvNotifyQueueSetContainer+0x42>
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     65e:	1c20      	adds	r0, r4, #0
     660:	a901      	add	r1, sp, #4
     662:	4b07      	ldr	r3, [pc, #28]	; (680 <prvNotifyQueueSetContainer+0x48>)
     664:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     666:	2000      	movs	r0, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
		{
			traceQUEUE_SEND( pxQueueSetContainer );
			/* The data copies is the handle of the queue that contains data. */
			prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
			if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     668:	6a63      	ldr	r3, [r4, #36]	; 0x24
     66a:	2b00      	cmp	r3, #0
     66c:	d005      	beq.n	67a <prvNotifyQueueSetContainer+0x42>
			{
				if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     66e:	1c20      	adds	r0, r4, #0
     670:	3024      	adds	r0, #36	; 0x24
     672:	4b04      	ldr	r3, [pc, #16]	; (684 <prvNotifyQueueSetContainer+0x4c>)
     674:	4798      	blx	r3
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
     676:	1e43      	subs	r3, r0, #1
     678:	4198      	sbcs	r0, r3
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     67a:	b002      	add	sp, #8
     67c:	bd10      	pop	{r4, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	000005c1 	.word	0x000005c1
     684:	000012f5 	.word	0x000012f5

00000688 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     688:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     68a:	6804      	ldr	r4, [r0, #0]
     68c:	2c00      	cmp	r4, #0
     68e:	d00c      	beq.n	6aa <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     690:	6c02      	ldr	r2, [r0, #64]	; 0x40
     692:	68c5      	ldr	r5, [r0, #12]
     694:	18ab      	adds	r3, r5, r2
     696:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     698:	6845      	ldr	r5, [r0, #4]
     69a:	42ab      	cmp	r3, r5
     69c:	d300      	bcc.n	6a0 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     69e:	60c4      	str	r4, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     6a0:	68c3      	ldr	r3, [r0, #12]
     6a2:	1c08      	adds	r0, r1, #0
     6a4:	1c19      	adds	r1, r3, #0
     6a6:	4b01      	ldr	r3, [pc, #4]	; (6ac <prvCopyDataFromQueue+0x24>)
     6a8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     6aa:	bd38      	pop	{r3, r4, r5, pc}
     6ac:	000022f9 	.word	0x000022f9

000006b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6b2:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     6b4:	4b23      	ldr	r3, [pc, #140]	; (744 <prvUnlockQueue+0x94>)
     6b6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     6b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     6ba:	2b00      	cmp	r3, #0
     6bc:	dd1c      	ble.n	6f8 <prvUnlockQueue+0x48>
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     6be:	4e22      	ldr	r6, [pc, #136]	; (748 <prvUnlockQueue+0x98>)
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     6c0:	4d22      	ldr	r5, [pc, #136]	; (74c <prvUnlockQueue+0x9c>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
     6c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     6c4:	2b00      	cmp	r3, #0
     6c6:	d007      	beq.n	6d8 <prvUnlockQueue+0x28>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
     6c8:	1c20      	adds	r0, r4, #0
     6ca:	2100      	movs	r1, #0
     6cc:	47a8      	blx	r5
     6ce:	2801      	cmp	r0, #1
     6d0:	d10c      	bne.n	6ec <prvUnlockQueue+0x3c>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
     6d2:	4b1f      	ldr	r3, [pc, #124]	; (750 <prvUnlockQueue+0xa0>)
     6d4:	4798      	blx	r3
     6d6:	e009      	b.n	6ec <prvUnlockQueue+0x3c>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     6d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
     6da:	2b00      	cmp	r3, #0
     6dc:	d00c      	beq.n	6f8 <prvUnlockQueue+0x48>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     6de:	1c20      	adds	r0, r4, #0
     6e0:	3024      	adds	r0, #36	; 0x24
     6e2:	47b0      	blx	r6
     6e4:	2800      	cmp	r0, #0
     6e6:	d001      	beq.n	6ec <prvUnlockQueue+0x3c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
     6e8:	4b19      	ldr	r3, [pc, #100]	; (750 <prvUnlockQueue+0xa0>)
     6ea:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     6ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     6ee:	3b01      	subs	r3, #1
     6f0:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     6f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     6f4:	2b00      	cmp	r3, #0
     6f6:	dce4      	bgt.n	6c2 <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
     6f8:	2301      	movs	r3, #1
     6fa:	425b      	negs	r3, r3
     6fc:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     6fe:	4b15      	ldr	r3, [pc, #84]	; (754 <prvUnlockQueue+0xa4>)
     700:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     702:	4b10      	ldr	r3, [pc, #64]	; (744 <prvUnlockQueue+0x94>)
     704:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     706:	6c63      	ldr	r3, [r4, #68]	; 0x44
     708:	2b00      	cmp	r3, #0
     70a:	dd15      	ble.n	738 <prvUnlockQueue+0x88>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     70c:	6923      	ldr	r3, [r4, #16]
     70e:	2b00      	cmp	r3, #0
     710:	d012      	beq.n	738 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     712:	1c27      	adds	r7, r4, #0
     714:	3710      	adds	r7, #16
     716:	4e0c      	ldr	r6, [pc, #48]	; (748 <prvUnlockQueue+0x98>)
				{
					vTaskMissedYield();
     718:	4d0d      	ldr	r5, [pc, #52]	; (750 <prvUnlockQueue+0xa0>)
     71a:	e002      	b.n	722 <prvUnlockQueue+0x72>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     71c:	6923      	ldr	r3, [r4, #16]
     71e:	2b00      	cmp	r3, #0
     720:	d00a      	beq.n	738 <prvUnlockQueue+0x88>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     722:	1c38      	adds	r0, r7, #0
     724:	47b0      	blx	r6
     726:	2800      	cmp	r0, #0
     728:	d000      	beq.n	72c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
     72a:	47a8      	blx	r5
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
     72c:	6c63      	ldr	r3, [r4, #68]	; 0x44
     72e:	3b01      	subs	r3, #1
     730:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     732:	6c63      	ldr	r3, [r4, #68]	; 0x44
     734:	2b00      	cmp	r3, #0
     736:	dcf1      	bgt.n	71c <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     738:	2301      	movs	r3, #1
     73a:	425b      	negs	r3, r3
     73c:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     73e:	4b05      	ldr	r3, [pc, #20]	; (754 <prvUnlockQueue+0xa4>)
     740:	4798      	blx	r3
}
     742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     744:	0000038d 	.word	0x0000038d
     748:	000012f5 	.word	0x000012f5
     74c:	00000639 	.word	0x00000639
     750:	00001401 	.word	0x00001401
     754:	000003a5 	.word	0x000003a5

00000758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     758:	b538      	push	{r3, r4, r5, lr}
     75a:	1c04      	adds	r4, r0, #0
     75c:	1c0d      	adds	r5, r1, #0
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     75e:	2800      	cmp	r0, #0
     760:	d101      	bne.n	766 <xQueueGenericReset+0xe>
     762:	b672      	cpsid	i
     764:	e7fe      	b.n	764 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
     766:	4b15      	ldr	r3, [pc, #84]	; (7bc <xQueueGenericReset+0x64>)
     768:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     76a:	6823      	ldr	r3, [r4, #0]
     76c:	6c22      	ldr	r2, [r4, #64]	; 0x40
     76e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
     770:	4350      	muls	r0, r2
     772:	1819      	adds	r1, r3, r0
     774:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     776:	2100      	movs	r1, #0
     778:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     77a:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     77c:	1a82      	subs	r2, r0, r2
     77e:	189b      	adds	r3, r3, r2
     780:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     782:	2301      	movs	r3, #1
     784:	425b      	negs	r3, r3
     786:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     788:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     78a:	2d00      	cmp	r5, #0
     78c:	d10b      	bne.n	7a6 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     78e:	6921      	ldr	r1, [r4, #16]
     790:	2900      	cmp	r1, #0
     792:	d00f      	beq.n	7b4 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     794:	1c20      	adds	r0, r4, #0
     796:	3010      	adds	r0, #16
     798:	4b09      	ldr	r3, [pc, #36]	; (7c0 <xQueueGenericReset+0x68>)
     79a:	4798      	blx	r3
     79c:	2801      	cmp	r0, #1
     79e:	d109      	bne.n	7b4 <xQueueGenericReset+0x5c>
				{
					queueYIELD_IF_USING_PREEMPTION();
     7a0:	4b08      	ldr	r3, [pc, #32]	; (7c4 <xQueueGenericReset+0x6c>)
     7a2:	4798      	blx	r3
     7a4:	e006      	b.n	7b4 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     7a6:	1c20      	adds	r0, r4, #0
     7a8:	3010      	adds	r0, #16
     7aa:	4d07      	ldr	r5, [pc, #28]	; (7c8 <xQueueGenericReset+0x70>)
     7ac:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     7ae:	1c20      	adds	r0, r4, #0
     7b0:	3024      	adds	r0, #36	; 0x24
     7b2:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
     7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <xQueueGenericReset+0x74>)
     7b6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     7b8:	2001      	movs	r0, #1
     7ba:	bd38      	pop	{r3, r4, r5, pc}
     7bc:	0000038d 	.word	0x0000038d
     7c0:	000012f5 	.word	0x000012f5
     7c4:	00000375 	.word	0x00000375
     7c8:	00000291 	.word	0x00000291
     7cc:	000003a5 	.word	0x000003a5

000007d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
     7d0:	b570      	push	{r4, r5, r6, lr}
     7d2:	1c05      	adds	r5, r0, #0
     7d4:	1c0e      	adds	r6, r1, #0
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
     7d6:	2800      	cmp	r0, #0
     7d8:	d011      	beq.n	7fe <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     7da:	2050      	movs	r0, #80	; 0x50
     7dc:	4b0e      	ldr	r3, [pc, #56]	; (818 <xQueueGenericCreate+0x48>)
     7de:	4798      	blx	r3
     7e0:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     7e2:	d00c      	beq.n	7fe <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     7e4:	1c30      	adds	r0, r6, #0
     7e6:	4368      	muls	r0, r5
     7e8:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
     7ea:	4b0b      	ldr	r3, [pc, #44]	; (818 <xQueueGenericCreate+0x48>)
     7ec:	4798      	blx	r3
     7ee:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     7f0:	2800      	cmp	r0, #0
     7f2:	d106      	bne.n	802 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     7f4:	1c20      	adds	r0, r4, #0
     7f6:	4b09      	ldr	r3, [pc, #36]	; (81c <xQueueGenericCreate+0x4c>)
     7f8:	4798      	blx	r3
     7fa:	e000      	b.n	7fe <xQueueGenericCreate+0x2e>
     7fc:	e7fe      	b.n	7fc <xQueueGenericCreate+0x2c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
     7fe:	b672      	cpsid	i
     800:	e7fc      	b.n	7fc <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     802:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     804:	6426      	str	r6, [r4, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     806:	1c20      	adds	r0, r4, #0
     808:	2101      	movs	r1, #1
     80a:	4b05      	ldr	r3, [pc, #20]	; (820 <xQueueGenericCreate+0x50>)
     80c:	4798      	blx	r3
				}
				#endif /* configUSE_TRACE_FACILITY */

				#if( configUSE_QUEUE_SETS == 1 )
				{
					pxNewQueue->pxQueueSetContainer = NULL;
     80e:	2300      	movs	r3, #0
     810:	64e3      	str	r3, [r4, #76]	; 0x4c
	}

	configASSERT( xReturn );

	return xReturn;
}
     812:	1c20      	adds	r0, r4, #0
     814:	bd70      	pop	{r4, r5, r6, pc}
     816:	46c0      	nop			; (mov r8, r8)
     818:	000004b1 	.word	0x000004b1
     81c:	0000057d 	.word	0x0000057d
     820:	00000759 	.word	0x00000759

00000824 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	4657      	mov	r7, sl
     828:	464e      	mov	r6, r9
     82a:	4645      	mov	r5, r8
     82c:	b4e0      	push	{r5, r6, r7}
     82e:	b084      	sub	sp, #16
     830:	1c04      	adds	r4, r0, #0
     832:	1c0e      	adds	r6, r1, #0
     834:	9201      	str	r2, [sp, #4]
     836:	1c1d      	adds	r5, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     838:	2800      	cmp	r0, #0
     83a:	d101      	bne.n	840 <xQueueGenericSend+0x1c>
     83c:	b672      	cpsid	i
     83e:	e7fe      	b.n	83e <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     840:	2900      	cmp	r1, #0
     842:	d104      	bne.n	84e <xQueueGenericSend+0x2a>
     844:	6c02      	ldr	r2, [r0, #64]	; 0x40
     846:	2a00      	cmp	r2, #0
     848:	d001      	beq.n	84e <xQueueGenericSend+0x2a>
     84a:	b672      	cpsid	i
     84c:	e7fe      	b.n	84c <xQueueGenericSend+0x28>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     84e:	2d02      	cmp	r5, #2
     850:	d104      	bne.n	85c <xQueueGenericSend+0x38>
     852:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     854:	2b01      	cmp	r3, #1
     856:	d001      	beq.n	85c <xQueueGenericSend+0x38>
     858:	b672      	cpsid	i
     85a:	e7fe      	b.n	85a <xQueueGenericSend+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     85c:	4b41      	ldr	r3, [pc, #260]	; (964 <xQueueGenericSend+0x140>)
     85e:	4798      	blx	r3
     860:	2800      	cmp	r0, #0
     862:	d102      	bne.n	86a <xQueueGenericSend+0x46>
     864:	9a01      	ldr	r2, [sp, #4]
     866:	2a00      	cmp	r2, #0
     868:	d103      	bne.n	872 <xQueueGenericSend+0x4e>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     86a:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     86c:	4b3e      	ldr	r3, [pc, #248]	; (968 <xQueueGenericSend+0x144>)
     86e:	4698      	mov	r8, r3
     870:	e001      	b.n	876 <xQueueGenericSend+0x52>
	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     872:	b672      	cpsid	i
     874:	e7fe      	b.n	874 <xQueueGenericSend+0x50>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     876:	47c0      	blx	r8
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     878:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     87a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     87c:	4293      	cmp	r3, r2
     87e:	d301      	bcc.n	884 <xQueueGenericSend+0x60>
     880:	2d02      	cmp	r5, #2
     882:	d11f      	bne.n	8c4 <xQueueGenericSend+0xa0>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     884:	1c20      	adds	r0, r4, #0
     886:	1c31      	adds	r1, r6, #0
     888:	1c2a      	adds	r2, r5, #0
     88a:	4b38      	ldr	r3, [pc, #224]	; (96c <xQueueGenericSend+0x148>)
     88c:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
     88e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     890:	2b00      	cmp	r3, #0
     892:	d008      	beq.n	8a6 <xQueueGenericSend+0x82>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     894:	1c20      	adds	r0, r4, #0
     896:	1c29      	adds	r1, r5, #0
     898:	4b35      	ldr	r3, [pc, #212]	; (970 <xQueueGenericSend+0x14c>)
     89a:	4798      	blx	r3
     89c:	2801      	cmp	r0, #1
     89e:	d10d      	bne.n	8bc <xQueueGenericSend+0x98>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
     8a0:	4b34      	ldr	r3, [pc, #208]	; (974 <xQueueGenericSend+0x150>)
     8a2:	4798      	blx	r3
     8a4:	e00a      	b.n	8bc <xQueueGenericSend+0x98>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     8a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
     8a8:	2a00      	cmp	r2, #0
     8aa:	d007      	beq.n	8bc <xQueueGenericSend+0x98>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     8ac:	1c20      	adds	r0, r4, #0
     8ae:	3024      	adds	r0, #36	; 0x24
     8b0:	4b31      	ldr	r3, [pc, #196]	; (978 <xQueueGenericSend+0x154>)
     8b2:	4798      	blx	r3
     8b4:	2801      	cmp	r0, #1
     8b6:	d101      	bne.n	8bc <xQueueGenericSend+0x98>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
     8b8:	4b2e      	ldr	r3, [pc, #184]	; (974 <xQueueGenericSend+0x150>)
     8ba:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     8bc:	4b2f      	ldr	r3, [pc, #188]	; (97c <xQueueGenericSend+0x158>)
     8be:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     8c0:	2001      	movs	r0, #1
     8c2:	e049      	b.n	958 <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     8c4:	9b01      	ldr	r3, [sp, #4]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d103      	bne.n	8d2 <xQueueGenericSend+0xae>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     8ca:	4b2c      	ldr	r3, [pc, #176]	; (97c <xQueueGenericSend+0x158>)
     8cc:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     8ce:	2000      	movs	r0, #0
     8d0:	e042      	b.n	958 <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
     8d2:	2f00      	cmp	r7, #0
     8d4:	d103      	bne.n	8de <xQueueGenericSend+0xba>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     8d6:	a802      	add	r0, sp, #8
     8d8:	4a29      	ldr	r2, [pc, #164]	; (980 <xQueueGenericSend+0x15c>)
     8da:	4790      	blx	r2
					xEntryTimeSet = pdTRUE;
     8dc:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     8de:	4b27      	ldr	r3, [pc, #156]	; (97c <xQueueGenericSend+0x158>)
     8e0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     8e2:	4b28      	ldr	r3, [pc, #160]	; (984 <xQueueGenericSend+0x160>)
     8e4:	4798      	blx	r3
		prvLockQueue( pxQueue );
     8e6:	4b20      	ldr	r3, [pc, #128]	; (968 <xQueueGenericSend+0x144>)
     8e8:	4798      	blx	r3
     8ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
     8ec:	3301      	adds	r3, #1
     8ee:	d101      	bne.n	8f4 <xQueueGenericSend+0xd0>
     8f0:	2300      	movs	r3, #0
     8f2:	6463      	str	r3, [r4, #68]	; 0x44
     8f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     8f6:	3301      	adds	r3, #1
     8f8:	d101      	bne.n	8fe <xQueueGenericSend+0xda>
     8fa:	2300      	movs	r3, #0
     8fc:	64a3      	str	r3, [r4, #72]	; 0x48
     8fe:	4b1f      	ldr	r3, [pc, #124]	; (97c <xQueueGenericSend+0x158>)
     900:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     902:	a802      	add	r0, sp, #8
     904:	a901      	add	r1, sp, #4
     906:	4b20      	ldr	r3, [pc, #128]	; (988 <xQueueGenericSend+0x164>)
     908:	4798      	blx	r3
     90a:	2800      	cmp	r0, #0
     90c:	d11e      	bne.n	94c <xQueueGenericSend+0x128>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     90e:	4b16      	ldr	r3, [pc, #88]	; (968 <xQueueGenericSend+0x144>)
     910:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     912:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     914:	4692      	mov	sl, r2
     916:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     918:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     91a:	4b18      	ldr	r3, [pc, #96]	; (97c <xQueueGenericSend+0x158>)
     91c:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     91e:	45ca      	cmp	sl, r9
     920:	d10e      	bne.n	940 <xQueueGenericSend+0x11c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     922:	1c20      	adds	r0, r4, #0
     924:	3010      	adds	r0, #16
     926:	9901      	ldr	r1, [sp, #4]
     928:	4b18      	ldr	r3, [pc, #96]	; (98c <xQueueGenericSend+0x168>)
     92a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     92c:	1c20      	adds	r0, r4, #0
     92e:	4b18      	ldr	r3, [pc, #96]	; (990 <xQueueGenericSend+0x16c>)
     930:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     932:	4b18      	ldr	r3, [pc, #96]	; (994 <xQueueGenericSend+0x170>)
     934:	4798      	blx	r3
     936:	2800      	cmp	r0, #0
     938:	d19d      	bne.n	876 <xQueueGenericSend+0x52>
				{
					portYIELD_WITHIN_API();
     93a:	4b0e      	ldr	r3, [pc, #56]	; (974 <xQueueGenericSend+0x150>)
     93c:	4798      	blx	r3
     93e:	e79a      	b.n	876 <xQueueGenericSend+0x52>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     940:	1c20      	adds	r0, r4, #0
     942:	4b13      	ldr	r3, [pc, #76]	; (990 <xQueueGenericSend+0x16c>)
     944:	4798      	blx	r3
				( void ) xTaskResumeAll();
     946:	4b13      	ldr	r3, [pc, #76]	; (994 <xQueueGenericSend+0x170>)
     948:	4798      	blx	r3
     94a:	e794      	b.n	876 <xQueueGenericSend+0x52>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     94c:	1c20      	adds	r0, r4, #0
     94e:	4b10      	ldr	r3, [pc, #64]	; (990 <xQueueGenericSend+0x16c>)
     950:	4798      	blx	r3
			( void ) xTaskResumeAll();
     952:	4b10      	ldr	r3, [pc, #64]	; (994 <xQueueGenericSend+0x170>)
     954:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     956:	2000      	movs	r0, #0
		}
	}
}
     958:	b004      	add	sp, #16
     95a:	bc1c      	pop	{r2, r3, r4}
     95c:	4690      	mov	r8, r2
     95e:	4699      	mov	r9, r3
     960:	46a2      	mov	sl, r4
     962:	bdf0      	pop	{r4, r5, r6, r7, pc}
     964:	00001419 	.word	0x00001419
     968:	0000038d 	.word	0x0000038d
     96c:	000005c1 	.word	0x000005c1
     970:	00000639 	.word	0x00000639
     974:	00000375 	.word	0x00000375
     978:	000012f5 	.word	0x000012f5
     97c:	000003a5 	.word	0x000003a5
     980:	00001371 	.word	0x00001371
     984:	00000ee5 	.word	0x00000ee5
     988:	00001391 	.word	0x00001391
     98c:	0000126d 	.word	0x0000126d
     990:	000006b1 	.word	0x000006b1
     994:	00001025 	.word	0x00001025

00000998 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     998:	b5f0      	push	{r4, r5, r6, r7, lr}
     99a:	4647      	mov	r7, r8
     99c:	b480      	push	{r7}
     99e:	1c04      	adds	r4, r0, #0
     9a0:	4688      	mov	r8, r1
     9a2:	1c16      	adds	r6, r2, #0
     9a4:	1c1d      	adds	r5, r3, #0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     9a6:	2800      	cmp	r0, #0
     9a8:	d101      	bne.n	9ae <xQueueGenericSendFromISR+0x16>
     9aa:	b672      	cpsid	i
     9ac:	e7fe      	b.n	9ac <xQueueGenericSendFromISR+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     9ae:	2900      	cmp	r1, #0
     9b0:	d104      	bne.n	9bc <xQueueGenericSendFromISR+0x24>
     9b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
     9b4:	2b00      	cmp	r3, #0
     9b6:	d001      	beq.n	9bc <xQueueGenericSendFromISR+0x24>
     9b8:	b672      	cpsid	i
     9ba:	e7fe      	b.n	9ba <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     9bc:	2d02      	cmp	r5, #2
     9be:	d133      	bne.n	a28 <xQueueGenericSendFromISR+0x90>
     9c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     9c2:	2a01      	cmp	r2, #1
     9c4:	d039      	beq.n	a3a <xQueueGenericSendFromISR+0xa2>
     9c6:	b672      	cpsid	i
     9c8:	e7fe      	b.n	9c8 <xQueueGenericSendFromISR+0x30>
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     9ca:	1c20      	adds	r0, r4, #0
     9cc:	4641      	mov	r1, r8
     9ce:	1c2a      	adds	r2, r5, #0
     9d0:	4b20      	ldr	r3, [pc, #128]	; (a54 <xQueueGenericSendFromISR+0xbc>)
     9d2:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     9d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     9d6:	3301      	adds	r3, #1
     9d8:	d11d      	bne.n	a16 <xQueueGenericSendFromISR+0x7e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
     9da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     9dc:	2b00      	cmp	r3, #0
     9de:	d00b      	beq.n	9f8 <xQueueGenericSendFromISR+0x60>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     9e0:	1c20      	adds	r0, r4, #0
     9e2:	1c29      	adds	r1, r5, #0
     9e4:	4b1c      	ldr	r3, [pc, #112]	; (a58 <xQueueGenericSendFromISR+0xc0>)
     9e6:	4798      	blx	r3
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     9e8:	2501      	movs	r5, #1
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
     9ea:	2801      	cmp	r0, #1
     9ec:	d12a      	bne.n	a44 <xQueueGenericSendFromISR+0xac>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     9ee:	2e00      	cmp	r6, #0
     9f0:	d016      	beq.n	a20 <xQueueGenericSendFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     9f2:	2301      	movs	r3, #1
     9f4:	6033      	str	r3, [r6, #0]
     9f6:	e025      	b.n	a44 <xQueueGenericSendFromISR+0xac>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     9f8:	2501      	movs	r5, #1
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     9fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
     9fc:	2a00      	cmp	r2, #0
     9fe:	d021      	beq.n	a44 <xQueueGenericSendFromISR+0xac>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     a00:	1c20      	adds	r0, r4, #0
     a02:	3024      	adds	r0, #36	; 0x24
     a04:	4b15      	ldr	r3, [pc, #84]	; (a5c <xQueueGenericSendFromISR+0xc4>)
     a06:	4798      	blx	r3
     a08:	2800      	cmp	r0, #0
     a0a:	d01b      	beq.n	a44 <xQueueGenericSendFromISR+0xac>
							{
								/* The task waiting has a higher priority so record that a
								context	switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
     a0c:	2e00      	cmp	r6, #0
     a0e:	d009      	beq.n	a24 <xQueueGenericSendFromISR+0x8c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
     a10:	2301      	movs	r3, #1
     a12:	6033      	str	r3, [r6, #0]
     a14:	e016      	b.n	a44 <xQueueGenericSendFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     a16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     a18:	3301      	adds	r3, #1
     a1a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
     a1c:	2501      	movs	r5, #1
     a1e:	e011      	b.n	a44 <xQueueGenericSendFromISR+0xac>
     a20:	2501      	movs	r5, #1
     a22:	e00f      	b.n	a44 <xQueueGenericSendFromISR+0xac>
     a24:	2501      	movs	r5, #1
     a26:	e00d      	b.n	a44 <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     a28:	4b0d      	ldr	r3, [pc, #52]	; (a60 <xQueueGenericSendFromISR+0xc8>)
     a2a:	4798      	blx	r3
     a2c:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     a2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a30:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     a32:	4293      	cmp	r3, r2
     a34:	d3c9      	bcc.n	9ca <xQueueGenericSendFromISR+0x32>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     a36:	2500      	movs	r5, #0
     a38:	e004      	b.n	a44 <xQueueGenericSendFromISR+0xac>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     a3a:	4b09      	ldr	r3, [pc, #36]	; (a60 <xQueueGenericSendFromISR+0xc8>)
     a3c:	4798      	blx	r3
     a3e:	1c07      	adds	r7, r0, #0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     a40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     a42:	e7c2      	b.n	9ca <xQueueGenericSendFromISR+0x32>
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     a44:	1c38      	adds	r0, r7, #0
     a46:	4b07      	ldr	r3, [pc, #28]	; (a64 <xQueueGenericSendFromISR+0xcc>)
     a48:	4798      	blx	r3

	return xReturn;
}
     a4a:	1c28      	adds	r0, r5, #0
     a4c:	bc04      	pop	{r2}
     a4e:	4690      	mov	r8, r2
     a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	000005c1 	.word	0x000005c1
     a58:	00000639 	.word	0x00000639
     a5c:	000012f5 	.word	0x000012f5
     a60:	000003c5 	.word	0x000003c5
     a64:	000003d1 	.word	0x000003d1

00000a68 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     a68:	b5f0      	push	{r4, r5, r6, r7, lr}
     a6a:	464f      	mov	r7, r9
     a6c:	4646      	mov	r6, r8
     a6e:	b4c0      	push	{r6, r7}
     a70:	b085      	sub	sp, #20
     a72:	1c04      	adds	r4, r0, #0
     a74:	1c0d      	adds	r5, r1, #0
     a76:	9201      	str	r2, [sp, #4]
     a78:	1c1f      	adds	r7, r3, #0
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
     a7a:	2800      	cmp	r0, #0
     a7c:	d101      	bne.n	a82 <xQueueGenericReceive+0x1a>
     a7e:	b672      	cpsid	i
     a80:	e7fe      	b.n	a80 <xQueueGenericReceive+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     a82:	2900      	cmp	r1, #0
     a84:	d104      	bne.n	a90 <xQueueGenericReceive+0x28>
     a86:	6c03      	ldr	r3, [r0, #64]	; 0x40
     a88:	2b00      	cmp	r3, #0
     a8a:	d001      	beq.n	a90 <xQueueGenericReceive+0x28>
     a8c:	b672      	cpsid	i
     a8e:	e7fe      	b.n	a8e <xQueueGenericReceive+0x26>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     a90:	4b4a      	ldr	r3, [pc, #296]	; (bbc <xQueueGenericReceive+0x154>)
     a92:	4798      	blx	r3
     a94:	2800      	cmp	r0, #0
     a96:	d102      	bne.n	a9e <xQueueGenericReceive+0x36>
     a98:	9b01      	ldr	r3, [sp, #4]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d103      	bne.n	aa6 <xQueueGenericReceive+0x3e>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     a9e:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     aa0:	4b47      	ldr	r3, [pc, #284]	; (bc0 <xQueueGenericReceive+0x158>)
     aa2:	4698      	mov	r8, r3
     aa4:	e001      	b.n	aaa <xQueueGenericReceive+0x42>

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     aa6:	b672      	cpsid	i
     aa8:	e7fe      	b.n	aa8 <xQueueGenericReceive+0x40>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     aaa:	47c0      	blx	r8
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     aac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     aae:	2b00      	cmp	r3, #0
     ab0:	d02b      	beq.n	b0a <xQueueGenericReceive+0xa2>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     ab2:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     ab4:	1c20      	adds	r0, r4, #0
     ab6:	1c29      	adds	r1, r5, #0
     ab8:	4b42      	ldr	r3, [pc, #264]	; (bc4 <xQueueGenericReceive+0x15c>)
     aba:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
     abc:	2f00      	cmp	r7, #0
     abe:	d114      	bne.n	aea <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
     ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     ac2:	3b01      	subs	r3, #1
     ac4:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     ac6:	6823      	ldr	r3, [r4, #0]
     ac8:	2b00      	cmp	r3, #0
     aca:	d102      	bne.n	ad2 <xQueueGenericReceive+0x6a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     acc:	4b3e      	ldr	r3, [pc, #248]	; (bc8 <xQueueGenericReceive+0x160>)
     ace:	4798      	blx	r3
     ad0:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ad2:	6923      	ldr	r3, [r4, #16]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d014      	beq.n	b02 <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     ad8:	1c20      	adds	r0, r4, #0
     ada:	3010      	adds	r0, #16
     adc:	4b3b      	ldr	r3, [pc, #236]	; (bcc <xQueueGenericReceive+0x164>)
     ade:	4798      	blx	r3
     ae0:	2801      	cmp	r0, #1
     ae2:	d10e      	bne.n	b02 <xQueueGenericReceive+0x9a>
						{
							queueYIELD_IF_USING_PREEMPTION();
     ae4:	4b3a      	ldr	r3, [pc, #232]	; (bd0 <xQueueGenericReceive+0x168>)
     ae6:	4798      	blx	r3
     ae8:	e00b      	b.n	b02 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     aea:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
     aee:	2b00      	cmp	r3, #0
     af0:	d007      	beq.n	b02 <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     af2:	1c20      	adds	r0, r4, #0
     af4:	3024      	adds	r0, #36	; 0x24
     af6:	4b35      	ldr	r3, [pc, #212]	; (bcc <xQueueGenericReceive+0x164>)
     af8:	4798      	blx	r3
     afa:	2800      	cmp	r0, #0
     afc:	d001      	beq.n	b02 <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
     afe:	4b34      	ldr	r3, [pc, #208]	; (bd0 <xQueueGenericReceive+0x168>)
     b00:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
     b02:	4b34      	ldr	r3, [pc, #208]	; (bd4 <xQueueGenericReceive+0x16c>)
     b04:	4798      	blx	r3
				return pdPASS;
     b06:	2001      	movs	r0, #1
     b08:	e052      	b.n	bb0 <xQueueGenericReceive+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     b0a:	9b01      	ldr	r3, [sp, #4]
     b0c:	2b00      	cmp	r3, #0
     b0e:	d103      	bne.n	b18 <xQueueGenericReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     b10:	4b30      	ldr	r3, [pc, #192]	; (bd4 <xQueueGenericReceive+0x16c>)
     b12:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     b14:	2000      	movs	r0, #0
     b16:	e04b      	b.n	bb0 <xQueueGenericReceive+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
     b18:	2e00      	cmp	r6, #0
     b1a:	d103      	bne.n	b24 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     b1c:	a802      	add	r0, sp, #8
     b1e:	4b2e      	ldr	r3, [pc, #184]	; (bd8 <xQueueGenericReceive+0x170>)
     b20:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     b22:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     b24:	4b2b      	ldr	r3, [pc, #172]	; (bd4 <xQueueGenericReceive+0x16c>)
     b26:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     b28:	4b2c      	ldr	r3, [pc, #176]	; (bdc <xQueueGenericReceive+0x174>)
     b2a:	4798      	blx	r3
		prvLockQueue( pxQueue );
     b2c:	4b24      	ldr	r3, [pc, #144]	; (bc0 <xQueueGenericReceive+0x158>)
     b2e:	4798      	blx	r3
     b30:	6c63      	ldr	r3, [r4, #68]	; 0x44
     b32:	3301      	adds	r3, #1
     b34:	d101      	bne.n	b3a <xQueueGenericReceive+0xd2>
     b36:	2300      	movs	r3, #0
     b38:	6463      	str	r3, [r4, #68]	; 0x44
     b3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     b3c:	3301      	adds	r3, #1
     b3e:	d101      	bne.n	b44 <xQueueGenericReceive+0xdc>
     b40:	2300      	movs	r3, #0
     b42:	64a3      	str	r3, [r4, #72]	; 0x48
     b44:	4b23      	ldr	r3, [pc, #140]	; (bd4 <xQueueGenericReceive+0x16c>)
     b46:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     b48:	a802      	add	r0, sp, #8
     b4a:	a901      	add	r1, sp, #4
     b4c:	4b24      	ldr	r3, [pc, #144]	; (be0 <xQueueGenericReceive+0x178>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d127      	bne.n	ba4 <xQueueGenericReceive+0x13c>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     b54:	4b1a      	ldr	r3, [pc, #104]	; (bc0 <xQueueGenericReceive+0x158>)
     b56:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     b5a:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     b5c:	4b1d      	ldr	r3, [pc, #116]	; (bd4 <xQueueGenericReceive+0x16c>)
     b5e:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     b60:	464b      	mov	r3, r9
     b62:	2b00      	cmp	r3, #0
     b64:	d118      	bne.n	b98 <xQueueGenericReceive+0x130>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     b66:	6823      	ldr	r3, [r4, #0]
     b68:	2b00      	cmp	r3, #0
     b6a:	d106      	bne.n	b7a <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
     b6c:	4b14      	ldr	r3, [pc, #80]	; (bc0 <xQueueGenericReceive+0x158>)
     b6e:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     b70:	6860      	ldr	r0, [r4, #4]
     b72:	4b1c      	ldr	r3, [pc, #112]	; (be4 <xQueueGenericReceive+0x17c>)
     b74:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
     b76:	4b17      	ldr	r3, [pc, #92]	; (bd4 <xQueueGenericReceive+0x16c>)
     b78:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     b7a:	1c20      	adds	r0, r4, #0
     b7c:	3024      	adds	r0, #36	; 0x24
     b7e:	9901      	ldr	r1, [sp, #4]
     b80:	4b19      	ldr	r3, [pc, #100]	; (be8 <xQueueGenericReceive+0x180>)
     b82:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     b84:	1c20      	adds	r0, r4, #0
     b86:	4b19      	ldr	r3, [pc, #100]	; (bec <xQueueGenericReceive+0x184>)
     b88:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     b8a:	4b19      	ldr	r3, [pc, #100]	; (bf0 <xQueueGenericReceive+0x188>)
     b8c:	4798      	blx	r3
     b8e:	2800      	cmp	r0, #0
     b90:	d18b      	bne.n	aaa <xQueueGenericReceive+0x42>
				{
					portYIELD_WITHIN_API();
     b92:	4b0f      	ldr	r3, [pc, #60]	; (bd0 <xQueueGenericReceive+0x168>)
     b94:	4798      	blx	r3
     b96:	e788      	b.n	aaa <xQueueGenericReceive+0x42>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     b98:	1c20      	adds	r0, r4, #0
     b9a:	4b14      	ldr	r3, [pc, #80]	; (bec <xQueueGenericReceive+0x184>)
     b9c:	4798      	blx	r3
				( void ) xTaskResumeAll();
     b9e:	4b14      	ldr	r3, [pc, #80]	; (bf0 <xQueueGenericReceive+0x188>)
     ba0:	4798      	blx	r3
     ba2:	e782      	b.n	aaa <xQueueGenericReceive+0x42>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     ba4:	1c20      	adds	r0, r4, #0
     ba6:	4b11      	ldr	r3, [pc, #68]	; (bec <xQueueGenericReceive+0x184>)
     ba8:	4798      	blx	r3
			( void ) xTaskResumeAll();
     baa:	4b11      	ldr	r3, [pc, #68]	; (bf0 <xQueueGenericReceive+0x188>)
     bac:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     bae:	2000      	movs	r0, #0
		}
	}
}
     bb0:	b005      	add	sp, #20
     bb2:	bc0c      	pop	{r2, r3}
     bb4:	4690      	mov	r8, r2
     bb6:	4699      	mov	r9, r3
     bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	00001419 	.word	0x00001419
     bc0:	0000038d 	.word	0x0000038d
     bc4:	00000689 	.word	0x00000689
     bc8:	0000140d 	.word	0x0000140d
     bcc:	000012f5 	.word	0x000012f5
     bd0:	00000375 	.word	0x00000375
     bd4:	000003a5 	.word	0x000003a5
     bd8:	00001371 	.word	0x00001371
     bdc:	00000ee5 	.word	0x00000ee5
     be0:	00001391 	.word	0x00001391
     be4:	00001435 	.word	0x00001435
     be8:	0000126d 	.word	0x0000126d
     bec:	000006b1 	.word	0x000006b1
     bf0:	00001025 	.word	0x00001025

00000bf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
     bf4:	b538      	push	{r3, r4, r5, lr}
     bf6:	1c04      	adds	r4, r0, #0
     bf8:	1c0d      	adds	r5, r1, #0
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
     bfa:	4b0d      	ldr	r3, [pc, #52]	; (c30 <vQueueWaitForMessageRestricted+0x3c>)
     bfc:	4798      	blx	r3
     bfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
     c00:	3301      	adds	r3, #1
     c02:	d101      	bne.n	c08 <vQueueWaitForMessageRestricted+0x14>
     c04:	2300      	movs	r3, #0
     c06:	6463      	str	r3, [r4, #68]	; 0x44
     c08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     c0a:	3301      	adds	r3, #1
     c0c:	d101      	bne.n	c12 <vQueueWaitForMessageRestricted+0x1e>
     c0e:	2300      	movs	r3, #0
     c10:	64a3      	str	r3, [r4, #72]	; 0x48
     c12:	4b08      	ldr	r3, [pc, #32]	; (c34 <vQueueWaitForMessageRestricted+0x40>)
     c14:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     c18:	2b00      	cmp	r3, #0
     c1a:	d104      	bne.n	c26 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c1c:	1c20      	adds	r0, r4, #0
     c1e:	3024      	adds	r0, #36	; 0x24
     c20:	1c29      	adds	r1, r5, #0
     c22:	4b05      	ldr	r3, [pc, #20]	; (c38 <vQueueWaitForMessageRestricted+0x44>)
     c24:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
     c26:	1c20      	adds	r0, r4, #0
     c28:	4b04      	ldr	r3, [pc, #16]	; (c3c <vQueueWaitForMessageRestricted+0x48>)
     c2a:	4798      	blx	r3
	}
     c2c:	bd38      	pop	{r3, r4, r5, pc}
     c2e:	46c0      	nop			; (mov r8, r8)
     c30:	0000038d 	.word	0x0000038d
     c34:	000003a5 	.word	0x000003a5
     c38:	000012bd 	.word	0x000012bd
     c3c:	000006b1 	.word	0x000006b1

00000c40 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     c40:	4b08      	ldr	r3, [pc, #32]	; (c64 <prvResetNextTaskUnblockTime+0x24>)
     c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	2b00      	cmp	r3, #0
     c48:	d104      	bne.n	c54 <prvResetNextTaskUnblockTime+0x14>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     c4a:	2201      	movs	r2, #1
     c4c:	4252      	negs	r2, r2
     c4e:	4b06      	ldr	r3, [pc, #24]	; (c68 <prvResetNextTaskUnblockTime+0x28>)
     c50:	601a      	str	r2, [r3, #0]
     c52:	e006      	b.n	c62 <prvResetNextTaskUnblockTime+0x22>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     c54:	4b03      	ldr	r3, [pc, #12]	; (c64 <prvResetNextTaskUnblockTime+0x24>)
     c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c58:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
     c5a:	68db      	ldr	r3, [r3, #12]
     c5c:	685a      	ldr	r2, [r3, #4]
     c5e:	4b02      	ldr	r3, [pc, #8]	; (c68 <prvResetNextTaskUnblockTime+0x28>)
     c60:	601a      	str	r2, [r3, #0]
	}
}
     c62:	4770      	bx	lr
     c64:	20001484 	.word	0x20001484
     c68:	20000008 	.word	0x20000008

00000c6c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
     c6c:	b510      	push	{r4, lr}
     c6e:	1c04      	adds	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     c70:	4b0c      	ldr	r3, [pc, #48]	; (ca4 <prvAddCurrentTaskToDelayedList+0x38>)
     c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c74:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
     c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     c78:	4298      	cmp	r0, r3
     c7a:	d206      	bcs.n	c8a <prvAddCurrentTaskToDelayedList+0x1e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
     c7c:	4b09      	ldr	r3, [pc, #36]	; (ca4 <prvAddCurrentTaskToDelayedList+0x38>)
     c7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
     c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     c82:	3104      	adds	r1, #4
     c84:	4b08      	ldr	r3, [pc, #32]	; (ca8 <prvAddCurrentTaskToDelayedList+0x3c>)
     c86:	4798      	blx	r3
     c88:	e00b      	b.n	ca2 <prvAddCurrentTaskToDelayedList+0x36>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
     c8a:	4b06      	ldr	r3, [pc, #24]	; (ca4 <prvAddCurrentTaskToDelayedList+0x38>)
     c8c:	6a98      	ldr	r0, [r3, #40]	; 0x28
     c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     c90:	3104      	adds	r1, #4
     c92:	4b05      	ldr	r3, [pc, #20]	; (ca8 <prvAddCurrentTaskToDelayedList+0x3c>)
     c94:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
     c96:	4b05      	ldr	r3, [pc, #20]	; (cac <prvAddCurrentTaskToDelayedList+0x40>)
     c98:	681b      	ldr	r3, [r3, #0]
     c9a:	429c      	cmp	r4, r3
     c9c:	d201      	bcs.n	ca2 <prvAddCurrentTaskToDelayedList+0x36>
		{
			xNextTaskUnblockTime = xTimeToWake;
     c9e:	4b03      	ldr	r3, [pc, #12]	; (cac <prvAddCurrentTaskToDelayedList+0x40>)
     ca0:	601c      	str	r4, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     ca2:	bd10      	pop	{r4, pc}
     ca4:	20001484 	.word	0x20001484
     ca8:	000002c9 	.word	0x000002c9
     cac:	20000008 	.word	0x20000008

00000cb0 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
     cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cb2:	465f      	mov	r7, fp
     cb4:	4656      	mov	r6, sl
     cb6:	464d      	mov	r5, r9
     cb8:	4644      	mov	r4, r8
     cba:	b4f0      	push	{r4, r5, r6, r7}
     cbc:	1c07      	adds	r7, r0, #0
     cbe:	1c0e      	adds	r6, r1, #0
     cc0:	4691      	mov	r9, r2
     cc2:	469a      	mov	sl, r3
     cc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
     cc6:	2800      	cmp	r0, #0
     cc8:	d101      	bne.n	cce <xTaskGenericCreate+0x1e>
     cca:	b672      	cpsid	i
     ccc:	e7fe      	b.n	ccc <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
     cce:	2d04      	cmp	r5, #4
     cd0:	d901      	bls.n	cd6 <xTaskGenericCreate+0x26>
     cd2:	b672      	cpsid	i
     cd4:	e7fe      	b.n	cd4 <xTaskGenericCreate+0x24>
{
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
     cd6:	2040      	movs	r0, #64	; 0x40
     cd8:	4b5e      	ldr	r3, [pc, #376]	; (e54 <xTaskGenericCreate+0x1a4>)
     cda:	4798      	blx	r3
     cdc:	1e04      	subs	r4, r0, #0

	if( pxNewTCB != NULL )
     cde:	d100      	bne.n	ce2 <xTaskGenericCreate+0x32>
     ce0:	e0b0      	b.n	e44 <xTaskGenericCreate+0x194>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     ce4:	2a00      	cmp	r2, #0
     ce6:	d000      	beq.n	cea <xTaskGenericCreate+0x3a>
     ce8:	e098      	b.n	e1c <xTaskGenericCreate+0x16c>
     cea:	464b      	mov	r3, r9
     cec:	0098      	lsls	r0, r3, #2
     cee:	4b59      	ldr	r3, [pc, #356]	; (e54 <xTaskGenericCreate+0x1a4>)
     cf0:	4798      	blx	r3
     cf2:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
     cf4:	2800      	cmp	r0, #0
     cf6:	d000      	beq.n	cfa <xTaskGenericCreate+0x4a>
     cf8:	e092      	b.n	e20 <xTaskGenericCreate+0x170>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
     cfa:	1c20      	adds	r0, r4, #0
     cfc:	4b56      	ldr	r3, [pc, #344]	; (e58 <xTaskGenericCreate+0x1a8>)
     cfe:	4798      	blx	r3
     d00:	e0a0      	b.n	e44 <xTaskGenericCreate+0x194>
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
     d02:	5cf1      	ldrb	r1, [r6, r3]
     d04:	18e2      	adds	r2, r4, r3
     d06:	3234      	adds	r2, #52	; 0x34
     d08:	7011      	strb	r1, [r2, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
     d0a:	5cf2      	ldrb	r2, [r6, r3]
     d0c:	2a00      	cmp	r2, #0
     d0e:	d002      	beq.n	d16 <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     d10:	3301      	adds	r3, #1
     d12:	2b08      	cmp	r3, #8
     d14:	d1f5      	bne.n	d02 <xTaskGenericCreate+0x52>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     d16:	2200      	movs	r2, #0
     d18:	233b      	movs	r3, #59	; 0x3b
     d1a:	54e2      	strb	r2, [r4, r3]
     d1c:	1e2e      	subs	r6, r5, #0
     d1e:	2e04      	cmp	r6, #4
     d20:	d900      	bls.n	d24 <xTaskGenericCreate+0x74>
     d22:	2604      	movs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
     d24:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
     d26:	63e6      	str	r6, [r4, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     d28:	1d22      	adds	r2, r4, #4
     d2a:	4690      	mov	r8, r2
     d2c:	1c10      	adds	r0, r2, #0
     d2e:	4b4b      	ldr	r3, [pc, #300]	; (e5c <xTaskGenericCreate+0x1ac>)
     d30:	4699      	mov	r9, r3
     d32:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     d34:	1c20      	adds	r0, r4, #0
     d36:	3018      	adds	r0, #24
     d38:	47c8      	blx	r9

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     d3a:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     d3c:	2305      	movs	r3, #5
     d3e:	1b9e      	subs	r6, r3, r6
     d40:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     d42:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     d44:	4658      	mov	r0, fp
     d46:	1c39      	adds	r1, r7, #0
     d48:	4652      	mov	r2, sl
     d4a:	4b45      	ldr	r3, [pc, #276]	; (e60 <xTaskGenericCreate+0x1b0>)
     d4c:	4798      	blx	r3
     d4e:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
     d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     d52:	2a00      	cmp	r2, #0
     d54:	d000      	beq.n	d58 <xTaskGenericCreate+0xa8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     d56:	6014      	str	r4, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
     d58:	4b42      	ldr	r3, [pc, #264]	; (e64 <xTaskGenericCreate+0x1b4>)
     d5a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
     d5c:	4b42      	ldr	r3, [pc, #264]	; (e68 <xTaskGenericCreate+0x1b8>)
     d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     d60:	3201      	adds	r2, #1
     d62:	639a      	str	r2, [r3, #56]	; 0x38
			if( pxCurrentTCB == NULL )
     d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     d66:	2b00      	cmp	r3, #0
     d68:	d12a      	bne.n	dc0 <xTaskGenericCreate+0x110>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     d6a:	4b3f      	ldr	r3, [pc, #252]	; (e68 <xTaskGenericCreate+0x1b8>)
     d6c:	62dc      	str	r4, [r3, #44]	; 0x2c

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     d70:	2b01      	cmp	r3, #1
     d72:	d130      	bne.n	dd6 <xTaskGenericCreate+0x126>
     d74:	4b3c      	ldr	r3, [pc, #240]	; (e68 <xTaskGenericCreate+0x1b8>)
     d76:	1c1e      	adds	r6, r3, #0
     d78:	363c      	adds	r6, #60	; 0x3c
     d7a:	33a0      	adds	r3, #160	; 0xa0
     d7c:	4699      	mov	r9, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
     d7e:	4f3b      	ldr	r7, [pc, #236]	; (e6c <xTaskGenericCreate+0x1bc>)
     d80:	1c30      	adds	r0, r6, #0
     d82:	47b8      	blx	r7
     d84:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
     d86:	454e      	cmp	r6, r9
     d88:	d1fa      	bne.n	d80 <xTaskGenericCreate+0xd0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
     d8a:	4b39      	ldr	r3, [pc, #228]	; (e70 <xTaskGenericCreate+0x1c0>)
     d8c:	4699      	mov	r9, r3
     d8e:	2220      	movs	r2, #32
     d90:	4693      	mov	fp, r2
     d92:	44cb      	add	fp, r9
     d94:	4658      	mov	r0, fp
     d96:	4e35      	ldr	r6, [pc, #212]	; (e6c <xTaskGenericCreate+0x1bc>)
     d98:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
     d9a:	2334      	movs	r3, #52	; 0x34
     d9c:	469a      	mov	sl, r3
     d9e:	44ca      	add	sl, r9
     da0:	4650      	mov	r0, sl
     da2:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
     da4:	4f30      	ldr	r7, [pc, #192]	; (e68 <xTaskGenericCreate+0x1b8>)
     da6:	1c38      	adds	r0, r7, #0
     da8:	3014      	adds	r0, #20
     daa:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
     dac:	4648      	mov	r0, r9
     dae:	3048      	adds	r0, #72	; 0x48
     db0:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
     db2:	1c38      	adds	r0, r7, #0
     db4:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     db6:	465a      	mov	r2, fp
     db8:	62ba      	str	r2, [r7, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     dba:	4653      	mov	r3, sl
     dbc:	637b      	str	r3, [r7, #52]	; 0x34
     dbe:	e00a      	b.n	dd6 <xTaskGenericCreate+0x126>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     dc0:	4b2b      	ldr	r3, [pc, #172]	; (e70 <xTaskGenericCreate+0x1c0>)
     dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     dc4:	2b00      	cmp	r3, #0
     dc6:	d106      	bne.n	dd6 <xTaskGenericCreate+0x126>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     dc8:	4b27      	ldr	r3, [pc, #156]	; (e68 <xTaskGenericCreate+0x1b8>)
     dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     dce:	429d      	cmp	r5, r3
     dd0:	d301      	bcc.n	dd6 <xTaskGenericCreate+0x126>
					{
						pxCurrentTCB = pxNewTCB;
     dd2:	4b25      	ldr	r3, [pc, #148]	; (e68 <xTaskGenericCreate+0x1b8>)
     dd4:	62dc      	str	r4, [r3, #44]	; 0x2c
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
     dd6:	4a26      	ldr	r2, [pc, #152]	; (e70 <xTaskGenericCreate+0x1c0>)
     dd8:	6e13      	ldr	r3, [r2, #96]	; 0x60
     dda:	3301      	adds	r3, #1
     ddc:	6613      	str	r3, [r2, #96]	; 0x60
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
     dde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     de0:	6e52      	ldr	r2, [r2, #100]	; 0x64
     de2:	4293      	cmp	r3, r2
     de4:	d901      	bls.n	dea <xTaskGenericCreate+0x13a>
     de6:	4a22      	ldr	r2, [pc, #136]	; (e70 <xTaskGenericCreate+0x1c0>)
     de8:	6653      	str	r3, [r2, #100]	; 0x64
     dea:	009a      	lsls	r2, r3, #2
     dec:	18d3      	adds	r3, r2, r3
     dee:	009b      	lsls	r3, r3, #2
     df0:	481d      	ldr	r0, [pc, #116]	; (e68 <xTaskGenericCreate+0x1b8>)
     df2:	303c      	adds	r0, #60	; 0x3c
     df4:	18c0      	adds	r0, r0, r3
     df6:	4641      	mov	r1, r8
     df8:	4b1e      	ldr	r3, [pc, #120]	; (e74 <xTaskGenericCreate+0x1c4>)
     dfa:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     dfc:	4b1e      	ldr	r3, [pc, #120]	; (e78 <xTaskGenericCreate+0x1c8>)
     dfe:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
     e00:	4b1b      	ldr	r3, [pc, #108]	; (e70 <xTaskGenericCreate+0x1c0>)
     e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
     e04:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
     e06:	2b00      	cmp	r3, #0
     e08:	d01e      	beq.n	e48 <xTaskGenericCreate+0x198>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     e0a:	4b17      	ldr	r3, [pc, #92]	; (e68 <xTaskGenericCreate+0x1b8>)
     e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     e10:	429d      	cmp	r5, r3
     e12:	d919      	bls.n	e48 <xTaskGenericCreate+0x198>
			{
				taskYIELD_IF_USING_PREEMPTION();
     e14:	4b19      	ldr	r3, [pc, #100]	; (e7c <xTaskGenericCreate+0x1cc>)
     e16:	4798      	blx	r3
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
     e18:	2001      	movs	r0, #1
     e1a:	e015      	b.n	e48 <xTaskGenericCreate+0x198>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     e1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     e1e:	6302      	str	r2, [r0, #48]	; 0x30
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
     e20:	4a17      	ldr	r2, [pc, #92]	; (e80 <xTaskGenericCreate+0x1d0>)
     e22:	1c13      	adds	r3, r2, #0
     e24:	444b      	add	r3, r9
     e26:	009b      	lsls	r3, r3, #2
     e28:	6b22      	ldr	r2, [r4, #48]	; 0x30
     e2a:	18d3      	adds	r3, r2, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
     e2c:	2207      	movs	r2, #7
     e2e:	4393      	bics	r3, r2
     e30:	469b      	mov	fp, r3
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
     e32:	7832      	ldrb	r2, [r6, #0]
     e34:	2334      	movs	r3, #52	; 0x34
     e36:	54e2      	strb	r2, [r4, r3]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
     e38:	7833      	ldrb	r3, [r6, #0]
     e3a:	2b00      	cmp	r3, #0
     e3c:	d100      	bne.n	e40 <xTaskGenericCreate+0x190>
     e3e:	e76a      	b.n	d16 <xTaskGenericCreate+0x66>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     e40:	2301      	movs	r3, #1
     e42:	e75e      	b.n	d02 <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     e44:	2001      	movs	r0, #1
     e46:	4240      	negs	r0, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
     e48:	bc3c      	pop	{r2, r3, r4, r5}
     e4a:	4690      	mov	r8, r2
     e4c:	4699      	mov	r9, r3
     e4e:	46a2      	mov	sl, r4
     e50:	46ab      	mov	fp, r5
     e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e54:	000004b1 	.word	0x000004b1
     e58:	0000057d 	.word	0x0000057d
     e5c:	000002a9 	.word	0x000002a9
     e60:	00000351 	.word	0x00000351
     e64:	0000038d 	.word	0x0000038d
     e68:	20001484 	.word	0x20001484
     e6c:	00000291 	.word	0x00000291
     e70:	20001504 	.word	0x20001504
     e74:	000002b1 	.word	0x000002b1
     e78:	000003a5 	.word	0x000003a5
     e7c:	00000375 	.word	0x00000375
     e80:	3fffffff 	.word	0x3fffffff

00000e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     e84:	b510      	push	{r4, lr}
     e86:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
     e88:	2300      	movs	r3, #0
     e8a:	9300      	str	r3, [sp, #0]
     e8c:	9301      	str	r3, [sp, #4]
     e8e:	9302      	str	r3, [sp, #8]
     e90:	9303      	str	r3, [sp, #12]
     e92:	480d      	ldr	r0, [pc, #52]	; (ec8 <vTaskStartScheduler+0x44>)
     e94:	490d      	ldr	r1, [pc, #52]	; (ecc <vTaskStartScheduler+0x48>)
     e96:	228c      	movs	r2, #140	; 0x8c
     e98:	4c0d      	ldr	r4, [pc, #52]	; (ed0 <vTaskStartScheduler+0x4c>)
     e9a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
     e9c:	2801      	cmp	r0, #1
     e9e:	d10d      	bne.n	ebc <vTaskStartScheduler+0x38>
		{
			xReturn = xTimerCreateTimerTask();
     ea0:	4b0c      	ldr	r3, [pc, #48]	; (ed4 <vTaskStartScheduler+0x50>)
     ea2:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     ea4:	2801      	cmp	r0, #1
     ea6:	d109      	bne.n	ebc <vTaskStartScheduler+0x38>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
     ea8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
     eaa:	2201      	movs	r2, #1
     eac:	4b0a      	ldr	r3, [pc, #40]	; (ed8 <vTaskStartScheduler+0x54>)
     eae:	65da      	str	r2, [r3, #92]	; 0x5c
		xTickCount = ( TickType_t ) 0U;
     eb0:	2200      	movs	r2, #0
     eb2:	4b0a      	ldr	r3, [pc, #40]	; (edc <vTaskStartScheduler+0x58>)
     eb4:	631a      	str	r2, [r3, #48]	; 0x30
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     eb6:	4b0a      	ldr	r3, [pc, #40]	; (ee0 <vTaskStartScheduler+0x5c>)
     eb8:	4798      	blx	r3
     eba:	e003      	b.n	ec4 <vTaskStartScheduler+0x40>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
     ebc:	2800      	cmp	r0, #0
     ebe:	d101      	bne.n	ec4 <vTaskStartScheduler+0x40>
     ec0:	b672      	cpsid	i
     ec2:	e7fe      	b.n	ec2 <vTaskStartScheduler+0x3e>
	}
}
     ec4:	b004      	add	sp, #16
     ec6:	bd10      	pop	{r4, pc}
     ec8:	00001161 	.word	0x00001161
     ecc:	0000249c 	.word	0x0000249c
     ed0:	00000cb1 	.word	0x00000cb1
     ed4:	000015a9 	.word	0x000015a9
     ed8:	20001504 	.word	0x20001504
     edc:	20001484 	.word	0x20001484
     ee0:	00000471 	.word	0x00000471

00000ee4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     ee4:	4b02      	ldr	r3, [pc, #8]	; (ef0 <vTaskSuspendAll+0xc>)
     ee6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
     ee8:	3201      	adds	r2, #1
     eea:	66da      	str	r2, [r3, #108]	; 0x6c
}
     eec:	4770      	bx	lr
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	20001504 	.word	0x20001504

00000ef4 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
     ef4:	b510      	push	{r4, lr}
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     ef6:	4b04      	ldr	r3, [pc, #16]	; (f08 <xTaskGetTickCount+0x14>)
     ef8:	4798      	blx	r3
	{
		xTicks = xTickCount;
     efa:	4b04      	ldr	r3, [pc, #16]	; (f0c <xTaskGetTickCount+0x18>)
     efc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
	}
	taskEXIT_CRITICAL();
     efe:	4b04      	ldr	r3, [pc, #16]	; (f10 <xTaskGetTickCount+0x1c>)
     f00:	4798      	blx	r3

	return xTicks;
}
     f02:	1c20      	adds	r0, r4, #0
     f04:	bd10      	pop	{r4, pc}
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	0000038d 	.word	0x0000038d
     f0c:	20001484 	.word	0x20001484
     f10:	000003a5 	.word	0x000003a5

00000f14 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f16:	4657      	mov	r7, sl
     f18:	464e      	mov	r6, r9
     f1a:	b4c0      	push	{r6, r7}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     f1c:	4b3b      	ldr	r3, [pc, #236]	; (100c <xTaskIncrementTick+0xf8>)
     f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     f20:	2b00      	cmp	r3, #0
     f22:	d162      	bne.n	fea <xTaskIncrementTick+0xd6>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
     f24:	4b3a      	ldr	r3, [pc, #232]	; (1010 <xTaskIncrementTick+0xfc>)
     f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     f28:	3201      	adds	r2, #1
     f2a:	631a      	str	r2, [r3, #48]	; 0x30

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
     f2c:	6b1f      	ldr	r7, [r3, #48]	; 0x30

			if( xConstTickCount == ( TickType_t ) 0U )
     f2e:	2f00      	cmp	r7, #0
     f30:	d110      	bne.n	f54 <xTaskIncrementTick+0x40>
			{
				taskSWITCH_DELAYED_LISTS();
     f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	2b00      	cmp	r3, #0
     f38:	d001      	beq.n	f3e <xTaskIncrementTick+0x2a>
     f3a:	b672      	cpsid	i
     f3c:	e7fe      	b.n	f3c <xTaskIncrementTick+0x28>
     f3e:	4b34      	ldr	r3, [pc, #208]	; (1010 <xTaskIncrementTick+0xfc>)
     f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     f42:	6b59      	ldr	r1, [r3, #52]	; 0x34
     f44:	6299      	str	r1, [r3, #40]	; 0x28
     f46:	635a      	str	r2, [r3, #52]	; 0x34
     f48:	4b30      	ldr	r3, [pc, #192]	; (100c <xTaskIncrementTick+0xf8>)
     f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     f4c:	3201      	adds	r2, #1
     f4e:	671a      	str	r2, [r3, #112]	; 0x70
     f50:	4b30      	ldr	r3, [pc, #192]	; (1014 <xTaskIncrementTick+0x100>)
     f52:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
     f54:	4b30      	ldr	r3, [pc, #192]	; (1018 <xTaskIncrementTick+0x104>)
     f56:	681b      	ldr	r3, [r3, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     f58:	2400      	movs	r4, #0

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
     f5a:	429f      	cmp	r7, r3
     f5c:	d33a      	bcc.n	fd4 <xTaskIncrementTick+0xc0>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     f5e:	4a2c      	ldr	r2, [pc, #176]	; (1010 <xTaskIncrementTick+0xfc>)
     f60:	4692      	mov	sl, r2
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
     f62:	4691      	mov	r9, r2
     f64:	233c      	movs	r3, #60	; 0x3c
     f66:	4499      	add	r9, r3
     f68:	e000      	b.n	f6c <xTaskIncrementTick+0x58>
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
							{
								xSwitchRequired = pdTRUE;
     f6a:	2401      	movs	r4, #1
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     f6c:	4652      	mov	r2, sl
     f6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	d104      	bne.n	f80 <xTaskIncrementTick+0x6c>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
     f76:	2201      	movs	r2, #1
     f78:	4252      	negs	r2, r2
     f7a:	4b27      	ldr	r3, [pc, #156]	; (1018 <xTaskIncrementTick+0x104>)
     f7c:	601a      	str	r2, [r3, #0]
						break;
     f7e:	e029      	b.n	fd4 <xTaskIncrementTick+0xc0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     f80:	4b23      	ldr	r3, [pc, #140]	; (1010 <xTaskIncrementTick+0xfc>)
     f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f84:	68db      	ldr	r3, [r3, #12]
     f86:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     f88:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
     f8a:	429f      	cmp	r7, r3
     f8c:	d202      	bcs.n	f94 <xTaskIncrementTick+0x80>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
     f8e:	4a22      	ldr	r2, [pc, #136]	; (1018 <xTaskIncrementTick+0x104>)
     f90:	6013      	str	r3, [r2, #0]
							break;
     f92:	e01f      	b.n	fd4 <xTaskIncrementTick+0xc0>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
     f94:	1d2e      	adds	r6, r5, #4
     f96:	1c30      	adds	r0, r6, #0
     f98:	4b20      	ldr	r3, [pc, #128]	; (101c <xTaskIncrementTick+0x108>)
     f9a:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     f9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     f9e:	2b00      	cmp	r3, #0
     fa0:	d003      	beq.n	faa <xTaskIncrementTick+0x96>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     fa2:	1c28      	adds	r0, r5, #0
     fa4:	3018      	adds	r0, #24
     fa6:	4b1d      	ldr	r3, [pc, #116]	; (101c <xTaskIncrementTick+0x108>)
     fa8:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
     faa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     fac:	4a17      	ldr	r2, [pc, #92]	; (100c <xTaskIncrementTick+0xf8>)
     fae:	6e52      	ldr	r2, [r2, #100]	; 0x64
     fb0:	4293      	cmp	r3, r2
     fb2:	d901      	bls.n	fb8 <xTaskIncrementTick+0xa4>
     fb4:	4a15      	ldr	r2, [pc, #84]	; (100c <xTaskIncrementTick+0xf8>)
     fb6:	6653      	str	r3, [r2, #100]	; 0x64
     fb8:	0098      	lsls	r0, r3, #2
     fba:	18c0      	adds	r0, r0, r3
     fbc:	0080      	lsls	r0, r0, #2
     fbe:	4448      	add	r0, r9
     fc0:	1c31      	adds	r1, r6, #0
     fc2:	4b17      	ldr	r3, [pc, #92]	; (1020 <xTaskIncrementTick+0x10c>)
     fc4:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     fc6:	4a12      	ldr	r2, [pc, #72]	; (1010 <xTaskIncrementTick+0xfc>)
     fc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     fca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     fce:	429a      	cmp	r2, r3
     fd0:	d2cb      	bcs.n	f6a <xTaskIncrementTick+0x56>
     fd2:	e7cb      	b.n	f6c <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     fd4:	4b0e      	ldr	r3, [pc, #56]	; (1010 <xTaskIncrementTick+0xfc>)
     fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     fda:	0091      	lsls	r1, r2, #2
     fdc:	188a      	adds	r2, r1, r2
     fde:	0092      	lsls	r2, r2, #2
     fe0:	189b      	adds	r3, r3, r2
     fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     fe4:	2b01      	cmp	r3, #1
     fe6:	d806      	bhi.n	ff6 <xTaskIncrementTick+0xe2>
     fe8:	e006      	b.n	ff8 <xTaskIncrementTick+0xe4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     fea:	4b08      	ldr	r3, [pc, #32]	; (100c <xTaskIncrementTick+0xf8>)
     fec:	6f5a      	ldr	r2, [r3, #116]	; 0x74
     fee:	3201      	adds	r2, #1
     ff0:	675a      	str	r2, [r3, #116]	; 0x74

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
     ff2:	2400      	movs	r4, #0
     ff4:	e000      	b.n	ff8 <xTaskIncrementTick+0xe4>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
     ff6:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     ff8:	4b04      	ldr	r3, [pc, #16]	; (100c <xTaskIncrementTick+0xf8>)
     ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
     ffc:	2b00      	cmp	r3, #0
     ffe:	d000      	beq.n	1002 <xTaskIncrementTick+0xee>
		{
			xSwitchRequired = pdTRUE;
    1000:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1002:	1c20      	adds	r0, r4, #0
    1004:	bc0c      	pop	{r2, r3}
    1006:	4691      	mov	r9, r2
    1008:	469a      	mov	sl, r3
    100a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    100c:	20001504 	.word	0x20001504
    1010:	20001484 	.word	0x20001484
    1014:	00000c41 	.word	0x00000c41
    1018:	20000008 	.word	0x20000008
    101c:	000002f9 	.word	0x000002f9
    1020:	000002b1 	.word	0x000002b1

00001024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1024:	b5f0      	push	{r4, r5, r6, r7, lr}
    1026:	4647      	mov	r7, r8
    1028:	b480      	push	{r7}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    102a:	4b30      	ldr	r3, [pc, #192]	; (10ec <xTaskResumeAll+0xc8>)
    102c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    102e:	2b00      	cmp	r3, #0
    1030:	d101      	bne.n	1036 <xTaskResumeAll+0x12>
    1032:	b672      	cpsid	i
    1034:	e7fe      	b.n	1034 <xTaskResumeAll+0x10>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1036:	4b2e      	ldr	r3, [pc, #184]	; (10f0 <xTaskResumeAll+0xcc>)
    1038:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    103a:	4b2c      	ldr	r3, [pc, #176]	; (10ec <xTaskResumeAll+0xc8>)
    103c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    103e:	3a01      	subs	r2, #1
    1040:	66da      	str	r2, [r3, #108]	; 0x6c

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    1044:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1046:	2b00      	cmp	r3, #0
    1048:	d14a      	bne.n	10e0 <xTaskResumeAll+0xbc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    104a:	4b2a      	ldr	r3, [pc, #168]	; (10f4 <xTaskResumeAll+0xd0>)
    104c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    104e:	2b00      	cmp	r3, #0
    1050:	d046      	beq.n	10e0 <xTaskResumeAll+0xbc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1052:	4d28      	ldr	r5, [pc, #160]	; (10f4 <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    1054:	46a8      	mov	r8, r5
    1056:	223c      	movs	r2, #60	; 0x3c
    1058:	4490      	add	r8, r2
    105a:	e020      	b.n	109e <xTaskResumeAll+0x7a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    105c:	4b25      	ldr	r3, [pc, #148]	; (10f4 <xTaskResumeAll+0xd0>)
    105e:	6a1b      	ldr	r3, [r3, #32]
    1060:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1062:	1c20      	adds	r0, r4, #0
    1064:	3018      	adds	r0, #24
    1066:	4f24      	ldr	r7, [pc, #144]	; (10f8 <xTaskResumeAll+0xd4>)
    1068:	47b8      	blx	r7
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    106a:	1d26      	adds	r6, r4, #4
    106c:	1c30      	adds	r0, r6, #0
    106e:	47b8      	blx	r7
					prvAddTaskToReadyList( pxTCB );
    1070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1072:	4a1e      	ldr	r2, [pc, #120]	; (10ec <xTaskResumeAll+0xc8>)
    1074:	6e52      	ldr	r2, [r2, #100]	; 0x64
    1076:	4293      	cmp	r3, r2
    1078:	d901      	bls.n	107e <xTaskResumeAll+0x5a>
    107a:	4a1c      	ldr	r2, [pc, #112]	; (10ec <xTaskResumeAll+0xc8>)
    107c:	6653      	str	r3, [r2, #100]	; 0x64
    107e:	0098      	lsls	r0, r3, #2
    1080:	18c0      	adds	r0, r0, r3
    1082:	0080      	lsls	r0, r0, #2
    1084:	4440      	add	r0, r8
    1086:	1c31      	adds	r1, r6, #0
    1088:	4b1c      	ldr	r3, [pc, #112]	; (10fc <xTaskResumeAll+0xd8>)
    108a:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    108c:	4a19      	ldr	r2, [pc, #100]	; (10f4 <xTaskResumeAll+0xd0>)
    108e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1090:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1094:	429a      	cmp	r2, r3
    1096:	d302      	bcc.n	109e <xTaskResumeAll+0x7a>
					{
						xYieldPending = pdTRUE;
    1098:	2201      	movs	r2, #1
    109a:	4b14      	ldr	r3, [pc, #80]	; (10ec <xTaskResumeAll+0xc8>)
    109c:	679a      	str	r2, [r3, #120]	; 0x78
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    109e:	696b      	ldr	r3, [r5, #20]
    10a0:	2b00      	cmp	r3, #0
    10a2:	d1db      	bne.n	105c <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    10a4:	4b11      	ldr	r3, [pc, #68]	; (10ec <xTaskResumeAll+0xc8>)
    10a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    10a8:	2b00      	cmp	r3, #0
    10aa:	d011      	beq.n	10d0 <xTaskResumeAll+0xac>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    10ac:	4b0f      	ldr	r3, [pc, #60]	; (10ec <xTaskResumeAll+0xc8>)
    10ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    10b0:	2b00      	cmp	r3, #0
    10b2:	d00d      	beq.n	10d0 <xTaskResumeAll+0xac>
					{
						if( xTaskIncrementTick() != pdFALSE )
    10b4:	4e12      	ldr	r6, [pc, #72]	; (1100 <xTaskResumeAll+0xdc>)
						{
							xYieldPending = pdTRUE;
    10b6:	4d0d      	ldr	r5, [pc, #52]	; (10ec <xTaskResumeAll+0xc8>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    10b8:	1c2c      	adds	r4, r5, #0
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
    10ba:	47b0      	blx	r6
    10bc:	2800      	cmp	r0, #0
    10be:	d001      	beq.n	10c4 <xTaskResumeAll+0xa0>
						{
							xYieldPending = pdTRUE;
    10c0:	2301      	movs	r3, #1
    10c2:	67ab      	str	r3, [r5, #120]	; 0x78
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    10c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
    10c6:	3b01      	subs	r3, #1
    10c8:	6763      	str	r3, [r4, #116]	; 0x74
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    10ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
    10cc:	2b00      	cmp	r3, #0
    10ce:	d1f4      	bne.n	10ba <xTaskResumeAll+0x96>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    10d0:	4b06      	ldr	r3, [pc, #24]	; (10ec <xTaskResumeAll+0xc8>)
    10d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    10d4:	2400      	movs	r4, #0
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    10d6:	2b01      	cmp	r3, #1
    10d8:	d102      	bne.n	10e0 <xTaskResumeAll+0xbc>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    10da:	4b0a      	ldr	r3, [pc, #40]	; (1104 <xTaskResumeAll+0xe0>)
    10dc:	4798      	blx	r3

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    10de:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    10e0:	4b09      	ldr	r3, [pc, #36]	; (1108 <xTaskResumeAll+0xe4>)
    10e2:	4798      	blx	r3

	return xAlreadyYielded;
}
    10e4:	1c20      	adds	r0, r4, #0
    10e6:	bc04      	pop	{r2}
    10e8:	4690      	mov	r8, r2
    10ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ec:	20001504 	.word	0x20001504
    10f0:	0000038d 	.word	0x0000038d
    10f4:	20001484 	.word	0x20001484
    10f8:	000002f9 	.word	0x000002f9
    10fc:	000002b1 	.word	0x000002b1
    1100:	00000f15 	.word	0x00000f15
    1104:	00000375 	.word	0x00000375
    1108:	000003a5 	.word	0x000003a5

0000110c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    110c:	b510      	push	{r4, lr}
    110e:	1e04      	subs	r4, r0, #0
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1110:	d015      	beq.n	113e <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    1112:	4b0c      	ldr	r3, [pc, #48]	; (1144 <vTaskDelay+0x38>)
    1114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1116:	2b00      	cmp	r3, #0
    1118:	d001      	beq.n	111e <vTaskDelay+0x12>
    111a:	b672      	cpsid	i
    111c:	e7fe      	b.n	111c <vTaskDelay+0x10>
			vTaskSuspendAll();
    111e:	4b0a      	ldr	r3, [pc, #40]	; (1148 <vTaskDelay+0x3c>)
    1120:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1122:	4b0a      	ldr	r3, [pc, #40]	; (114c <vTaskDelay+0x40>)
    1124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1126:	18a4      	adds	r4, r4, r2

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1128:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    112a:	3004      	adds	r0, #4
    112c:	4b08      	ldr	r3, [pc, #32]	; (1150 <vTaskDelay+0x44>)
    112e:	4798      	blx	r3
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1130:	1c20      	adds	r0, r4, #0
    1132:	4b08      	ldr	r3, [pc, #32]	; (1154 <vTaskDelay+0x48>)
    1134:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    1136:	4b08      	ldr	r3, [pc, #32]	; (1158 <vTaskDelay+0x4c>)
    1138:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    113a:	2800      	cmp	r0, #0
    113c:	d101      	bne.n	1142 <vTaskDelay+0x36>
		{
			portYIELD_WITHIN_API();
    113e:	4b07      	ldr	r3, [pc, #28]	; (115c <vTaskDelay+0x50>)
    1140:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1142:	bd10      	pop	{r4, pc}
    1144:	20001504 	.word	0x20001504
    1148:	00000ee5 	.word	0x00000ee5
    114c:	20001484 	.word	0x20001484
    1150:	000002f9 	.word	0x000002f9
    1154:	00000c6d 	.word	0x00000c6d
    1158:	00001025 	.word	0x00001025
    115c:	00000375 	.word	0x00000375

00001160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    1162:	4e15      	ldr	r6, [pc, #84]	; (11b8 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    1164:	4f15      	ldr	r7, [pc, #84]	; (11bc <prvIdleTask+0x5c>)
    1166:	e01d      	b.n	11a4 <prvIdleTask+0x44>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    1168:	4b15      	ldr	r3, [pc, #84]	; (11c0 <prvIdleTask+0x60>)
    116a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    116c:	4b12      	ldr	r3, [pc, #72]	; (11b8 <prvIdleTask+0x58>)
    116e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
			}
			( void ) xTaskResumeAll();
    1170:	4b14      	ldr	r3, [pc, #80]	; (11c4 <prvIdleTask+0x64>)
    1172:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    1174:	2c00      	cmp	r4, #0
    1176:	d015      	beq.n	11a4 <prvIdleTask+0x44>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1178:	4b13      	ldr	r3, [pc, #76]	; (11c8 <prvIdleTask+0x68>)
    117a:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    117c:	4d0e      	ldr	r5, [pc, #56]	; (11b8 <prvIdleTask+0x58>)
    117e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    1180:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    1182:	1d20      	adds	r0, r4, #4
    1184:	4b11      	ldr	r3, [pc, #68]	; (11cc <prvIdleTask+0x6c>)
    1186:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    1188:	4b0c      	ldr	r3, [pc, #48]	; (11bc <prvIdleTask+0x5c>)
    118a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    118c:	3a01      	subs	r2, #1
    118e:	639a      	str	r2, [r3, #56]	; 0x38
					--uxTasksDeleted;
    1190:	6eab      	ldr	r3, [r5, #104]	; 0x68
    1192:	3b01      	subs	r3, #1
    1194:	66ab      	str	r3, [r5, #104]	; 0x68
				}
				taskEXIT_CRITICAL();
    1196:	4b0e      	ldr	r3, [pc, #56]	; (11d0 <prvIdleTask+0x70>)
    1198:	4798      	blx	r3
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    119a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    119c:	4d0d      	ldr	r5, [pc, #52]	; (11d4 <prvIdleTask+0x74>)
    119e:	47a8      	blx	r5
		vPortFree( pxTCB );
    11a0:	1c20      	adds	r0, r4, #0
    11a2:	47a8      	blx	r5
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    11a4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    11a6:	2b00      	cmp	r3, #0
    11a8:	d1de      	bne.n	1168 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    11aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11ac:	2b01      	cmp	r3, #1
    11ae:	d9f9      	bls.n	11a4 <prvIdleTask+0x44>
			{
				taskYIELD();
    11b0:	4b09      	ldr	r3, [pc, #36]	; (11d8 <prvIdleTask+0x78>)
    11b2:	4798      	blx	r3
    11b4:	e7f6      	b.n	11a4 <prvIdleTask+0x44>
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	20001504 	.word	0x20001504
    11bc:	20001484 	.word	0x20001484
    11c0:	00000ee5 	.word	0x00000ee5
    11c4:	00001025 	.word	0x00001025
    11c8:	0000038d 	.word	0x0000038d
    11cc:	000002f9 	.word	0x000002f9
    11d0:	000003a5 	.word	0x000003a5
    11d4:	0000057d 	.word	0x0000057d
    11d8:	00000375 	.word	0x00000375

000011dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    11dc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    11de:	4b21      	ldr	r3, [pc, #132]	; (1264 <vTaskSwitchContext+0x88>)
    11e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    11e2:	2b00      	cmp	r3, #0
    11e4:	d003      	beq.n	11ee <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    11e6:	2201      	movs	r2, #1
    11e8:	4b1e      	ldr	r3, [pc, #120]	; (1264 <vTaskSwitchContext+0x88>)
    11ea:	679a      	str	r2, [r3, #120]	; 0x78
    11ec:	e038      	b.n	1260 <vTaskSwitchContext+0x84>
	}
	else
	{
		xYieldPending = pdFALSE;
    11ee:	4b1d      	ldr	r3, [pc, #116]	; (1264 <vTaskSwitchContext+0x88>)
    11f0:	2200      	movs	r2, #0
    11f2:	679a      	str	r2, [r3, #120]	; 0x78
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    11f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    11f6:	009a      	lsls	r2, r3, #2
    11f8:	18d3      	adds	r3, r2, r3
    11fa:	009b      	lsls	r3, r3, #2
    11fc:	4a1a      	ldr	r2, [pc, #104]	; (1268 <vTaskSwitchContext+0x8c>)
    11fe:	18d3      	adds	r3, r2, r3
    1200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1202:	2b00      	cmp	r3, #0
    1204:	d117      	bne.n	1236 <vTaskSwitchContext+0x5a>
    1206:	4b17      	ldr	r3, [pc, #92]	; (1264 <vTaskSwitchContext+0x88>)
    1208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    120a:	2b00      	cmp	r3, #0
    120c:	d105      	bne.n	121a <vTaskSwitchContext+0x3e>
    120e:	e002      	b.n	1216 <vTaskSwitchContext+0x3a>
    1210:	6e42      	ldr	r2, [r0, #100]	; 0x64
    1212:	2a00      	cmp	r2, #0
    1214:	d104      	bne.n	1220 <vTaskSwitchContext+0x44>
    1216:	b672      	cpsid	i
    1218:	e7fe      	b.n	1218 <vTaskSwitchContext+0x3c>
    121a:	4b12      	ldr	r3, [pc, #72]	; (1264 <vTaskSwitchContext+0x88>)
    121c:	4c12      	ldr	r4, [pc, #72]	; (1268 <vTaskSwitchContext+0x8c>)
    121e:	1c18      	adds	r0, r3, #0
    1220:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    1222:	3a01      	subs	r2, #1
    1224:	665a      	str	r2, [r3, #100]	; 0x64
    1226:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    1228:	0091      	lsls	r1, r2, #2
    122a:	188a      	adds	r2, r1, r2
    122c:	0092      	lsls	r2, r2, #2
    122e:	18a2      	adds	r2, r4, r2
    1230:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    1232:	2a00      	cmp	r2, #0
    1234:	d0ec      	beq.n	1210 <vTaskSwitchContext+0x34>
    1236:	4b0b      	ldr	r3, [pc, #44]	; (1264 <vTaskSwitchContext+0x88>)
    1238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    123a:	009a      	lsls	r2, r3, #2
    123c:	18d3      	adds	r3, r2, r3
    123e:	009b      	lsls	r3, r3, #2
    1240:	4a09      	ldr	r2, [pc, #36]	; (1268 <vTaskSwitchContext+0x8c>)
    1242:	323c      	adds	r2, #60	; 0x3c
    1244:	18d3      	adds	r3, r2, r3
    1246:	685a      	ldr	r2, [r3, #4]
    1248:	6852      	ldr	r2, [r2, #4]
    124a:	605a      	str	r2, [r3, #4]
    124c:	1c19      	adds	r1, r3, #0
    124e:	3108      	adds	r1, #8
    1250:	428a      	cmp	r2, r1
    1252:	d101      	bne.n	1258 <vTaskSwitchContext+0x7c>
    1254:	6852      	ldr	r2, [r2, #4]
    1256:	605a      	str	r2, [r3, #4]
    1258:	685b      	ldr	r3, [r3, #4]
    125a:	68da      	ldr	r2, [r3, #12]
    125c:	4b02      	ldr	r3, [pc, #8]	; (1268 <vTaskSwitchContext+0x8c>)
    125e:	62da      	str	r2, [r3, #44]	; 0x2c
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1260:	bd10      	pop	{r4, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	20001504 	.word	0x20001504
    1268:	20001484 	.word	0x20001484

0000126c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    126c:	b538      	push	{r3, r4, r5, lr}
    126e:	1c0c      	adds	r4, r1, #0
TickType_t xTimeToWake;

	configASSERT( pxEventList );
    1270:	2800      	cmp	r0, #0
    1272:	d101      	bne.n	1278 <vTaskPlaceOnEventList+0xc>
    1274:	b672      	cpsid	i
    1276:	e7fe      	b.n	1276 <vTaskPlaceOnEventList+0xa>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1278:	4d0b      	ldr	r5, [pc, #44]	; (12a8 <vTaskPlaceOnEventList+0x3c>)
    127a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    127c:	3118      	adds	r1, #24
    127e:	4b0b      	ldr	r3, [pc, #44]	; (12ac <vTaskPlaceOnEventList+0x40>)
    1280:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1282:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    1284:	3004      	adds	r0, #4
    1286:	4b0a      	ldr	r3, [pc, #40]	; (12b0 <vTaskPlaceOnEventList+0x44>)
    1288:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    128a:	1c63      	adds	r3, r4, #1
    128c:	d105      	bne.n	129a <vTaskPlaceOnEventList+0x2e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    128e:	4806      	ldr	r0, [pc, #24]	; (12a8 <vTaskPlaceOnEventList+0x3c>)
    1290:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    1292:	3104      	adds	r1, #4
    1294:	4b07      	ldr	r3, [pc, #28]	; (12b4 <vTaskPlaceOnEventList+0x48>)
    1296:	4798      	blx	r3
    1298:	e004      	b.n	12a4 <vTaskPlaceOnEventList+0x38>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    129a:	4b03      	ldr	r3, [pc, #12]	; (12a8 <vTaskPlaceOnEventList+0x3c>)
    129c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    129e:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    12a0:	4b05      	ldr	r3, [pc, #20]	; (12b8 <vTaskPlaceOnEventList+0x4c>)
    12a2:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    12a4:	bd38      	pop	{r3, r4, r5, pc}
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	20001484 	.word	0x20001484
    12ac:	000002c9 	.word	0x000002c9
    12b0:	000002f9 	.word	0x000002f9
    12b4:	000002b1 	.word	0x000002b1
    12b8:	00000c6d 	.word	0x00000c6d

000012bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
    12bc:	b538      	push	{r3, r4, r5, lr}
    12be:	1c0d      	adds	r5, r1, #0
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
    12c0:	2800      	cmp	r0, #0
    12c2:	d101      	bne.n	12c8 <vTaskPlaceOnEventListRestricted+0xc>
    12c4:	b672      	cpsid	i
    12c6:	e7fe      	b.n	12c6 <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    12c8:	4c06      	ldr	r4, [pc, #24]	; (12e4 <vTaskPlaceOnEventListRestricted+0x28>)
    12ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    12cc:	3118      	adds	r1, #24
    12ce:	4b06      	ldr	r3, [pc, #24]	; (12e8 <vTaskPlaceOnEventListRestricted+0x2c>)
    12d0:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    12d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    12d4:	3004      	adds	r0, #4
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <vTaskPlaceOnEventListRestricted+0x30>)
    12d8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    12da:	6b20      	ldr	r0, [r4, #48]	; 0x30
    12dc:	1828      	adds	r0, r5, r0

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    12de:	4b04      	ldr	r3, [pc, #16]	; (12f0 <vTaskPlaceOnEventListRestricted+0x34>)
    12e0:	4798      	blx	r3
	}
    12e2:	bd38      	pop	{r3, r4, r5, pc}
    12e4:	20001484 	.word	0x20001484
    12e8:	000002b1 	.word	0x000002b1
    12ec:	000002f9 	.word	0x000002f9
    12f0:	00000c6d 	.word	0x00000c6d

000012f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    12f4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    12f6:	68c3      	ldr	r3, [r0, #12]
    12f8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    12fa:	2c00      	cmp	r4, #0
    12fc:	d101      	bne.n	1302 <xTaskRemoveFromEventList+0xe>
    12fe:	b672      	cpsid	i
    1300:	e7fe      	b.n	1300 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1302:	1c25      	adds	r5, r4, #0
    1304:	3518      	adds	r5, #24
    1306:	1c28      	adds	r0, r5, #0
    1308:	4b15      	ldr	r3, [pc, #84]	; (1360 <xTaskRemoveFromEventList+0x6c>)
    130a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    130c:	4b15      	ldr	r3, [pc, #84]	; (1364 <xTaskRemoveFromEventList+0x70>)
    130e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1310:	2b00      	cmp	r3, #0
    1312:	d114      	bne.n	133e <xTaskRemoveFromEventList+0x4a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1314:	1d25      	adds	r5, r4, #4
    1316:	1c28      	adds	r0, r5, #0
    1318:	4b11      	ldr	r3, [pc, #68]	; (1360 <xTaskRemoveFromEventList+0x6c>)
    131a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    131c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    131e:	4a11      	ldr	r2, [pc, #68]	; (1364 <xTaskRemoveFromEventList+0x70>)
    1320:	6e52      	ldr	r2, [r2, #100]	; 0x64
    1322:	4293      	cmp	r3, r2
    1324:	d901      	bls.n	132a <xTaskRemoveFromEventList+0x36>
    1326:	4a0f      	ldr	r2, [pc, #60]	; (1364 <xTaskRemoveFromEventList+0x70>)
    1328:	6653      	str	r3, [r2, #100]	; 0x64
    132a:	009a      	lsls	r2, r3, #2
    132c:	18d3      	adds	r3, r2, r3
    132e:	009b      	lsls	r3, r3, #2
    1330:	480d      	ldr	r0, [pc, #52]	; (1368 <xTaskRemoveFromEventList+0x74>)
    1332:	303c      	adds	r0, #60	; 0x3c
    1334:	18c0      	adds	r0, r0, r3
    1336:	1c29      	adds	r1, r5, #0
    1338:	4b0c      	ldr	r3, [pc, #48]	; (136c <xTaskRemoveFromEventList+0x78>)
    133a:	4798      	blx	r3
    133c:	e004      	b.n	1348 <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    133e:	480a      	ldr	r0, [pc, #40]	; (1368 <xTaskRemoveFromEventList+0x74>)
    1340:	3014      	adds	r0, #20
    1342:	1c29      	adds	r1, r5, #0
    1344:	4b09      	ldr	r3, [pc, #36]	; (136c <xTaskRemoveFromEventList+0x78>)
    1346:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1348:	4b07      	ldr	r3, [pc, #28]	; (1368 <xTaskRemoveFromEventList+0x74>)
    134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    134c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xReturn = pdFALSE;
    1350:	2000      	movs	r0, #0
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1352:	429a      	cmp	r2, r3
    1354:	d903      	bls.n	135e <xTaskRemoveFromEventList+0x6a>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1356:	2201      	movs	r2, #1
    1358:	4b02      	ldr	r3, [pc, #8]	; (1364 <xTaskRemoveFromEventList+0x70>)
    135a:	679a      	str	r2, [r3, #120]	; 0x78
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    135c:	2001      	movs	r0, #1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    135e:	bd38      	pop	{r3, r4, r5, pc}
    1360:	000002f9 	.word	0x000002f9
    1364:	20001504 	.word	0x20001504
    1368:	20001484 	.word	0x20001484
    136c:	000002b1 	.word	0x000002b1

00001370 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    1370:	2800      	cmp	r0, #0
    1372:	d101      	bne.n	1378 <vTaskSetTimeOutState+0x8>
    1374:	b672      	cpsid	i
    1376:	e7fe      	b.n	1376 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1378:	4b03      	ldr	r3, [pc, #12]	; (1388 <vTaskSetTimeOutState+0x18>)
    137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    137c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    137e:	4b03      	ldr	r3, [pc, #12]	; (138c <vTaskSetTimeOutState+0x1c>)
    1380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1382:	6043      	str	r3, [r0, #4]
}
    1384:	4770      	bx	lr
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	20001504 	.word	0x20001504
    138c:	20001484 	.word	0x20001484

00001390 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	1c04      	adds	r4, r0, #0
    1394:	1c0e      	adds	r6, r1, #0
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    1396:	2800      	cmp	r0, #0
    1398:	d101      	bne.n	139e <xTaskCheckForTimeOut+0xe>
    139a:	b672      	cpsid	i
    139c:	e7fe      	b.n	139c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    139e:	2900      	cmp	r1, #0
    13a0:	d101      	bne.n	13a6 <xTaskCheckForTimeOut+0x16>
    13a2:	b672      	cpsid	i
    13a4:	e7fe      	b.n	13a4 <xTaskCheckForTimeOut+0x14>

	taskENTER_CRITICAL();
    13a6:	4b11      	ldr	r3, [pc, #68]	; (13ec <xTaskCheckForTimeOut+0x5c>)
    13a8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    13aa:	4b11      	ldr	r3, [pc, #68]	; (13f0 <xTaskCheckForTimeOut+0x60>)
    13ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    13ae:	6833      	ldr	r3, [r6, #0]
    13b0:	1c58      	adds	r0, r3, #1
    13b2:	d015      	beq.n	13e0 <xTaskCheckForTimeOut+0x50>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    13b4:	490f      	ldr	r1, [pc, #60]	; (13f4 <xTaskCheckForTimeOut+0x64>)
    13b6:	6f09      	ldr	r1, [r1, #112]	; 0x70
    13b8:	6820      	ldr	r0, [r4, #0]
    13ba:	4288      	cmp	r0, r1
    13bc:	d003      	beq.n	13c6 <xTaskCheckForTimeOut+0x36>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    13be:	2501      	movs	r5, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    13c0:	6861      	ldr	r1, [r4, #4]
    13c2:	428a      	cmp	r2, r1
    13c4:	d20d      	bcs.n	13e2 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    13c6:	6861      	ldr	r1, [r4, #4]
    13c8:	1a50      	subs	r0, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    13ca:	2501      	movs	r5, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    13cc:	4283      	cmp	r3, r0
    13ce:	d908      	bls.n	13e2 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    13d0:	1a8a      	subs	r2, r1, r2
    13d2:	18d3      	adds	r3, r2, r3
    13d4:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
    13d6:	1c20      	adds	r0, r4, #0
    13d8:	4b07      	ldr	r3, [pc, #28]	; (13f8 <xTaskCheckForTimeOut+0x68>)
    13da:	4798      	blx	r3
			xReturn = pdFALSE;
    13dc:	2500      	movs	r5, #0
    13de:	e000      	b.n	13e2 <xTaskCheckForTimeOut+0x52>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    13e0:	2500      	movs	r5, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    13e2:	4b06      	ldr	r3, [pc, #24]	; (13fc <xTaskCheckForTimeOut+0x6c>)
    13e4:	4798      	blx	r3

	return xReturn;
}
    13e6:	1c28      	adds	r0, r5, #0
    13e8:	bd70      	pop	{r4, r5, r6, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	0000038d 	.word	0x0000038d
    13f0:	20001484 	.word	0x20001484
    13f4:	20001504 	.word	0x20001504
    13f8:	00001371 	.word	0x00001371
    13fc:	000003a5 	.word	0x000003a5

00001400 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1400:	2201      	movs	r2, #1
    1402:	4b01      	ldr	r3, [pc, #4]	; (1408 <vTaskMissedYield+0x8>)
    1404:	679a      	str	r2, [r3, #120]	; 0x78
}
    1406:	4770      	bx	lr
    1408:	20001504 	.word	0x20001504

0000140c <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    140c:	4b01      	ldr	r3, [pc, #4]	; (1414 <xTaskGetCurrentTaskHandle+0x8>)
    140e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c

		return xReturn;
	}
    1410:	4770      	bx	lr
    1412:	46c0      	nop			; (mov r8, r8)
    1414:	20001484 	.word	0x20001484

00001418 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1418:	4b05      	ldr	r3, [pc, #20]	; (1430 <xTaskGetSchedulerState+0x18>)
    141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    141c:	2001      	movs	r0, #1

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    141e:	2b00      	cmp	r3, #0
    1420:	d004      	beq.n	142c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1422:	4b03      	ldr	r3, [pc, #12]	; (1430 <xTaskGetSchedulerState+0x18>)
    1424:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
			{
				xReturn = taskSCHEDULER_RUNNING;
    1426:	4243      	negs	r3, r0
    1428:	4158      	adcs	r0, r3
    142a:	0040      	lsls	r0, r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
    142c:	4770      	bx	lr
    142e:	46c0      	nop			; (mov r8, r8)
    1430:	20001504 	.word	0x20001504

00001434 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    1434:	b538      	push	{r3, r4, r5, lr}
    1436:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    1438:	d033      	beq.n	14a2 <vTaskPriorityInherit+0x6e>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    143a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    143c:	4a19      	ldr	r2, [pc, #100]	; (14a4 <vTaskPriorityInherit+0x70>)
    143e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1440:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1442:	4293      	cmp	r3, r2
    1444:	d22d      	bcs.n	14a2 <vTaskPriorityInherit+0x6e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1446:	6982      	ldr	r2, [r0, #24]
    1448:	2a00      	cmp	r2, #0
    144a:	db05      	blt.n	1458 <vTaskPriorityInherit+0x24>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    144c:	4a15      	ldr	r2, [pc, #84]	; (14a4 <vTaskPriorityInherit+0x70>)
    144e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1452:	2105      	movs	r1, #5
    1454:	1a8a      	subs	r2, r1, r2
    1456:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1458:	009a      	lsls	r2, r3, #2
    145a:	18d3      	adds	r3, r2, r3
    145c:	009b      	lsls	r3, r3, #2
    145e:	4a11      	ldr	r2, [pc, #68]	; (14a4 <vTaskPriorityInherit+0x70>)
    1460:	323c      	adds	r2, #60	; 0x3c
    1462:	18d3      	adds	r3, r2, r3
    1464:	6962      	ldr	r2, [r4, #20]
    1466:	429a      	cmp	r2, r3
    1468:	d117      	bne.n	149a <vTaskPriorityInherit+0x66>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    146a:	1d25      	adds	r5, r4, #4
    146c:	1c28      	adds	r0, r5, #0
    146e:	4b0e      	ldr	r3, [pc, #56]	; (14a8 <vTaskPriorityInherit+0x74>)
    1470:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1472:	4b0c      	ldr	r3, [pc, #48]	; (14a4 <vTaskPriorityInherit+0x70>)
    1474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1478:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    147a:	4a0c      	ldr	r2, [pc, #48]	; (14ac <vTaskPriorityInherit+0x78>)
    147c:	6e52      	ldr	r2, [r2, #100]	; 0x64
    147e:	4293      	cmp	r3, r2
    1480:	d901      	bls.n	1486 <vTaskPriorityInherit+0x52>
    1482:	4a0a      	ldr	r2, [pc, #40]	; (14ac <vTaskPriorityInherit+0x78>)
    1484:	6653      	str	r3, [r2, #100]	; 0x64
    1486:	0098      	lsls	r0, r3, #2
    1488:	18c3      	adds	r3, r0, r3
    148a:	009b      	lsls	r3, r3, #2
    148c:	4805      	ldr	r0, [pc, #20]	; (14a4 <vTaskPriorityInherit+0x70>)
    148e:	303c      	adds	r0, #60	; 0x3c
    1490:	18c0      	adds	r0, r0, r3
    1492:	1c29      	adds	r1, r5, #0
    1494:	4b06      	ldr	r3, [pc, #24]	; (14b0 <vTaskPriorityInherit+0x7c>)
    1496:	4798      	blx	r3
    1498:	e003      	b.n	14a2 <vTaskPriorityInherit+0x6e>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    149a:	4b02      	ldr	r3, [pc, #8]	; (14a4 <vTaskPriorityInherit+0x70>)
    149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14a0:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    14a2:	bd38      	pop	{r3, r4, r5, pc}
    14a4:	20001484 	.word	0x20001484
    14a8:	000002f9 	.word	0x000002f9
    14ac:	20001504 	.word	0x20001504
    14b0:	000002b1 	.word	0x000002b1

000014b4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    14b4:	b538      	push	{r3, r4, r5, lr}
    14b6:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    14b8:	d01e      	beq.n	14f8 <vTaskPriorityDisinherit+0x44>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    14ba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    14bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    14be:	429a      	cmp	r2, r3
    14c0:	d01a      	beq.n	14f8 <vTaskPriorityDisinherit+0x44>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    14c2:	1d05      	adds	r5, r0, #4
    14c4:	1c28      	adds	r0, r5, #0
    14c6:	4b0d      	ldr	r3, [pc, #52]	; (14fc <vTaskPriorityDisinherit+0x48>)
    14c8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    14ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    14cc:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    14ce:	69a2      	ldr	r2, [r4, #24]
    14d0:	2a00      	cmp	r2, #0
    14d2:	db02      	blt.n	14da <vTaskPriorityDisinherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    14d4:	2205      	movs	r2, #5
    14d6:	1ad2      	subs	r2, r2, r3
    14d8:	61a2      	str	r2, [r4, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
    14da:	4a09      	ldr	r2, [pc, #36]	; (1500 <vTaskPriorityDisinherit+0x4c>)
    14dc:	6e52      	ldr	r2, [r2, #100]	; 0x64
    14de:	4293      	cmp	r3, r2
    14e0:	d901      	bls.n	14e6 <vTaskPriorityDisinherit+0x32>
    14e2:	4a07      	ldr	r2, [pc, #28]	; (1500 <vTaskPriorityDisinherit+0x4c>)
    14e4:	6653      	str	r3, [r2, #100]	; 0x64
    14e6:	0098      	lsls	r0, r3, #2
    14e8:	18c3      	adds	r3, r0, r3
    14ea:	009b      	lsls	r3, r3, #2
    14ec:	4805      	ldr	r0, [pc, #20]	; (1504 <vTaskPriorityDisinherit+0x50>)
    14ee:	303c      	adds	r0, #60	; 0x3c
    14f0:	18c0      	adds	r0, r0, r3
    14f2:	1c29      	adds	r1, r5, #0
    14f4:	4b04      	ldr	r3, [pc, #16]	; (1508 <vTaskPriorityDisinherit+0x54>)
    14f6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    14f8:	bd38      	pop	{r3, r4, r5, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	000002f9 	.word	0x000002f9
    1500:	20001504 	.word	0x20001504
    1504:	20001484 	.word	0x20001484
    1508:	000002b1 	.word	0x000002b1

0000150c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    150c:	b510      	push	{r4, lr}
    150e:	1c04      	adds	r4, r0, #0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1510:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1512:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
    1514:	4291      	cmp	r1, r2
    1516:	d80b      	bhi.n	1530 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    1518:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    151a:	2001      	movs	r0, #1

	if( xNextExpiryTime <= xTimeNow )
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
    151c:	69a3      	ldr	r3, [r4, #24]
    151e:	429a      	cmp	r2, r3
    1520:	d211      	bcs.n	1546 <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1522:	4b09      	ldr	r3, [pc, #36]	; (1548 <prvInsertTimerInActiveList+0x3c>)
    1524:	6818      	ldr	r0, [r3, #0]
    1526:	1d21      	adds	r1, r4, #4
    1528:	4b08      	ldr	r3, [pc, #32]	; (154c <prvInsertTimerInActiveList+0x40>)
    152a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    152c:	2000      	movs	r0, #0
    152e:	e00a      	b.n	1546 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1530:	429a      	cmp	r2, r3
    1532:	d202      	bcs.n	153a <prvInsertTimerInActiveList+0x2e>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1534:	2001      	movs	r0, #1
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1536:	4299      	cmp	r1, r3
    1538:	d205      	bcs.n	1546 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    153a:	4b03      	ldr	r3, [pc, #12]	; (1548 <prvInsertTimerInActiveList+0x3c>)
    153c:	6858      	ldr	r0, [r3, #4]
    153e:	1d21      	adds	r1, r4, #4
    1540:	4b02      	ldr	r3, [pc, #8]	; (154c <prvInsertTimerInActiveList+0x40>)
    1542:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    1544:	2000      	movs	r0, #0
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
    1546:	bd10      	pop	{r4, pc}
    1548:	20001580 	.word	0x20001580
    154c:	000002c9 	.word	0x000002c9

00001550 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    1550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    1552:	4b10      	ldr	r3, [pc, #64]	; (1594 <prvCheckForValidListAndQueue+0x44>)
    1554:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    1556:	4b10      	ldr	r3, [pc, #64]	; (1598 <prvCheckForValidListAndQueue+0x48>)
    1558:	689b      	ldr	r3, [r3, #8]
    155a:	2b00      	cmp	r3, #0
    155c:	d117      	bne.n	158e <prvCheckForValidListAndQueue+0x3e>
		{
			vListInitialise( &xActiveTimerList1 );
    155e:	4c0e      	ldr	r4, [pc, #56]	; (1598 <prvCheckForValidListAndQueue+0x48>)
    1560:	1c26      	adds	r6, r4, #0
    1562:	360c      	adds	r6, #12
    1564:	1c30      	adds	r0, r6, #0
    1566:	4f0d      	ldr	r7, [pc, #52]	; (159c <prvCheckForValidListAndQueue+0x4c>)
    1568:	47b8      	blx	r7
			vListInitialise( &xActiveTimerList2 );
    156a:	1c25      	adds	r5, r4, #0
    156c:	3520      	adds	r5, #32
    156e:	1c28      	adds	r0, r5, #0
    1570:	47b8      	blx	r7
			pxCurrentTimerList = &xActiveTimerList1;
    1572:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    1574:	6025      	str	r5, [r4, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1576:	2002      	movs	r0, #2
    1578:	210c      	movs	r1, #12
    157a:	2200      	movs	r2, #0
    157c:	4b08      	ldr	r3, [pc, #32]	; (15a0 <prvCheckForValidListAndQueue+0x50>)
    157e:	4798      	blx	r3
			configASSERT( xTimerQueue );
    1580:	2800      	cmp	r0, #0
    1582:	d002      	beq.n	158a <prvCheckForValidListAndQueue+0x3a>
		{
			vListInitialise( &xActiveTimerList1 );
			vListInitialise( &xActiveTimerList2 );
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <prvCheckForValidListAndQueue+0x48>)
    1586:	6098      	str	r0, [r3, #8]
    1588:	e001      	b.n	158e <prvCheckForValidListAndQueue+0x3e>
			configASSERT( xTimerQueue );
    158a:	b672      	cpsid	i
    158c:	e7fe      	b.n	158c <prvCheckForValidListAndQueue+0x3c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    158e:	4b05      	ldr	r3, [pc, #20]	; (15a4 <prvCheckForValidListAndQueue+0x54>)
    1590:	4798      	blx	r3
}
    1592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1594:	0000038d 	.word	0x0000038d
    1598:	20001580 	.word	0x20001580
    159c:	00000291 	.word	0x00000291
    15a0:	000007d1 	.word	0x000007d1
    15a4:	000003a5 	.word	0x000003a5

000015a8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    15a8:	b510      	push	{r4, lr}
    15aa:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    15ac:	4b0b      	ldr	r3, [pc, #44]	; (15dc <xTimerCreateTimerTask+0x34>)
    15ae:	4798      	blx	r3

	if( xTimerQueue != NULL )
    15b0:	4b0b      	ldr	r3, [pc, #44]	; (15e0 <xTimerCreateTimerTask+0x38>)
    15b2:	689b      	ldr	r3, [r3, #8]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d00c      	beq.n	15d2 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    15b8:	2302      	movs	r3, #2
    15ba:	9300      	str	r3, [sp, #0]
    15bc:	2300      	movs	r3, #0
    15be:	9301      	str	r3, [sp, #4]
    15c0:	9302      	str	r3, [sp, #8]
    15c2:	9303      	str	r3, [sp, #12]
    15c4:	4807      	ldr	r0, [pc, #28]	; (15e4 <xTimerCreateTimerTask+0x3c>)
    15c6:	4908      	ldr	r1, [pc, #32]	; (15e8 <xTimerCreateTimerTask+0x40>)
    15c8:	2250      	movs	r2, #80	; 0x50
    15ca:	4c08      	ldr	r4, [pc, #32]	; (15ec <xTimerCreateTimerTask+0x44>)
    15cc:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    15ce:	2800      	cmp	r0, #0
    15d0:	d101      	bne.n	15d6 <xTimerCreateTimerTask+0x2e>
    15d2:	b672      	cpsid	i
    15d4:	e7fe      	b.n	15d4 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
    15d6:	b004      	add	sp, #16
    15d8:	bd10      	pop	{r4, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	00001551 	.word	0x00001551
    15e0:	20001580 	.word	0x20001580
    15e4:	00001709 	.word	0x00001709
    15e8:	000024cc 	.word	0x000024cc
    15ec:	00000cb1 	.word	0x00000cb1

000015f0 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    15f0:	b510      	push	{r4, lr}
    15f2:	b084      	sub	sp, #16
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    15f4:	4c13      	ldr	r4, [pc, #76]	; (1644 <xTimerGenericCommand+0x54>)
    15f6:	68a4      	ldr	r4, [r4, #8]
    15f8:	2c00      	cmp	r4, #0
    15fa:	d01f      	beq.n	163c <xTimerGenericCommand+0x4c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    15fc:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    15fe:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    1600:	9003      	str	r0, [sp, #12]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1602:	2905      	cmp	r1, #5
    1604:	dc13      	bgt.n	162e <xTimerGenericCommand+0x3e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1606:	4b10      	ldr	r3, [pc, #64]	; (1648 <xTimerGenericCommand+0x58>)
    1608:	4798      	blx	r3
    160a:	2802      	cmp	r0, #2
    160c:	d107      	bne.n	161e <xTimerGenericCommand+0x2e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    160e:	4b0d      	ldr	r3, [pc, #52]	; (1644 <xTimerGenericCommand+0x54>)
    1610:	6898      	ldr	r0, [r3, #8]
    1612:	a901      	add	r1, sp, #4
    1614:	9a06      	ldr	r2, [sp, #24]
    1616:	2300      	movs	r3, #0
    1618:	4c0c      	ldr	r4, [pc, #48]	; (164c <xTimerGenericCommand+0x5c>)
    161a:	47a0      	blx	r4
    161c:	e00f      	b.n	163e <xTimerGenericCommand+0x4e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    161e:	4b09      	ldr	r3, [pc, #36]	; (1644 <xTimerGenericCommand+0x54>)
    1620:	6898      	ldr	r0, [r3, #8]
    1622:	a901      	add	r1, sp, #4
    1624:	2200      	movs	r2, #0
    1626:	2300      	movs	r3, #0
    1628:	4c08      	ldr	r4, [pc, #32]	; (164c <xTimerGenericCommand+0x5c>)
    162a:	47a0      	blx	r4
    162c:	e007      	b.n	163e <xTimerGenericCommand+0x4e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    162e:	1c20      	adds	r0, r4, #0
    1630:	a901      	add	r1, sp, #4
    1632:	1c1a      	adds	r2, r3, #0
    1634:	2300      	movs	r3, #0
    1636:	4c06      	ldr	r4, [pc, #24]	; (1650 <xTimerGenericCommand+0x60>)
    1638:	47a0      	blx	r4
    163a:	e000      	b.n	163e <xTimerGenericCommand+0x4e>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    163c:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    163e:	b004      	add	sp, #16
    1640:	bd10      	pop	{r4, pc}
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	20001580 	.word	0x20001580
    1648:	00001419 	.word	0x00001419
    164c:	00000825 	.word	0x00000825
    1650:	00000999 	.word	0x00000999

00001654 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
    1656:	4657      	mov	r7, sl
    1658:	464e      	mov	r6, r9
    165a:	4645      	mov	r5, r8
    165c:	b4e0      	push	{r5, r6, r7}
    165e:	b082      	sub	sp, #8
    1660:	4681      	mov	r9, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    1662:	4b24      	ldr	r3, [pc, #144]	; (16f4 <prvSampleTimeNow+0xa0>)
    1664:	4798      	blx	r3
    1666:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
    1668:	4b23      	ldr	r3, [pc, #140]	; (16f8 <prvSampleTimeNow+0xa4>)
    166a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    166c:	4298      	cmp	r0, r3
    166e:	d233      	bcs.n	16d8 <prvSampleTimeNow+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1670:	4e21      	ldr	r6, [pc, #132]	; (16f8 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1672:	4f22      	ldr	r7, [pc, #136]	; (16fc <prvSampleTimeNow+0xa8>)
    1674:	e024      	b.n	16c0 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1676:	68db      	ldr	r3, [r3, #12]
    1678:	6819      	ldr	r1, [r3, #0]
    167a:	468a      	mov	sl, r1

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    167c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    167e:	1d25      	adds	r5, r4, #4
    1680:	1c28      	adds	r0, r5, #0
    1682:	47b8      	blx	r7
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1684:	1c20      	adds	r0, r4, #0
    1686:	6a62      	ldr	r2, [r4, #36]	; 0x24
    1688:	4790      	blx	r2

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    168a:	69e3      	ldr	r3, [r4, #28]
    168c:	2b01      	cmp	r3, #1
    168e:	d117      	bne.n	16c0 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1690:	69a1      	ldr	r1, [r4, #24]
    1692:	1c0b      	adds	r3, r1, #0
    1694:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    1696:	4553      	cmp	r3, sl
    1698:	d907      	bls.n	16aa <prvSampleTimeNow+0x56>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    169a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    169c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    169e:	4b16      	ldr	r3, [pc, #88]	; (16f8 <prvSampleTimeNow+0xa4>)
    16a0:	6858      	ldr	r0, [r3, #4]
    16a2:	1c29      	adds	r1, r5, #0
    16a4:	4b16      	ldr	r3, [pc, #88]	; (1700 <prvSampleTimeNow+0xac>)
    16a6:	4798      	blx	r3
    16a8:	e00a      	b.n	16c0 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    16aa:	2300      	movs	r3, #0
    16ac:	9300      	str	r3, [sp, #0]
    16ae:	1c20      	adds	r0, r4, #0
    16b0:	2100      	movs	r1, #0
    16b2:	4652      	mov	r2, sl
    16b4:	4c13      	ldr	r4, [pc, #76]	; (1704 <prvSampleTimeNow+0xb0>)
    16b6:	47a0      	blx	r4
				configASSERT( xResult );
    16b8:	2800      	cmp	r0, #0
    16ba:	d101      	bne.n	16c0 <prvSampleTimeNow+0x6c>
    16bc:	b672      	cpsid	i
    16be:	e7fe      	b.n	16be <prvSampleTimeNow+0x6a>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    16c0:	6873      	ldr	r3, [r6, #4]
    16c2:	6819      	ldr	r1, [r3, #0]
    16c4:	2900      	cmp	r1, #0
    16c6:	d1d6      	bne.n	1676 <prvSampleTimeNow+0x22>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    16c8:	4a0b      	ldr	r2, [pc, #44]	; (16f8 <prvSampleTimeNow+0xa4>)
    16ca:	6814      	ldr	r4, [r2, #0]
    16cc:	6054      	str	r4, [r2, #4]
	pxOverflowTimerList = pxTemp;
    16ce:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    16d0:	2301      	movs	r3, #1
    16d2:	4649      	mov	r1, r9
    16d4:	600b      	str	r3, [r1, #0]
    16d6:	e002      	b.n	16de <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    16d8:	2300      	movs	r3, #0
    16da:	464a      	mov	r2, r9
    16dc:	6013      	str	r3, [r2, #0]
	}

	xLastTime = xTimeNow;
    16de:	4b06      	ldr	r3, [pc, #24]	; (16f8 <prvSampleTimeNow+0xa4>)
    16e0:	4644      	mov	r4, r8
    16e2:	635c      	str	r4, [r3, #52]	; 0x34

	return xTimeNow;
}
    16e4:	4640      	mov	r0, r8
    16e6:	b002      	add	sp, #8
    16e8:	bc1c      	pop	{r2, r3, r4}
    16ea:	4690      	mov	r8, r2
    16ec:	4699      	mov	r9, r3
    16ee:	46a2      	mov	sl, r4
    16f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	00000ef5 	.word	0x00000ef5
    16f8:	20001580 	.word	0x20001580
    16fc:	000002f9 	.word	0x000002f9
    1700:	000002c9 	.word	0x000002c9
    1704:	000015f1 	.word	0x000015f1

00001708 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    1708:	b5f0      	push	{r4, r5, r6, r7, lr}
    170a:	4647      	mov	r7, r8
    170c:	b480      	push	{r7}
    170e:	b086      	sub	sp, #24
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1710:	484e      	ldr	r0, [pc, #312]	; (184c <prvTimerTask+0x144>)
    1712:	4680      	mov	r8, r0
    1714:	4641      	mov	r1, r8
    1716:	684b      	ldr	r3, [r1, #4]
	if( *pxListWasEmpty == pdFALSE )
    1718:	681a      	ldr	r2, [r3, #0]
    171a:	2a00      	cmp	r2, #0
    171c:	d100      	bne.n	1720 <prvTimerTask+0x18>
    171e:	e08a      	b.n	1836 <prvTimerTask+0x12e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1720:	68db      	ldr	r3, [r3, #12]
    1722:	681c      	ldr	r4, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    1724:	4b4a      	ldr	r3, [pc, #296]	; (1850 <prvTimerTask+0x148>)
    1726:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1728:	a803      	add	r0, sp, #12
    172a:	4b4a      	ldr	r3, [pc, #296]	; (1854 <prvTimerTask+0x14c>)
    172c:	4798      	blx	r3
    172e:	1c05      	adds	r5, r0, #0
		if( xTimerListsWereSwitched == pdFALSE )
    1730:	9b03      	ldr	r3, [sp, #12]
    1732:	2b00      	cmp	r3, #0
    1734:	d131      	bne.n	179a <prvTimerTask+0x92>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1736:	4284      	cmp	r4, r0
    1738:	d823      	bhi.n	1782 <prvTimerTask+0x7a>
			{
				( void ) xTaskResumeAll();
    173a:	4b47      	ldr	r3, [pc, #284]	; (1858 <prvTimerTask+0x150>)
    173c:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    173e:	4b43      	ldr	r3, [pc, #268]	; (184c <prvTimerTask+0x144>)
    1740:	685b      	ldr	r3, [r3, #4]
    1742:	68db      	ldr	r3, [r3, #12]
    1744:	68de      	ldr	r6, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1746:	1d30      	adds	r0, r6, #4
    1748:	4b44      	ldr	r3, [pc, #272]	; (185c <prvTimerTask+0x154>)
    174a:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    174c:	69f7      	ldr	r7, [r6, #28]
    174e:	2f01      	cmp	r7, #1
    1750:	d113      	bne.n	177a <prvTimerTask+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1752:	69b0      	ldr	r0, [r6, #24]
    1754:	1821      	adds	r1, r4, r0
    1756:	1c30      	adds	r0, r6, #0
    1758:	1c2a      	adds	r2, r5, #0
    175a:	1c23      	adds	r3, r4, #0
    175c:	4d40      	ldr	r5, [pc, #256]	; (1860 <prvTimerTask+0x158>)
    175e:	47a8      	blx	r5
    1760:	2801      	cmp	r0, #1
    1762:	d10a      	bne.n	177a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1764:	2300      	movs	r3, #0
    1766:	9300      	str	r3, [sp, #0]
    1768:	1c30      	adds	r0, r6, #0
    176a:	2100      	movs	r1, #0
    176c:	1c22      	adds	r2, r4, #0
    176e:	4c3d      	ldr	r4, [pc, #244]	; (1864 <prvTimerTask+0x15c>)
    1770:	47a0      	blx	r4
			configASSERT( xResult );
    1772:	2800      	cmp	r0, #0
    1774:	d101      	bne.n	177a <prvTimerTask+0x72>
    1776:	b672      	cpsid	i
    1778:	e7fe      	b.n	1778 <prvTimerTask+0x70>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    177a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    177c:	1c30      	adds	r0, r6, #0
    177e:	4798      	blx	r3
    1780:	e00d      	b.n	179e <prvTimerTask+0x96>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    1782:	4b32      	ldr	r3, [pc, #200]	; (184c <prvTimerTask+0x144>)
    1784:	6898      	ldr	r0, [r3, #8]
    1786:	1b61      	subs	r1, r4, r5
    1788:	4b37      	ldr	r3, [pc, #220]	; (1868 <prvTimerTask+0x160>)
    178a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    178c:	4b32      	ldr	r3, [pc, #200]	; (1858 <prvTimerTask+0x150>)
    178e:	4798      	blx	r3
    1790:	2800      	cmp	r0, #0
    1792:	d104      	bne.n	179e <prvTimerTask+0x96>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
    1794:	4b35      	ldr	r3, [pc, #212]	; (186c <prvTimerTask+0x164>)
    1796:	4798      	blx	r3
    1798:	e001      	b.n	179e <prvTimerTask+0x96>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    179a:	4b2f      	ldr	r3, [pc, #188]	; (1858 <prvTimerTask+0x150>)
    179c:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    179e:	4d2b      	ldr	r5, [pc, #172]	; (184c <prvTimerTask+0x144>)
    17a0:	4c33      	ldr	r4, [pc, #204]	; (1870 <prvTimerTask+0x168>)
    17a2:	e040      	b.n	1826 <prvTimerTask+0x11e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    17a4:	9903      	ldr	r1, [sp, #12]
    17a6:	2900      	cmp	r1, #0
    17a8:	db3d      	blt.n	1826 <prvTimerTask+0x11e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    17aa:	9e05      	ldr	r6, [sp, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    17ac:	6972      	ldr	r2, [r6, #20]
    17ae:	2a00      	cmp	r2, #0
    17b0:	d002      	beq.n	17b8 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    17b2:	1d30      	adds	r0, r6, #4
    17b4:	4b29      	ldr	r3, [pc, #164]	; (185c <prvTimerTask+0x154>)
    17b6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    17b8:	a802      	add	r0, sp, #8
    17ba:	4b26      	ldr	r3, [pc, #152]	; (1854 <prvTimerTask+0x14c>)
    17bc:	4798      	blx	r3
    17be:	1c03      	adds	r3, r0, #0

			switch( xMessage.xMessageID )
    17c0:	9f03      	ldr	r7, [sp, #12]
    17c2:	2f09      	cmp	r7, #9
    17c4:	d82f      	bhi.n	1826 <prvTimerTask+0x11e>
    17c6:	00ba      	lsls	r2, r7, #2
    17c8:	492a      	ldr	r1, [pc, #168]	; (1874 <prvTimerTask+0x16c>)
    17ca:	588a      	ldr	r2, [r1, r2]
    17cc:	4697      	mov	pc, r2
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
    17ce:	9f04      	ldr	r7, [sp, #16]
    17d0:	69b2      	ldr	r2, [r6, #24]
    17d2:	18b9      	adds	r1, r7, r2
    17d4:	1c30      	adds	r0, r6, #0
    17d6:	1c1a      	adds	r2, r3, #0
    17d8:	1c3b      	adds	r3, r7, #0
    17da:	4f21      	ldr	r7, [pc, #132]	; (1860 <prvTimerTask+0x158>)
    17dc:	47b8      	blx	r7
    17de:	2801      	cmp	r0, #1
    17e0:	d121      	bne.n	1826 <prvTimerTask+0x11e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    17e2:	1c30      	adds	r0, r6, #0
    17e4:	6a71      	ldr	r1, [r6, #36]	; 0x24
    17e6:	4788      	blx	r1
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    17e8:	69f2      	ldr	r2, [r6, #28]
    17ea:	2a01      	cmp	r2, #1
    17ec:	d11b      	bne.n	1826 <prvTimerTask+0x11e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    17ee:	69b3      	ldr	r3, [r6, #24]
    17f0:	9f04      	ldr	r7, [sp, #16]
    17f2:	19da      	adds	r2, r3, r7
    17f4:	2300      	movs	r3, #0
    17f6:	9300      	str	r3, [sp, #0]
    17f8:	1c30      	adds	r0, r6, #0
    17fa:	2100      	movs	r1, #0
    17fc:	4e19      	ldr	r6, [pc, #100]	; (1864 <prvTimerTask+0x15c>)
    17fe:	47b0      	blx	r6
							configASSERT( xResult );
    1800:	2800      	cmp	r0, #0
    1802:	d110      	bne.n	1826 <prvTimerTask+0x11e>
    1804:	b672      	cpsid	i
    1806:	e7fe      	b.n	1806 <prvTimerTask+0xfe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1808:	9904      	ldr	r1, [sp, #16]
    180a:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    180c:	2900      	cmp	r1, #0
    180e:	d101      	bne.n	1814 <prvTimerTask+0x10c>
    1810:	b672      	cpsid	i
    1812:	e7fe      	b.n	1812 <prvTimerTask+0x10a>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1814:	1859      	adds	r1, r3, r1
    1816:	1c30      	adds	r0, r6, #0
    1818:	1c1a      	adds	r2, r3, #0
    181a:	4e11      	ldr	r6, [pc, #68]	; (1860 <prvTimerTask+0x158>)
    181c:	47b0      	blx	r6
    181e:	e002      	b.n	1826 <prvTimerTask+0x11e>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
    1820:	1c30      	adds	r0, r6, #0
    1822:	4b15      	ldr	r3, [pc, #84]	; (1878 <prvTimerTask+0x170>)
    1824:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1826:	68a8      	ldr	r0, [r5, #8]
    1828:	a903      	add	r1, sp, #12
    182a:	2200      	movs	r2, #0
    182c:	2300      	movs	r3, #0
    182e:	47a0      	blx	r4
    1830:	2800      	cmp	r0, #0
    1832:	d1b7      	bne.n	17a4 <prvTimerTask+0x9c>
    1834:	e76e      	b.n	1714 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    1836:	4806      	ldr	r0, [pc, #24]	; (1850 <prvTimerTask+0x148>)
    1838:	4780      	blx	r0
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    183a:	a803      	add	r0, sp, #12
    183c:	4905      	ldr	r1, [pc, #20]	; (1854 <prvTimerTask+0x14c>)
    183e:	4788      	blx	r1
    1840:	1c05      	adds	r5, r0, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    1842:	2400      	movs	r4, #0
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
    1844:	9a03      	ldr	r2, [sp, #12]
    1846:	42a2      	cmp	r2, r4
    1848:	d09b      	beq.n	1782 <prvTimerTask+0x7a>
    184a:	e7a6      	b.n	179a <prvTimerTask+0x92>
    184c:	20001580 	.word	0x20001580
    1850:	00000ee5 	.word	0x00000ee5
    1854:	00001655 	.word	0x00001655
    1858:	00001025 	.word	0x00001025
    185c:	000002f9 	.word	0x000002f9
    1860:	0000150d 	.word	0x0000150d
    1864:	000015f1 	.word	0x000015f1
    1868:	00000bf5 	.word	0x00000bf5
    186c:	00000375 	.word	0x00000375
    1870:	00000a69 	.word	0x00000a69
    1874:	000024a4 	.word	0x000024a4
    1878:	0000057d 	.word	0x0000057d

0000187c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    187c:	e7fe      	b.n	187c <Dummy_Handler>
    187e:	46c0      	nop			; (mov r8, r8)

00001880 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1880:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1882:	4b2c      	ldr	r3, [pc, #176]	; (1934 <Reset_Handler+0xb4>)
    1884:	4a2c      	ldr	r2, [pc, #176]	; (1938 <Reset_Handler+0xb8>)
    1886:	429a      	cmp	r2, r3
    1888:	d003      	beq.n	1892 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    188a:	4b2c      	ldr	r3, [pc, #176]	; (193c <Reset_Handler+0xbc>)
    188c:	4a29      	ldr	r2, [pc, #164]	; (1934 <Reset_Handler+0xb4>)
    188e:	429a      	cmp	r2, r3
    1890:	d304      	bcc.n	189c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1892:	4b2b      	ldr	r3, [pc, #172]	; (1940 <Reset_Handler+0xc0>)
    1894:	4a2b      	ldr	r2, [pc, #172]	; (1944 <Reset_Handler+0xc4>)
    1896:	429a      	cmp	r2, r3
    1898:	d310      	bcc.n	18bc <Reset_Handler+0x3c>
    189a:	e01b      	b.n	18d4 <Reset_Handler+0x54>
    189c:	4b2a      	ldr	r3, [pc, #168]	; (1948 <Reset_Handler+0xc8>)
    189e:	4827      	ldr	r0, [pc, #156]	; (193c <Reset_Handler+0xbc>)
    18a0:	3003      	adds	r0, #3
    18a2:	1ac0      	subs	r0, r0, r3
    18a4:	0880      	lsrs	r0, r0, #2
    18a6:	3001      	adds	r0, #1
    18a8:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    18aa:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    18ac:	4921      	ldr	r1, [pc, #132]	; (1934 <Reset_Handler+0xb4>)
    18ae:	4a22      	ldr	r2, [pc, #136]	; (1938 <Reset_Handler+0xb8>)
    18b0:	58d4      	ldr	r4, [r2, r3]
    18b2:	50cc      	str	r4, [r1, r3]
    18b4:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    18b6:	4283      	cmp	r3, r0
    18b8:	d1fa      	bne.n	18b0 <Reset_Handler+0x30>
    18ba:	e7ea      	b.n	1892 <Reset_Handler+0x12>
    18bc:	4b21      	ldr	r3, [pc, #132]	; (1944 <Reset_Handler+0xc4>)
    18be:	1d1a      	adds	r2, r3, #4
    18c0:	491f      	ldr	r1, [pc, #124]	; (1940 <Reset_Handler+0xc0>)
    18c2:	3103      	adds	r1, #3
    18c4:	1a89      	subs	r1, r1, r2
    18c6:	0889      	lsrs	r1, r1, #2
    18c8:	0089      	lsls	r1, r1, #2
    18ca:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    18cc:	2100      	movs	r1, #0
    18ce:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    18d0:	4293      	cmp	r3, r2
    18d2:	d1fc      	bne.n	18ce <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    18d4:	4b1d      	ldr	r3, [pc, #116]	; (194c <Reset_Handler+0xcc>)
    18d6:	21ff      	movs	r1, #255	; 0xff
    18d8:	4a1d      	ldr	r2, [pc, #116]	; (1950 <Reset_Handler+0xd0>)
    18da:	438a      	bics	r2, r1
    18dc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    18de:	2102      	movs	r1, #2
    18e0:	2390      	movs	r3, #144	; 0x90
    18e2:	005b      	lsls	r3, r3, #1
    18e4:	4a1b      	ldr	r2, [pc, #108]	; (1954 <Reset_Handler+0xd4>)
    18e6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    18e8:	4b1b      	ldr	r3, [pc, #108]	; (1958 <Reset_Handler+0xd8>)
    18ea:	78d8      	ldrb	r0, [r3, #3]
    18ec:	2103      	movs	r1, #3
    18ee:	4388      	bics	r0, r1
    18f0:	2202      	movs	r2, #2
    18f2:	4310      	orrs	r0, r2
    18f4:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    18f6:	78dd      	ldrb	r5, [r3, #3]
    18f8:	240c      	movs	r4, #12
    18fa:	43a5      	bics	r5, r4
    18fc:	2008      	movs	r0, #8
    18fe:	4305      	orrs	r5, r0
    1900:	70dd      	strb	r5, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1902:	4b16      	ldr	r3, [pc, #88]	; (195c <Reset_Handler+0xdc>)
    1904:	7b9e      	ldrb	r6, [r3, #14]
    1906:	2530      	movs	r5, #48	; 0x30
    1908:	43ae      	bics	r6, r5
    190a:	2520      	movs	r5, #32
    190c:	4335      	orrs	r5, r6
    190e:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1910:	7b9d      	ldrb	r5, [r3, #14]
    1912:	43a5      	bics	r5, r4
    1914:	4328      	orrs	r0, r5
    1916:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1918:	7b98      	ldrb	r0, [r3, #14]
    191a:	4388      	bics	r0, r1
    191c:	4302      	orrs	r2, r0
    191e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1920:	4b0f      	ldr	r3, [pc, #60]	; (1960 <Reset_Handler+0xe0>)
    1922:	6859      	ldr	r1, [r3, #4]
    1924:	2280      	movs	r2, #128	; 0x80
    1926:	430a      	orrs	r2, r1
    1928:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    192a:	4b0e      	ldr	r3, [pc, #56]	; (1964 <Reset_Handler+0xe4>)
    192c:	4798      	blx	r3

        /* Branch to main function */
        main();
    192e:	4b0e      	ldr	r3, [pc, #56]	; (1968 <Reset_Handler+0xe8>)
    1930:	4798      	blx	r3
    1932:	e7fe      	b.n	1932 <Reset_Handler+0xb2>
    1934:	20000000 	.word	0x20000000
    1938:	00002590 	.word	0x00002590
    193c:	20000438 	.word	0x20000438
    1940:	200015e0 	.word	0x200015e0
    1944:	20000438 	.word	0x20000438
    1948:	20000004 	.word	0x20000004
    194c:	e000ed00 	.word	0xe000ed00
    1950:	00000000 	.word	0x00000000
    1954:	41007000 	.word	0x41007000
    1958:	41005000 	.word	0x41005000
    195c:	41004800 	.word	0x41004800
    1960:	41004000 	.word	0x41004000
    1964:	000022b1 	.word	0x000022b1
    1968:	000001b9 	.word	0x000001b9

0000196c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    196c:	b508      	push	{r3, lr}
	switch (clock_source) {
    196e:	2808      	cmp	r0, #8
    1970:	d834      	bhi.n	19dc <system_clock_source_get_hz+0x70>
    1972:	0080      	lsls	r0, r0, #2
    1974:	4b1b      	ldr	r3, [pc, #108]	; (19e4 <system_clock_source_get_hz+0x78>)
    1976:	581b      	ldr	r3, [r3, r0]
    1978:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    197a:	2080      	movs	r0, #128	; 0x80
    197c:	0200      	lsls	r0, r0, #8
    197e:	e030      	b.n	19e2 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1980:	4b19      	ldr	r3, [pc, #100]	; (19e8 <system_clock_source_get_hz+0x7c>)
    1982:	6918      	ldr	r0, [r3, #16]
    1984:	e02d      	b.n	19e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1986:	4b19      	ldr	r3, [pc, #100]	; (19ec <system_clock_source_get_hz+0x80>)
    1988:	6a18      	ldr	r0, [r3, #32]
    198a:	0580      	lsls	r0, r0, #22
    198c:	0f80      	lsrs	r0, r0, #30
    198e:	4b18      	ldr	r3, [pc, #96]	; (19f0 <system_clock_source_get_hz+0x84>)
    1990:	40c3      	lsrs	r3, r0
    1992:	1c18      	adds	r0, r3, #0
    1994:	e025      	b.n	19e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1996:	4b14      	ldr	r3, [pc, #80]	; (19e8 <system_clock_source_get_hz+0x7c>)
    1998:	6958      	ldr	r0, [r3, #20]
    199a:	e022      	b.n	19e2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    199c:	4b12      	ldr	r3, [pc, #72]	; (19e8 <system_clock_source_get_hz+0x7c>)
    199e:	681b      	ldr	r3, [r3, #0]
    19a0:	2002      	movs	r0, #2
    19a2:	4018      	ands	r0, r3
    19a4:	d01d      	beq.n	19e2 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19a6:	4911      	ldr	r1, [pc, #68]	; (19ec <system_clock_source_get_hz+0x80>)
    19a8:	2210      	movs	r2, #16
    19aa:	68cb      	ldr	r3, [r1, #12]
    19ac:	421a      	tst	r2, r3
    19ae:	d0fc      	beq.n	19aa <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    19b0:	4b0d      	ldr	r3, [pc, #52]	; (19e8 <system_clock_source_get_hz+0x7c>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	075a      	lsls	r2, r3, #29
    19b6:	d513      	bpl.n	19e0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19b8:	2000      	movs	r0, #0
    19ba:	4b0e      	ldr	r3, [pc, #56]	; (19f4 <system_clock_source_get_hz+0x88>)
    19bc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    19be:	4b0a      	ldr	r3, [pc, #40]	; (19e8 <system_clock_source_get_hz+0x7c>)
    19c0:	689b      	ldr	r3, [r3, #8]
    19c2:	041b      	lsls	r3, r3, #16
    19c4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19c6:	4358      	muls	r0, r3
    19c8:	e00b      	b.n	19e2 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19ca:	2350      	movs	r3, #80	; 0x50
    19cc:	4a07      	ldr	r2, [pc, #28]	; (19ec <system_clock_source_get_hz+0x80>)
    19ce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    19d0:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19d2:	075a      	lsls	r2, r3, #29
    19d4:	d505      	bpl.n	19e2 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    19d6:	4b04      	ldr	r3, [pc, #16]	; (19e8 <system_clock_source_get_hz+0x7c>)
    19d8:	68d8      	ldr	r0, [r3, #12]
    19da:	e002      	b.n	19e2 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    19dc:	2000      	movs	r0, #0
    19de:	e000      	b.n	19e2 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    19e0:	4805      	ldr	r0, [pc, #20]	; (19f8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    19e2:	bd08      	pop	{r3, pc}
    19e4:	000024d4 	.word	0x000024d4
    19e8:	200015b8 	.word	0x200015b8
    19ec:	40000800 	.word	0x40000800
    19f0:	007a1200 	.word	0x007a1200
    19f4:	00002069 	.word	0x00002069
    19f8:	02dc6c00 	.word	0x02dc6c00

000019fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    19fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    19fe:	4b0c      	ldr	r3, [pc, #48]	; (1a30 <system_clock_source_osc8m_set_config+0x34>)
    1a00:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1a02:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1a04:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1a06:	7840      	ldrb	r0, [r0, #1]
    1a08:	2201      	movs	r2, #1
    1a0a:	4010      	ands	r0, r2
    1a0c:	0180      	lsls	r0, r0, #6
    1a0e:	2640      	movs	r6, #64	; 0x40
    1a10:	43b4      	bics	r4, r6
    1a12:	4304      	orrs	r4, r0
    1a14:	402a      	ands	r2, r5
    1a16:	01d0      	lsls	r0, r2, #7
    1a18:	2280      	movs	r2, #128	; 0x80
    1a1a:	4394      	bics	r4, r2
    1a1c:	1c22      	adds	r2, r4, #0
    1a1e:	4302      	orrs	r2, r0
    1a20:	2003      	movs	r0, #3
    1a22:	4001      	ands	r1, r0
    1a24:	0209      	lsls	r1, r1, #8
    1a26:	4803      	ldr	r0, [pc, #12]	; (1a34 <system_clock_source_osc8m_set_config+0x38>)
    1a28:	4002      	ands	r2, r0
    1a2a:	430a      	orrs	r2, r1
    1a2c:	621a      	str	r2, [r3, #32]
}
    1a2e:	bd70      	pop	{r4, r5, r6, pc}
    1a30:	40000800 	.word	0x40000800
    1a34:	fffffcff 	.word	0xfffffcff

00001a38 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a3a:	465f      	mov	r7, fp
    1a3c:	4656      	mov	r6, sl
    1a3e:	464d      	mov	r5, r9
    1a40:	4644      	mov	r4, r8
    1a42:	b4f0      	push	{r4, r5, r6, r7}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1a44:	4a25      	ldr	r2, [pc, #148]	; (1adc <system_clock_source_xosc32k_set_config+0xa4>)
    1a46:	8a94      	ldrh	r4, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    1a48:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1a4a:	7803      	ldrb	r3, [r0, #0]
    1a4c:	4259      	negs	r1, r3
    1a4e:	4159      	adcs	r1, r3
    1a50:	468a      	mov	sl, r1
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1a52:	7883      	ldrb	r3, [r0, #2]
    1a54:	469c      	mov	ip, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1a56:	78c1      	ldrb	r1, [r0, #3]
    1a58:	4688      	mov	r8, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1a5a:	7903      	ldrb	r3, [r0, #4]
    1a5c:	4699      	mov	r9, r3

	temp.bit.ONDEMAND = config->on_demand;
    1a5e:	7b46      	ldrb	r6, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1a60:	7b07      	ldrb	r7, [r0, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1a62:	7b81      	ldrb	r1, [r0, #14]
    1a64:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1a66:	6880      	ldr	r0, [r0, #8]
    1a68:	4b1d      	ldr	r3, [pc, #116]	; (1ae0 <system_clock_source_xosc32k_set_config+0xa8>)
    1a6a:	6158      	str	r0, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    1a6c:	2301      	movs	r3, #1
    1a6e:	4651      	mov	r1, sl
    1a70:	0088      	lsls	r0, r1, #2
    1a72:	2104      	movs	r1, #4
    1a74:	438c      	bics	r4, r1
    1a76:	4304      	orrs	r4, r0
    1a78:	4648      	mov	r0, r9
    1a7a:	4018      	ands	r0, r3
    1a7c:	00c0      	lsls	r0, r0, #3
    1a7e:	2108      	movs	r1, #8
    1a80:	438c      	bics	r4, r1
    1a82:	4304      	orrs	r4, r0
    1a84:	4640      	mov	r0, r8
    1a86:	4018      	ands	r0, r3
    1a88:	0100      	lsls	r0, r0, #4
    1a8a:	2110      	movs	r1, #16
    1a8c:	438c      	bics	r4, r1
    1a8e:	4304      	orrs	r4, r0
    1a90:	4660      	mov	r0, ip
    1a92:	4018      	ands	r0, r3
    1a94:	0140      	lsls	r0, r0, #5
    1a96:	2120      	movs	r1, #32
    1a98:	438c      	bics	r4, r1
    1a9a:	4304      	orrs	r4, r0
    1a9c:	1c18      	adds	r0, r3, #0
    1a9e:	4038      	ands	r0, r7
    1aa0:	0180      	lsls	r0, r0, #6
    1aa2:	2740      	movs	r7, #64	; 0x40
    1aa4:	43bc      	bics	r4, r7
    1aa6:	4304      	orrs	r4, r0
    1aa8:	1c18      	adds	r0, r3, #0
    1aaa:	4030      	ands	r0, r6
    1aac:	01c0      	lsls	r0, r0, #7
    1aae:	2680      	movs	r6, #128	; 0x80
    1ab0:	43b4      	bics	r4, r6
    1ab2:	4304      	orrs	r4, r0
    1ab4:	2007      	movs	r0, #7
    1ab6:	4028      	ands	r0, r5
    1ab8:	0200      	lsls	r0, r0, #8
    1aba:	4d0a      	ldr	r5, [pc, #40]	; (1ae4 <system_clock_source_xosc32k_set_config+0xac>)
    1abc:	402c      	ands	r4, r5
    1abe:	4304      	orrs	r4, r0
    1ac0:	4659      	mov	r1, fp
    1ac2:	400b      	ands	r3, r1
    1ac4:	0319      	lsls	r1, r3, #12
    1ac6:	4808      	ldr	r0, [pc, #32]	; (1ae8 <system_clock_source_xosc32k_set_config+0xb0>)
    1ac8:	1c23      	adds	r3, r4, #0
    1aca:	4003      	ands	r3, r0
    1acc:	430b      	orrs	r3, r1
    1ace:	8293      	strh	r3, [r2, #20]
}
    1ad0:	bc3c      	pop	{r2, r3, r4, r5}
    1ad2:	4690      	mov	r8, r2
    1ad4:	4699      	mov	r9, r3
    1ad6:	46a2      	mov	sl, r4
    1ad8:	46ab      	mov	fp, r5
    1ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1adc:	40000800 	.word	0x40000800
    1ae0:	200015b8 	.word	0x200015b8
    1ae4:	fffff8ff 	.word	0xfffff8ff
    1ae8:	ffffefff 	.word	0xffffefff

00001aec <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    1aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1aee:	1c04      	adds	r4, r0, #0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    1af0:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    1af2:	7d03      	ldrb	r3, [r0, #20]
    1af4:	2b01      	cmp	r3, #1
    1af6:	d106      	bne.n	1b06 <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
    1af8:	8a01      	ldrh	r1, [r0, #16]
    1afa:	3101      	adds	r1, #1
    1afc:	0049      	lsls	r1, r1, #1
    1afe:	1c28      	adds	r0, r5, #0
    1b00:	4b1e      	ldr	r3, [pc, #120]	; (1b7c <system_clock_source_dpll_set_config+0x90>)
    1b02:	4798      	blx	r3
    1b04:	1c05      	adds	r5, r0, #0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    1b06:	68a3      	ldr	r3, [r4, #8]
    1b08:	0118      	lsls	r0, r3, #4
    1b0a:	1c29      	adds	r1, r5, #0
    1b0c:	4b1b      	ldr	r3, [pc, #108]	; (1b7c <system_clock_source_dpll_set_config+0x90>)
    1b0e:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    1b10:	220f      	movs	r2, #15
    1b12:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    1b14:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    1b16:	7866      	ldrb	r6, [r4, #1]
    1b18:	01b6      	lsls	r6, r6, #6
    1b1a:	7823      	ldrb	r3, [r4, #0]
    1b1c:	01db      	lsls	r3, r3, #7
    1b1e:	431e      	orrs	r6, r3
    1b20:	b2f6      	uxtb	r6, r6
    1b22:	4b17      	ldr	r3, [pc, #92]	; (1b80 <system_clock_source_dpll_set_config+0x94>)
    1b24:	2144      	movs	r1, #68	; 0x44
    1b26:	545e      	strb	r6, [r3, r1]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1b28:	0416      	lsls	r6, r2, #16
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;
    1b2a:	1e41      	subs	r1, r0, #1
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    1b2c:	0509      	lsls	r1, r1, #20
    1b2e:	0d09      	lsrs	r1, r1, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1b30:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    1b32:	6499      	str	r1, [r3, #72]	; 0x48
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1b34:	78e6      	ldrb	r6, [r4, #3]
    1b36:	00f6      	lsls	r6, r6, #3
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1b38:	78a1      	ldrb	r1, [r4, #2]
    1b3a:	0309      	lsls	r1, r1, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1b3c:	4331      	orrs	r1, r6
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1b3e:	7926      	ldrb	r6, [r4, #4]
    1b40:	00b6      	lsls	r6, r6, #2
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1b42:	4331      	orrs	r1, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    1b44:	7ca6      	ldrb	r6, [r4, #18]
    1b46:	2703      	movs	r7, #3
    1b48:	403e      	ands	r6, r7
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1b4a:	4331      	orrs	r1, r6
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1b4c:	8a26      	ldrh	r6, [r4, #16]
    1b4e:	0436      	lsls	r6, r6, #16
    1b50:	4f0c      	ldr	r7, [pc, #48]	; (1b84 <system_clock_source_dpll_set_config+0x98>)
    1b52:	403e      	ands	r6, r7
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1b54:	4331      	orrs	r1, r6
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1b56:	7ce7      	ldrb	r7, [r4, #19]
    1b58:	023f      	lsls	r7, r7, #8
    1b5a:	26e0      	movs	r6, #224	; 0xe0
    1b5c:	00f6      	lsls	r6, r6, #3
    1b5e:	403e      	ands	r6, r7
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1b60:	4331      	orrs	r1, r6

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1b62:	7d24      	ldrb	r4, [r4, #20]
    1b64:	0124      	lsls	r4, r4, #4
    1b66:	2630      	movs	r6, #48	; 0x30
    1b68:	4034      	ands	r4, r6
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1b6a:	4321      	orrs	r1, r4

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    1b6c:	64d9      	str	r1, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    1b6e:	0100      	lsls	r0, r0, #4
    1b70:	1812      	adds	r2, r2, r0
    1b72:	4355      	muls	r5, r2
    1b74:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    1b76:	4b04      	ldr	r3, [pc, #16]	; (1b88 <system_clock_source_dpll_set_config+0x9c>)
    1b78:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    1b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b7c:	00002211 	.word	0x00002211
    1b80:	40000800 	.word	0x40000800
    1b84:	07ff0000 	.word	0x07ff0000
    1b88:	200015b8 	.word	0x200015b8

00001b8c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1b8c:	2808      	cmp	r0, #8
    1b8e:	d849      	bhi.n	1c24 <system_clock_source_enable+0x98>
    1b90:	0080      	lsls	r0, r0, #2
    1b92:	4b25      	ldr	r3, [pc, #148]	; (1c28 <system_clock_source_enable+0x9c>)
    1b94:	581b      	ldr	r3, [r3, r0]
    1b96:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1b98:	2000      	movs	r0, #0
    1b9a:	e044      	b.n	1c26 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1b9c:	4b23      	ldr	r3, [pc, #140]	; (1c2c <system_clock_source_enable+0xa0>)
    1b9e:	6a19      	ldr	r1, [r3, #32]
    1ba0:	2202      	movs	r2, #2
    1ba2:	430a      	orrs	r2, r1
    1ba4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1ba6:	2000      	movs	r0, #0
    1ba8:	e03d      	b.n	1c26 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1baa:	4b20      	ldr	r3, [pc, #128]	; (1c2c <system_clock_source_enable+0xa0>)
    1bac:	6999      	ldr	r1, [r3, #24]
    1bae:	2202      	movs	r2, #2
    1bb0:	430a      	orrs	r2, r1
    1bb2:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1bb4:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1bb6:	e036      	b.n	1c26 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1bb8:	4b1c      	ldr	r3, [pc, #112]	; (1c2c <system_clock_source_enable+0xa0>)
    1bba:	8a19      	ldrh	r1, [r3, #16]
    1bbc:	2202      	movs	r2, #2
    1bbe:	430a      	orrs	r2, r1
    1bc0:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1bc2:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1bc4:	e02f      	b.n	1c26 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1bc6:	4b19      	ldr	r3, [pc, #100]	; (1c2c <system_clock_source_enable+0xa0>)
    1bc8:	8a99      	ldrh	r1, [r3, #20]
    1bca:	2202      	movs	r2, #2
    1bcc:	430a      	orrs	r2, r1
    1bce:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1bd0:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1bd2:	e028      	b.n	1c26 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1bd4:	4a16      	ldr	r2, [pc, #88]	; (1c30 <system_clock_source_enable+0xa4>)
    1bd6:	6811      	ldr	r1, [r2, #0]
    1bd8:	2302      	movs	r3, #2
    1bda:	4319      	orrs	r1, r3
    1bdc:	6011      	str	r1, [r2, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1bde:	4a13      	ldr	r2, [pc, #76]	; (1c2c <system_clock_source_enable+0xa0>)
    1be0:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1be2:	1c11      	adds	r1, r2, #0
    1be4:	2210      	movs	r2, #16
    1be6:	68cb      	ldr	r3, [r1, #12]
    1be8:	421a      	tst	r2, r3
    1bea:	d0fc      	beq.n	1be6 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1bec:	4a10      	ldr	r2, [pc, #64]	; (1c30 <system_clock_source_enable+0xa4>)
    1bee:	6891      	ldr	r1, [r2, #8]
    1bf0:	4b0e      	ldr	r3, [pc, #56]	; (1c2c <system_clock_source_enable+0xa0>)
    1bf2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1bf4:	6852      	ldr	r2, [r2, #4]
    1bf6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1bf8:	2200      	movs	r2, #0
    1bfa:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bfc:	1c19      	adds	r1, r3, #0
    1bfe:	2210      	movs	r2, #16
    1c00:	68cb      	ldr	r3, [r1, #12]
    1c02:	421a      	tst	r2, r3
    1c04:	d0fc      	beq.n	1c00 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1c06:	4b0a      	ldr	r3, [pc, #40]	; (1c30 <system_clock_source_enable+0xa4>)
    1c08:	681a      	ldr	r2, [r3, #0]
    1c0a:	b292      	uxth	r2, r2
    1c0c:	4b07      	ldr	r3, [pc, #28]	; (1c2c <system_clock_source_enable+0xa0>)
    1c0e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1c10:	2000      	movs	r0, #0
    1c12:	e008      	b.n	1c26 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1c14:	4a05      	ldr	r2, [pc, #20]	; (1c2c <system_clock_source_enable+0xa0>)
    1c16:	2344      	movs	r3, #68	; 0x44
    1c18:	5cd0      	ldrb	r0, [r2, r3]
    1c1a:	2102      	movs	r1, #2
    1c1c:	4301      	orrs	r1, r0
    1c1e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1c20:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1c22:	e000      	b.n	1c26 <system_clock_source_enable+0x9a>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c24:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1c26:	4770      	bx	lr
    1c28:	000024f8 	.word	0x000024f8
    1c2c:	40000800 	.word	0x40000800
    1c30:	200015b8 	.word	0x200015b8

00001c34 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1c34:	2808      	cmp	r0, #8
    1c36:	d832      	bhi.n	1c9e <system_clock_source_disable+0x6a>
    1c38:	0080      	lsls	r0, r0, #2
    1c3a:	4b1a      	ldr	r3, [pc, #104]	; (1ca4 <system_clock_source_disable+0x70>)
    1c3c:	581b      	ldr	r3, [r3, r0]
    1c3e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
    1c40:	4b19      	ldr	r3, [pc, #100]	; (1ca8 <system_clock_source_disable+0x74>)
    1c42:	6a1a      	ldr	r2, [r3, #32]
    1c44:	2102      	movs	r1, #2
    1c46:	438a      	bics	r2, r1
    1c48:	621a      	str	r2, [r3, #32]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1c4a:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
		break;
    1c4c:	e028      	b.n	1ca0 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1c4e:	4b16      	ldr	r3, [pc, #88]	; (1ca8 <system_clock_source_disable+0x74>)
    1c50:	699a      	ldr	r2, [r3, #24]
    1c52:	2102      	movs	r1, #2
    1c54:	438a      	bics	r2, r1
    1c56:	619a      	str	r2, [r3, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1c58:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg &= ~SYSCTRL_OSC8M_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
		break;
    1c5a:	e021      	b.n	1ca0 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
    1c5c:	4b12      	ldr	r3, [pc, #72]	; (1ca8 <system_clock_source_disable+0x74>)
    1c5e:	8a1a      	ldrh	r2, [r3, #16]
    1c60:	2102      	movs	r1, #2
    1c62:	438a      	bics	r2, r1
    1c64:	821a      	strh	r2, [r3, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1c66:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
		break;
    1c68:	e01a      	b.n	1ca0 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg &= ~SYSCTRL_XOSC32K_ENABLE;
    1c6a:	4b0f      	ldr	r3, [pc, #60]	; (1ca8 <system_clock_source_disable+0x74>)
    1c6c:	8a9a      	ldrh	r2, [r3, #20]
    1c6e:	2102      	movs	r1, #2
    1c70:	438a      	bics	r2, r1
    1c72:	829a      	strh	r2, [r3, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1c74:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg &= ~SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg &= ~SYSCTRL_XOSC32K_ENABLE;
		break;
    1c76:	e013      	b.n	1ca0 <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~SYSCTRL_DFLLCTRL_ENABLE;
    1c78:	4b0c      	ldr	r3, [pc, #48]	; (1cac <system_clock_source_disable+0x78>)
    1c7a:	681a      	ldr	r2, [r3, #0]
    1c7c:	2102      	movs	r1, #2
    1c7e:	438a      	bics	r2, r1
    1c80:	601a      	str	r2, [r3, #0]
		SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1c82:	681a      	ldr	r2, [r3, #0]
    1c84:	b292      	uxth	r2, r2
    1c86:	4b08      	ldr	r3, [pc, #32]	; (1ca8 <system_clock_source_disable+0x74>)
    1c88:	849a      	strh	r2, [r3, #36]	; 0x24
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1c8a:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~SYSCTRL_DFLLCTRL_ENABLE;
		SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    1c8c:	e008      	b.n	1ca0 <system_clock_source_disable+0x6c>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg &= ~SYSCTRL_DPLLCTRLA_ENABLE;
    1c8e:	4a06      	ldr	r2, [pc, #24]	; (1ca8 <system_clock_source_disable+0x74>)
    1c90:	2344      	movs	r3, #68	; 0x44
    1c92:	5cd1      	ldrb	r1, [r2, r3]
    1c94:	2002      	movs	r0, #2
    1c96:	4381      	bics	r1, r0
    1c98:	54d1      	strb	r1, [r2, r3]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    1c9a:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg &= ~SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1c9c:	e000      	b.n	1ca0 <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c9e:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    1ca0:	4770      	bx	lr
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	0000251c 	.word	0x0000251c
    1ca8:	40000800 	.word	0x40000800
    1cac:	200015b8 	.word	0x200015b8

00001cb0 <system_clock_source_is_ready>:
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
	uint32_t mask = 0;

	switch (clock_source) {
    1cb0:	2808      	cmp	r0, #8
    1cb2:	d820      	bhi.n	1cf6 <system_clock_source_is_ready+0x46>
    1cb4:	0080      	lsls	r0, r0, #2
    1cb6:	4b11      	ldr	r3, [pc, #68]	; (1cfc <system_clock_source_is_ready+0x4c>)
    1cb8:	581b      	ldr	r3, [r3, r0]
    1cba:	469f      	mov	pc, r3
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    1cbc:	2001      	movs	r0, #1
    1cbe:	e01b      	b.n	1cf8 <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    1cc0:	2301      	movs	r3, #1
		break;
    1cc2:	e010      	b.n	1ce6 <system_clock_source_is_ready+0x36>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    1cc4:	2302      	movs	r3, #2
		break;
    1cc6:	e00e      	b.n	1ce6 <system_clock_source_is_ready+0x36>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    1cc8:	2310      	movs	r3, #16
		}
		break;
    1cca:	e00c      	b.n	1ce6 <system_clock_source_is_ready+0x36>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    1ccc:	2350      	movs	r3, #80	; 0x50
    1cce:	4a0c      	ldr	r2, [pc, #48]	; (1d00 <system_clock_source_is_ready+0x50>)
    1cd0:	5cd0      	ldrb	r0, [r2, r3]
    1cd2:	2303      	movs	r3, #3
    1cd4:	4018      	ands	r0, r3
    1cd6:	3803      	subs	r0, #3
    1cd8:	4243      	negs	r3, r0
    1cda:	4158      	adcs	r0, r3
    1cdc:	b2c0      	uxtb	r0, r0
    1cde:	e00b      	b.n	1cf8 <system_clock_source_is_ready+0x48>
{
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    1ce0:	2308      	movs	r3, #8
    1ce2:	e000      	b.n	1ce6 <system_clock_source_is_ready+0x36>
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    1ce4:	2304      	movs	r3, #4

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1ce6:	4a06      	ldr	r2, [pc, #24]	; (1d00 <system_clock_source_is_ready+0x50>)
    1ce8:	68d0      	ldr	r0, [r2, #12]
    1cea:	4018      	ands	r0, r3
    1cec:	1ac0      	subs	r0, r0, r3
    1cee:	4243      	negs	r3, r0
    1cf0:	4158      	adcs	r0, r3
    1cf2:	b2c0      	uxtb	r0, r0
    1cf4:	e000      	b.n	1cf8 <system_clock_source_is_ready+0x48>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;

	default:
		return false;
    1cf6:	2000      	movs	r0, #0
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
}
    1cf8:	4770      	bx	lr
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	00002540 	.word	0x00002540
    1d00:	40000800 	.word	0x40000800

00001d04 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1d04:	b570      	push	{r4, r5, r6, lr}
    1d06:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1d08:	22c2      	movs	r2, #194	; 0xc2
    1d0a:	00d2      	lsls	r2, r2, #3
    1d0c:	4b42      	ldr	r3, [pc, #264]	; (1e18 <system_clock_init+0x114>)
    1d0e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1d10:	4a42      	ldr	r2, [pc, #264]	; (1e1c <system_clock_init+0x118>)
    1d12:	6851      	ldr	r1, [r2, #4]
    1d14:	231e      	movs	r3, #30
    1d16:	4399      	bics	r1, r3
    1d18:	2302      	movs	r3, #2
    1d1a:	4319      	orrs	r1, r3
    1d1c:	6051      	str	r1, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1d1e:	466a      	mov	r2, sp
    1d20:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d22:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1d24:	4d3e      	ldr	r5, [pc, #248]	; (1e20 <system_clock_init+0x11c>)
    1d26:	b2e0      	uxtb	r0, r4
    1d28:	4669      	mov	r1, sp
    1d2a:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d2c:	3401      	adds	r4, #1
    1d2e:	2c25      	cmp	r4, #37	; 0x25
    1d30:	d1f9      	bne.n	1d26 <system_clock_init+0x22>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1d32:	a80a      	add	r0, sp, #40	; 0x28
    1d34:	2300      	movs	r3, #0
    1d36:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    1d38:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1d3a:	2280      	movs	r2, #128	; 0x80
    1d3c:	0212      	lsls	r2, r2, #8
    1d3e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1d40:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1d42:	2201      	movs	r2, #1
    1d44:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1d46:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1d48:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1d4a:	2206      	movs	r2, #6
    1d4c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1d4e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1d50:	4b34      	ldr	r3, [pc, #208]	; (1e24 <system_clock_init+0x120>)
    1d52:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1d54:	2005      	movs	r0, #5
    1d56:	4b34      	ldr	r3, [pc, #208]	; (1e28 <system_clock_init+0x124>)
    1d58:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1d5a:	492f      	ldr	r1, [pc, #188]	; (1e18 <system_clock_init+0x114>)
    1d5c:	2202      	movs	r2, #2
    1d5e:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1d60:	421a      	tst	r2, r3
    1d62:	d0fc      	beq.n	1d5e <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1d64:	4b2c      	ldr	r3, [pc, #176]	; (1e18 <system_clock_init+0x114>)
    1d66:	8a99      	ldrh	r1, [r3, #20]
    1d68:	2280      	movs	r2, #128	; 0x80
    1d6a:	430a      	orrs	r2, r1
    1d6c:	829a      	strh	r2, [r3, #20]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1d6e:	a809      	add	r0, sp, #36	; 0x24
    1d70:	2400      	movs	r4, #0
    1d72:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1d74:	2501      	movs	r5, #1
    1d76:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1d78:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1d7a:	4b2c      	ldr	r3, [pc, #176]	; (1e2c <system_clock_init+0x128>)
    1d7c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1d7e:	2006      	movs	r0, #6
    1d80:	4e29      	ldr	r6, [pc, #164]	; (1e28 <system_clock_init+0x124>)
    1d82:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1d84:	4b2a      	ldr	r3, [pc, #168]	; (1e30 <system_clock_init+0x12c>)
    1d86:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1d88:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1d8a:	466b      	mov	r3, sp
    1d8c:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1d8e:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1d90:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1d92:	2304      	movs	r3, #4
    1d94:	466a      	mov	r2, sp
    1d96:	7013      	strb	r3, [r2, #0]
    1d98:	2001      	movs	r0, #1
    1d9a:	4669      	mov	r1, sp
    1d9c:	4b25      	ldr	r3, [pc, #148]	; (1e34 <system_clock_init+0x130>)
    1d9e:	4798      	blx	r3
    1da0:	2001      	movs	r0, #1
    1da2:	4b25      	ldr	r3, [pc, #148]	; (1e38 <system_clock_init+0x134>)
    1da4:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    1da6:	a803      	add	r0, sp, #12
    1da8:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    1daa:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    1dac:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    1dae:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    1db0:	4b22      	ldr	r3, [pc, #136]	; (1e3c <system_clock_init+0x138>)
    1db2:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
    1db4:	2380      	movs	r3, #128	; 0x80
    1db6:	021b      	lsls	r3, r3, #8
    1db8:	60c3      	str	r3, [r0, #12]
	config->reference_divider   = 1;
    1dba:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    1dbc:	7504      	strb	r4, [r0, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    1dbe:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    1dc0:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    1dc2:	7004      	strb	r4, [r0, #0]
	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    1dc4:	4b1e      	ldr	r3, [pc, #120]	; (1e40 <system_clock_init+0x13c>)
    1dc6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    1dc8:	2008      	movs	r0, #8
    1dca:	47b0      	blx	r6
		}
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    1dcc:	4812      	ldr	r0, [pc, #72]	; (1e18 <system_clock_init+0x114>)
    1dce:	2150      	movs	r1, #80	; 0x50
    1dd0:	2203      	movs	r2, #3
    1dd2:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    1dd4:	4013      	ands	r3, r2
    1dd6:	2b03      	cmp	r3, #3
    1dd8:	d1fb      	bne.n	1dd2 <system_clock_init+0xce>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    1dda:	4a0f      	ldr	r2, [pc, #60]	; (1e18 <system_clock_init+0x114>)
    1ddc:	2344      	movs	r3, #68	; 0x44
    1dde:	5cd0      	ldrb	r0, [r2, r3]
    1de0:	2180      	movs	r1, #128	; 0x80
    1de2:	4249      	negs	r1, r1
    1de4:	4301      	orrs	r1, r0
    1de6:	54d1      	strb	r1, [r2, r3]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1de8:	4a16      	ldr	r2, [pc, #88]	; (1e44 <system_clock_init+0x140>)
    1dea:	2300      	movs	r3, #0
    1dec:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1dee:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1df0:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1df2:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1df4:	2201      	movs	r2, #1
    1df6:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    1df8:	466a      	mov	r2, sp
    1dfa:	7053      	strb	r3, [r2, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1dfc:	7213      	strb	r3, [r2, #8]
	config->output_enable      = false;
    1dfe:	7253      	strb	r3, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e00:	2308      	movs	r3, #8
    1e02:	7013      	strb	r3, [r2, #0]
    1e04:	2000      	movs	r0, #0
    1e06:	4669      	mov	r1, sp
    1e08:	4b0a      	ldr	r3, [pc, #40]	; (1e34 <system_clock_init+0x130>)
    1e0a:	4798      	blx	r3
    1e0c:	2000      	movs	r0, #0
    1e0e:	4b0a      	ldr	r3, [pc, #40]	; (1e38 <system_clock_init+0x134>)
    1e10:	4798      	blx	r3
#endif
}
    1e12:	b00e      	add	sp, #56	; 0x38
    1e14:	bd70      	pop	{r4, r5, r6, pc}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	40000800 	.word	0x40000800
    1e1c:	41004000 	.word	0x41004000
    1e20:	0000204d 	.word	0x0000204d
    1e24:	00001a39 	.word	0x00001a39
    1e28:	00001b8d 	.word	0x00001b8d
    1e2c:	000019fd 	.word	0x000019fd
    1e30:	00001e49 	.word	0x00001e49
    1e34:	00001e6d 	.word	0x00001e6d
    1e38:	00001f21 	.word	0x00001f21
    1e3c:	02dc6c00 	.word	0x02dc6c00
    1e40:	00001aed 	.word	0x00001aed
    1e44:	40000400 	.word	0x40000400

00001e48 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1e48:	4b06      	ldr	r3, [pc, #24]	; (1e64 <system_gclk_init+0x1c>)
    1e4a:	6999      	ldr	r1, [r3, #24]
    1e4c:	2208      	movs	r2, #8
    1e4e:	430a      	orrs	r2, r1
    1e50:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e52:	2201      	movs	r2, #1
    1e54:	4b04      	ldr	r3, [pc, #16]	; (1e68 <system_gclk_init+0x20>)
    1e56:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1e58:	1c19      	adds	r1, r3, #0
    1e5a:	780b      	ldrb	r3, [r1, #0]
    1e5c:	4213      	tst	r3, r2
    1e5e:	d1fc      	bne.n	1e5a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1e60:	4770      	bx	lr
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	40000400 	.word	0x40000400
    1e68:	40000c00 	.word	0x40000c00

00001e6c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e6e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1e70:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1e72:	780d      	ldrb	r5, [r1, #0]
    1e74:	022d      	lsls	r5, r5, #8
    1e76:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1e78:	784b      	ldrb	r3, [r1, #1]
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d002      	beq.n	1e84 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1e7e:	2380      	movs	r3, #128	; 0x80
    1e80:	02db      	lsls	r3, r3, #11
    1e82:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1e84:	7a4b      	ldrb	r3, [r1, #9]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d002      	beq.n	1e90 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1e8a:	2380      	movs	r3, #128	; 0x80
    1e8c:	031b      	lsls	r3, r3, #12
    1e8e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1e90:	684c      	ldr	r4, [r1, #4]
    1e92:	2c01      	cmp	r4, #1
    1e94:	d917      	bls.n	1ec6 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1e96:	1e63      	subs	r3, r4, #1
    1e98:	421c      	tst	r4, r3
    1e9a:	d10f      	bne.n	1ebc <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1e9c:	2c02      	cmp	r4, #2
    1e9e:	d906      	bls.n	1eae <system_gclk_gen_set_config+0x42>
    1ea0:	2302      	movs	r3, #2
    1ea2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1ea4:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1ea6:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1ea8:	429c      	cmp	r4, r3
    1eaa:	d8fb      	bhi.n	1ea4 <system_gclk_gen_set_config+0x38>
    1eac:	e000      	b.n	1eb0 <system_gclk_gen_set_config+0x44>
    1eae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1eb0:	0217      	lsls	r7, r2, #8
    1eb2:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1eb4:	2380      	movs	r3, #128	; 0x80
    1eb6:	035b      	lsls	r3, r3, #13
    1eb8:	431d      	orrs	r5, r3
    1eba:	e004      	b.n	1ec6 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ebc:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1ebe:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1ec0:	2380      	movs	r3, #128	; 0x80
    1ec2:	029b      	lsls	r3, r3, #10
    1ec4:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ec6:	7a0b      	ldrb	r3, [r1, #8]
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d002      	beq.n	1ed2 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ecc:	2380      	movs	r3, #128	; 0x80
    1ece:	039b      	lsls	r3, r3, #14
    1ed0:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ed2:	4a0f      	ldr	r2, [pc, #60]	; (1f10 <system_gclk_gen_set_config+0xa4>)
    1ed4:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1ed6:	b25b      	sxtb	r3, r3
    1ed8:	2b00      	cmp	r3, #0
    1eda:	dbfb      	blt.n	1ed4 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1edc:	4b0d      	ldr	r3, [pc, #52]	; (1f14 <system_gclk_gen_set_config+0xa8>)
    1ede:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ee0:	4b0d      	ldr	r3, [pc, #52]	; (1f18 <system_gclk_gen_set_config+0xac>)
    1ee2:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ee4:	4a0a      	ldr	r2, [pc, #40]	; (1f10 <system_gclk_gen_set_config+0xa4>)
    1ee6:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1ee8:	b25b      	sxtb	r3, r3
    1eea:	2b00      	cmp	r3, #0
    1eec:	dbfb      	blt.n	1ee6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1eee:	4b08      	ldr	r3, [pc, #32]	; (1f10 <system_gclk_gen_set_config+0xa4>)
    1ef0:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ef2:	1c1a      	adds	r2, r3, #0
    1ef4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1ef6:	b25b      	sxtb	r3, r3
    1ef8:	2b00      	cmp	r3, #0
    1efa:	dbfb      	blt.n	1ef4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1efc:	4b04      	ldr	r3, [pc, #16]	; (1f10 <system_gclk_gen_set_config+0xa4>)
    1efe:	6859      	ldr	r1, [r3, #4]
    1f00:	2280      	movs	r2, #128	; 0x80
    1f02:	0252      	lsls	r2, r2, #9
    1f04:	400a      	ands	r2, r1
    1f06:	4315      	orrs	r5, r2
    1f08:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f0a:	4b04      	ldr	r3, [pc, #16]	; (1f1c <system_gclk_gen_set_config+0xb0>)
    1f0c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f10:	40000c00 	.word	0x40000c00
    1f14:	000020cd 	.word	0x000020cd
    1f18:	40000c08 	.word	0x40000c08
    1f1c:	00002109 	.word	0x00002109

00001f20 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f20:	b510      	push	{r4, lr}
    1f22:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f24:	4a0b      	ldr	r2, [pc, #44]	; (1f54 <system_gclk_gen_enable+0x34>)
    1f26:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1f28:	b25b      	sxtb	r3, r3
    1f2a:	2b00      	cmp	r3, #0
    1f2c:	dbfb      	blt.n	1f26 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f2e:	4b0a      	ldr	r3, [pc, #40]	; (1f58 <system_gclk_gen_enable+0x38>)
    1f30:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f32:	4b0a      	ldr	r3, [pc, #40]	; (1f5c <system_gclk_gen_enable+0x3c>)
    1f34:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f36:	4a07      	ldr	r2, [pc, #28]	; (1f54 <system_gclk_gen_enable+0x34>)
    1f38:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1f3a:	b25b      	sxtb	r3, r3
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	dbfb      	blt.n	1f38 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f40:	4b04      	ldr	r3, [pc, #16]	; (1f54 <system_gclk_gen_enable+0x34>)
    1f42:	6859      	ldr	r1, [r3, #4]
    1f44:	2280      	movs	r2, #128	; 0x80
    1f46:	0252      	lsls	r2, r2, #9
    1f48:	430a      	orrs	r2, r1
    1f4a:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f4c:	4b04      	ldr	r3, [pc, #16]	; (1f60 <system_gclk_gen_enable+0x40>)
    1f4e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f50:	bd10      	pop	{r4, pc}
    1f52:	46c0      	nop			; (mov r8, r8)
    1f54:	40000c00 	.word	0x40000c00
    1f58:	000020cd 	.word	0x000020cd
    1f5c:	40000c04 	.word	0x40000c04
    1f60:	00002109 	.word	0x00002109

00001f64 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1f64:	b570      	push	{r4, r5, r6, lr}
    1f66:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f68:	4a1a      	ldr	r2, [pc, #104]	; (1fd4 <system_gclk_gen_get_hz+0x70>)
    1f6a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1f6c:	b25b      	sxtb	r3, r3
    1f6e:	2b00      	cmp	r3, #0
    1f70:	dbfb      	blt.n	1f6a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f72:	4b19      	ldr	r3, [pc, #100]	; (1fd8 <system_gclk_gen_get_hz+0x74>)
    1f74:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f76:	4b19      	ldr	r3, [pc, #100]	; (1fdc <system_gclk_gen_get_hz+0x78>)
    1f78:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f7a:	4a16      	ldr	r2, [pc, #88]	; (1fd4 <system_gclk_gen_get_hz+0x70>)
    1f7c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1f7e:	b25b      	sxtb	r3, r3
    1f80:	2b00      	cmp	r3, #0
    1f82:	dbfb      	blt.n	1f7c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1f84:	4e13      	ldr	r6, [pc, #76]	; (1fd4 <system_gclk_gen_get_hz+0x70>)
    1f86:	6870      	ldr	r0, [r6, #4]
    1f88:	04c0      	lsls	r0, r0, #19
    1f8a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1f8c:	4b14      	ldr	r3, [pc, #80]	; (1fe0 <system_gclk_gen_get_hz+0x7c>)
    1f8e:	4798      	blx	r3
    1f90:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f92:	4b12      	ldr	r3, [pc, #72]	; (1fdc <system_gclk_gen_get_hz+0x78>)
    1f94:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1f96:	6876      	ldr	r6, [r6, #4]
    1f98:	02f6      	lsls	r6, r6, #11
    1f9a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f9c:	4b11      	ldr	r3, [pc, #68]	; (1fe4 <system_gclk_gen_get_hz+0x80>)
    1f9e:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fa0:	4a0c      	ldr	r2, [pc, #48]	; (1fd4 <system_gclk_gen_get_hz+0x70>)
    1fa2:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1fa4:	b25b      	sxtb	r3, r3
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	dbfb      	blt.n	1fa2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1faa:	4b0a      	ldr	r3, [pc, #40]	; (1fd4 <system_gclk_gen_get_hz+0x70>)
    1fac:	689c      	ldr	r4, [r3, #8]
    1fae:	0a24      	lsrs	r4, r4, #8
    1fb0:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1fb2:	4b0d      	ldr	r3, [pc, #52]	; (1fe8 <system_gclk_gen_get_hz+0x84>)
    1fb4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1fb6:	2e00      	cmp	r6, #0
    1fb8:	d107      	bne.n	1fca <system_gclk_gen_get_hz+0x66>
    1fba:	2c01      	cmp	r4, #1
    1fbc:	d907      	bls.n	1fce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1fbe:	1c28      	adds	r0, r5, #0
    1fc0:	1c21      	adds	r1, r4, #0
    1fc2:	4b0a      	ldr	r3, [pc, #40]	; (1fec <system_gclk_gen_get_hz+0x88>)
    1fc4:	4798      	blx	r3
    1fc6:	1c05      	adds	r5, r0, #0
    1fc8:	e001      	b.n	1fce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1fca:	3401      	adds	r4, #1
    1fcc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1fce:	1c28      	adds	r0, r5, #0
    1fd0:	bd70      	pop	{r4, r5, r6, pc}
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	40000c00 	.word	0x40000c00
    1fd8:	000020cd 	.word	0x000020cd
    1fdc:	40000c04 	.word	0x40000c04
    1fe0:	0000196d 	.word	0x0000196d
    1fe4:	40000c08 	.word	0x40000c08
    1fe8:	00002109 	.word	0x00002109
    1fec:	00002211 	.word	0x00002211

00001ff0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ff0:	b510      	push	{r4, lr}
    1ff2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1ff4:	4b0f      	ldr	r3, [pc, #60]	; (2034 <STACK_SIZE+0x34>)
    1ff6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ff8:	4b0f      	ldr	r3, [pc, #60]	; (2038 <STACK_SIZE+0x38>)
    1ffa:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1ffc:	4b0f      	ldr	r3, [pc, #60]	; (203c <STACK_SIZE+0x3c>)
    1ffe:	8858      	ldrh	r0, [r3, #2]
    2000:	0500      	lsls	r0, r0, #20
    2002:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2004:	8859      	ldrh	r1, [r3, #2]
    2006:	4a0e      	ldr	r2, [pc, #56]	; (2040 <STACK_SIZE+0x40>)
    2008:	400a      	ands	r2, r1
    200a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    200c:	8859      	ldrh	r1, [r3, #2]
    200e:	4a0d      	ldr	r2, [pc, #52]	; (2044 <STACK_SIZE+0x44>)
    2010:	400a      	ands	r2, r1
    2012:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2014:	1c19      	adds	r1, r3, #0
    2016:	2280      	movs	r2, #128	; 0x80
    2018:	01d2      	lsls	r2, r2, #7
    201a:	884b      	ldrh	r3, [r1, #2]
    201c:	4213      	tst	r3, r2
    201e:	d1fc      	bne.n	201a <STACK_SIZE+0x1a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2020:	4b06      	ldr	r3, [pc, #24]	; (203c <STACK_SIZE+0x3c>)
    2022:	0201      	lsls	r1, r0, #8
    2024:	8858      	ldrh	r0, [r3, #2]
    2026:	4a06      	ldr	r2, [pc, #24]	; (2040 <STACK_SIZE+0x40>)
    2028:	4002      	ands	r2, r0
    202a:	430a      	orrs	r2, r1
    202c:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    202e:	4b06      	ldr	r3, [pc, #24]	; (2048 <STACK_SIZE+0x48>)
    2030:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2032:	bd10      	pop	{r4, pc}
    2034:	000020cd 	.word	0x000020cd
    2038:	40000c02 	.word	0x40000c02
    203c:	40000c00 	.word	0x40000c00
    2040:	fffff0ff 	.word	0xfffff0ff
    2044:	ffffbfff 	.word	0xffffbfff
    2048:	00002109 	.word	0x00002109

0000204c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    204c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    204e:	780c      	ldrb	r4, [r1, #0]
    2050:	0224      	lsls	r4, r4, #8
    2052:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2054:	4b02      	ldr	r3, [pc, #8]	; (2060 <system_gclk_chan_set_config+0x14>)
    2056:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2058:	b2a4      	uxth	r4, r4
    205a:	4b02      	ldr	r3, [pc, #8]	; (2064 <system_gclk_chan_set_config+0x18>)
    205c:	805c      	strh	r4, [r3, #2]
}
    205e:	bd10      	pop	{r4, pc}
    2060:	00001ff1 	.word	0x00001ff1
    2064:	40000c00 	.word	0x40000c00

00002068 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2068:	b510      	push	{r4, lr}
    206a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    206c:	4b06      	ldr	r3, [pc, #24]	; (2088 <system_gclk_chan_get_hz+0x20>)
    206e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2070:	4b06      	ldr	r3, [pc, #24]	; (208c <system_gclk_chan_get_hz+0x24>)
    2072:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2074:	4b06      	ldr	r3, [pc, #24]	; (2090 <system_gclk_chan_get_hz+0x28>)
    2076:	885c      	ldrh	r4, [r3, #2]
    2078:	0524      	lsls	r4, r4, #20
    207a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    207c:	4b05      	ldr	r3, [pc, #20]	; (2094 <system_gclk_chan_get_hz+0x2c>)
    207e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2080:	1c20      	adds	r0, r4, #0
    2082:	4b05      	ldr	r3, [pc, #20]	; (2098 <system_gclk_chan_get_hz+0x30>)
    2084:	4798      	blx	r3
}
    2086:	bd10      	pop	{r4, pc}
    2088:	000020cd 	.word	0x000020cd
    208c:	40000c02 	.word	0x40000c02
    2090:	40000c00 	.word	0x40000c00
    2094:	00002109 	.word	0x00002109
    2098:	00001f65 	.word	0x00001f65

0000209c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    209c:	4770      	bx	lr
    209e:	46c0      	nop			; (mov r8, r8)

000020a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    20a0:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    20a2:	4b05      	ldr	r3, [pc, #20]	; (20b8 <system_init+0x18>)
    20a4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    20a6:	4b05      	ldr	r3, [pc, #20]	; (20bc <system_init+0x1c>)
    20a8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    20aa:	4b05      	ldr	r3, [pc, #20]	; (20c0 <system_init+0x20>)
    20ac:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    20ae:	4b05      	ldr	r3, [pc, #20]	; (20c4 <system_init+0x24>)
    20b0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    20b2:	4b05      	ldr	r3, [pc, #20]	; (20c8 <system_init+0x28>)
    20b4:	4798      	blx	r3
}
    20b6:	bd08      	pop	{r3, pc}
    20b8:	00001d05 	.word	0x00001d05
    20bc:	0000209d 	.word	0x0000209d
    20c0:	0000209d 	.word	0x0000209d
    20c4:	0000209d 	.word	0x0000209d
    20c8:	0000209d 	.word	0x0000209d

000020cc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    20cc:	4b0c      	ldr	r3, [pc, #48]	; (2100 <cpu_irq_enter_critical+0x34>)
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	2b00      	cmp	r3, #0
    20d2:	d110      	bne.n	20f6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    20d4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    20d8:	2b00      	cmp	r3, #0
    20da:	d109      	bne.n	20f0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    20dc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    20de:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    20e2:	2200      	movs	r2, #0
    20e4:	4b07      	ldr	r3, [pc, #28]	; (2104 <cpu_irq_enter_critical+0x38>)
    20e6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    20e8:	2201      	movs	r2, #1
    20ea:	4b05      	ldr	r3, [pc, #20]	; (2100 <cpu_irq_enter_critical+0x34>)
    20ec:	711a      	strb	r2, [r3, #4]
    20ee:	e002      	b.n	20f6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    20f0:	2200      	movs	r2, #0
    20f2:	4b03      	ldr	r3, [pc, #12]	; (2100 <cpu_irq_enter_critical+0x34>)
    20f4:	711a      	strb	r2, [r3, #4]
		}

	}

	cpu_irq_critical_section_counter++;
    20f6:	4b02      	ldr	r3, [pc, #8]	; (2100 <cpu_irq_enter_critical+0x34>)
    20f8:	681a      	ldr	r2, [r3, #0]
    20fa:	3201      	adds	r2, #1
    20fc:	601a      	str	r2, [r3, #0]
}
    20fe:	4770      	bx	lr
    2100:	200015d8 	.word	0x200015d8
    2104:	2000000c 	.word	0x2000000c

00002108 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2108:	4b08      	ldr	r3, [pc, #32]	; (212c <cpu_irq_leave_critical+0x24>)
    210a:	681a      	ldr	r2, [r3, #0]
    210c:	3a01      	subs	r2, #1
    210e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	2b00      	cmp	r3, #0
    2114:	d109      	bne.n	212a <cpu_irq_leave_critical+0x22>
    2116:	4b05      	ldr	r3, [pc, #20]	; (212c <cpu_irq_leave_critical+0x24>)
    2118:	791b      	ldrb	r3, [r3, #4]
    211a:	2b00      	cmp	r3, #0
    211c:	d005      	beq.n	212a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    211e:	2201      	movs	r2, #1
    2120:	4b03      	ldr	r3, [pc, #12]	; (2130 <cpu_irq_leave_critical+0x28>)
    2122:	701a      	strb	r2, [r3, #0]
    2124:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2128:	b662      	cpsie	i
	}
}
    212a:	4770      	bx	lr
    212c:	200015d8 	.word	0x200015d8
    2130:	2000000c 	.word	0x2000000c

00002134 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2134:	b500      	push	{lr}
    2136:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2138:	ab01      	add	r3, sp, #4
    213a:	2280      	movs	r2, #128	; 0x80
    213c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    213e:	780a      	ldrb	r2, [r1, #0]
    2140:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2142:	784a      	ldrb	r2, [r1, #1]
    2144:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2146:	788a      	ldrb	r2, [r1, #2]
    2148:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    214a:	1c19      	adds	r1, r3, #0
    214c:	4b01      	ldr	r3, [pc, #4]	; (2154 <port_pin_set_config+0x20>)
    214e:	4798      	blx	r3
}
    2150:	b003      	add	sp, #12
    2152:	bd00      	pop	{pc}
    2154:	000021e5 	.word	0x000021e5

00002158 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2158:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    215a:	78d3      	ldrb	r3, [r2, #3]
    215c:	2b00      	cmp	r3, #0
    215e:	d11e      	bne.n	219e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2160:	7813      	ldrb	r3, [r2, #0]
    2162:	2b80      	cmp	r3, #128	; 0x80
    2164:	d004      	beq.n	2170 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2166:	061b      	lsls	r3, r3, #24
    2168:	2480      	movs	r4, #128	; 0x80
    216a:	0264      	lsls	r4, r4, #9
    216c:	4323      	orrs	r3, r4
    216e:	e000      	b.n	2172 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2170:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2172:	7854      	ldrb	r4, [r2, #1]
    2174:	2502      	movs	r5, #2
    2176:	43ac      	bics	r4, r5
    2178:	d10a      	bne.n	2190 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    217a:	7894      	ldrb	r4, [r2, #2]
    217c:	2c00      	cmp	r4, #0
    217e:	d103      	bne.n	2188 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2180:	2480      	movs	r4, #128	; 0x80
    2182:	02a4      	lsls	r4, r4, #10
    2184:	4323      	orrs	r3, r4
    2186:	e002      	b.n	218e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2188:	24c0      	movs	r4, #192	; 0xc0
    218a:	02e4      	lsls	r4, r4, #11
    218c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    218e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2190:	7854      	ldrb	r4, [r2, #1]
    2192:	3c01      	subs	r4, #1
    2194:	2c01      	cmp	r4, #1
    2196:	d804      	bhi.n	21a2 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2198:	4c11      	ldr	r4, [pc, #68]	; (21e0 <_system_pinmux_config+0x88>)
    219a:	4023      	ands	r3, r4
    219c:	e001      	b.n	21a2 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    219e:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    21a0:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21a2:	040d      	lsls	r5, r1, #16
    21a4:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21a6:	24a0      	movs	r4, #160	; 0xa0
    21a8:	05e4      	lsls	r4, r4, #23
    21aa:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21ac:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21ae:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21b0:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21b2:	24d0      	movs	r4, #208	; 0xd0
    21b4:	0624      	lsls	r4, r4, #24
    21b6:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21b8:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21ba:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    21bc:	78d4      	ldrb	r4, [r2, #3]
    21be:	2c00      	cmp	r4, #0
    21c0:	d10c      	bne.n	21dc <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    21c2:	035c      	lsls	r4, r3, #13
    21c4:	d505      	bpl.n	21d2 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    21c6:	7893      	ldrb	r3, [r2, #2]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d101      	bne.n	21d0 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    21cc:	6181      	str	r1, [r0, #24]
    21ce:	e000      	b.n	21d2 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    21d0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21d2:	7853      	ldrb	r3, [r2, #1]
    21d4:	3b01      	subs	r3, #1
    21d6:	2b01      	cmp	r3, #1
    21d8:	d800      	bhi.n	21dc <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    21da:	6081      	str	r1, [r0, #8]
		}
	}
}
    21dc:	bd30      	pop	{r4, r5, pc}
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	fffbffff 	.word	0xfffbffff

000021e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    21e4:	b508      	push	{r3, lr}
    21e6:	1c03      	adds	r3, r0, #0
    21e8:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    21ea:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    21ec:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    21ee:	2900      	cmp	r1, #0
    21f0:	d103      	bne.n	21fa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    21f2:	0958      	lsrs	r0, r3, #5
    21f4:	01c0      	lsls	r0, r0, #7
    21f6:	4904      	ldr	r1, [pc, #16]	; (2208 <system_pinmux_pin_set_config+0x24>)
    21f8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    21fa:	211f      	movs	r1, #31
    21fc:	400b      	ands	r3, r1
    21fe:	2101      	movs	r1, #1
    2200:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    2202:	4b02      	ldr	r3, [pc, #8]	; (220c <system_pinmux_pin_set_config+0x28>)
    2204:	4798      	blx	r3
}
    2206:	bd08      	pop	{r3, pc}
    2208:	41004400 	.word	0x41004400
    220c:	00002159 	.word	0x00002159

00002210 <__aeabi_uidiv>:
    2210:	2900      	cmp	r1, #0
    2212:	d034      	beq.n	227e <.udivsi3_skip_div0_test+0x6a>

00002214 <.udivsi3_skip_div0_test>:
    2214:	2301      	movs	r3, #1
    2216:	2200      	movs	r2, #0
    2218:	b410      	push	{r4}
    221a:	4288      	cmp	r0, r1
    221c:	d32c      	bcc.n	2278 <.udivsi3_skip_div0_test+0x64>
    221e:	2401      	movs	r4, #1
    2220:	0724      	lsls	r4, r4, #28
    2222:	42a1      	cmp	r1, r4
    2224:	d204      	bcs.n	2230 <.udivsi3_skip_div0_test+0x1c>
    2226:	4281      	cmp	r1, r0
    2228:	d202      	bcs.n	2230 <.udivsi3_skip_div0_test+0x1c>
    222a:	0109      	lsls	r1, r1, #4
    222c:	011b      	lsls	r3, r3, #4
    222e:	e7f8      	b.n	2222 <.udivsi3_skip_div0_test+0xe>
    2230:	00e4      	lsls	r4, r4, #3
    2232:	42a1      	cmp	r1, r4
    2234:	d204      	bcs.n	2240 <.udivsi3_skip_div0_test+0x2c>
    2236:	4281      	cmp	r1, r0
    2238:	d202      	bcs.n	2240 <.udivsi3_skip_div0_test+0x2c>
    223a:	0049      	lsls	r1, r1, #1
    223c:	005b      	lsls	r3, r3, #1
    223e:	e7f8      	b.n	2232 <.udivsi3_skip_div0_test+0x1e>
    2240:	4288      	cmp	r0, r1
    2242:	d301      	bcc.n	2248 <.udivsi3_skip_div0_test+0x34>
    2244:	1a40      	subs	r0, r0, r1
    2246:	431a      	orrs	r2, r3
    2248:	084c      	lsrs	r4, r1, #1
    224a:	42a0      	cmp	r0, r4
    224c:	d302      	bcc.n	2254 <.udivsi3_skip_div0_test+0x40>
    224e:	1b00      	subs	r0, r0, r4
    2250:	085c      	lsrs	r4, r3, #1
    2252:	4322      	orrs	r2, r4
    2254:	088c      	lsrs	r4, r1, #2
    2256:	42a0      	cmp	r0, r4
    2258:	d302      	bcc.n	2260 <.udivsi3_skip_div0_test+0x4c>
    225a:	1b00      	subs	r0, r0, r4
    225c:	089c      	lsrs	r4, r3, #2
    225e:	4322      	orrs	r2, r4
    2260:	08cc      	lsrs	r4, r1, #3
    2262:	42a0      	cmp	r0, r4
    2264:	d302      	bcc.n	226c <.udivsi3_skip_div0_test+0x58>
    2266:	1b00      	subs	r0, r0, r4
    2268:	08dc      	lsrs	r4, r3, #3
    226a:	4322      	orrs	r2, r4
    226c:	2800      	cmp	r0, #0
    226e:	d003      	beq.n	2278 <.udivsi3_skip_div0_test+0x64>
    2270:	091b      	lsrs	r3, r3, #4
    2272:	d001      	beq.n	2278 <.udivsi3_skip_div0_test+0x64>
    2274:	0909      	lsrs	r1, r1, #4
    2276:	e7e3      	b.n	2240 <.udivsi3_skip_div0_test+0x2c>
    2278:	1c10      	adds	r0, r2, #0
    227a:	bc10      	pop	{r4}
    227c:	4770      	bx	lr
    227e:	2800      	cmp	r0, #0
    2280:	d001      	beq.n	2286 <.udivsi3_skip_div0_test+0x72>
    2282:	2000      	movs	r0, #0
    2284:	43c0      	mvns	r0, r0
    2286:	b407      	push	{r0, r1, r2}
    2288:	4802      	ldr	r0, [pc, #8]	; (2294 <.udivsi3_skip_div0_test+0x80>)
    228a:	a102      	add	r1, pc, #8	; (adr r1, 2294 <.udivsi3_skip_div0_test+0x80>)
    228c:	1840      	adds	r0, r0, r1
    228e:	9002      	str	r0, [sp, #8]
    2290:	bd03      	pop	{r0, r1, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	00000019 	.word	0x00000019

00002298 <__aeabi_uidivmod>:
    2298:	2900      	cmp	r1, #0
    229a:	d0f0      	beq.n	227e <.udivsi3_skip_div0_test+0x6a>
    229c:	b503      	push	{r0, r1, lr}
    229e:	f7ff ffb9 	bl	2214 <.udivsi3_skip_div0_test>
    22a2:	bc0e      	pop	{r1, r2, r3}
    22a4:	4342      	muls	r2, r0
    22a6:	1a89      	subs	r1, r1, r2
    22a8:	4718      	bx	r3
    22aa:	46c0      	nop			; (mov r8, r8)

000022ac <__aeabi_idiv0>:
    22ac:	4770      	bx	lr
    22ae:	46c0      	nop			; (mov r8, r8)

000022b0 <__libc_init_array>:
    22b0:	b570      	push	{r4, r5, r6, lr}
    22b2:	4e0d      	ldr	r6, [pc, #52]	; (22e8 <__libc_init_array+0x38>)
    22b4:	4d0d      	ldr	r5, [pc, #52]	; (22ec <__libc_init_array+0x3c>)
    22b6:	2400      	movs	r4, #0
    22b8:	1bad      	subs	r5, r5, r6
    22ba:	10ad      	asrs	r5, r5, #2
    22bc:	d005      	beq.n	22ca <__libc_init_array+0x1a>
    22be:	00a3      	lsls	r3, r4, #2
    22c0:	58f3      	ldr	r3, [r6, r3]
    22c2:	3401      	adds	r4, #1
    22c4:	4798      	blx	r3
    22c6:	42a5      	cmp	r5, r4
    22c8:	d1f9      	bne.n	22be <__libc_init_array+0xe>
    22ca:	f000 f94f 	bl	256c <_init>
    22ce:	4e08      	ldr	r6, [pc, #32]	; (22f0 <__libc_init_array+0x40>)
    22d0:	4d08      	ldr	r5, [pc, #32]	; (22f4 <__libc_init_array+0x44>)
    22d2:	2400      	movs	r4, #0
    22d4:	1bad      	subs	r5, r5, r6
    22d6:	10ad      	asrs	r5, r5, #2
    22d8:	d005      	beq.n	22e6 <__libc_init_array+0x36>
    22da:	00a3      	lsls	r3, r4, #2
    22dc:	58f3      	ldr	r3, [r6, r3]
    22de:	3401      	adds	r4, #1
    22e0:	4798      	blx	r3
    22e2:	42a5      	cmp	r5, r4
    22e4:	d1f9      	bne.n	22da <__libc_init_array+0x2a>
    22e6:	bd70      	pop	{r4, r5, r6, pc}
    22e8:	00002578 	.word	0x00002578
    22ec:	00002578 	.word	0x00002578
    22f0:	00002578 	.word	0x00002578
    22f4:	00002580 	.word	0x00002580

000022f8 <memcpy>:
    22f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22fa:	2a0f      	cmp	r2, #15
    22fc:	d935      	bls.n	236a <memcpy+0x72>
    22fe:	1c03      	adds	r3, r0, #0
    2300:	430b      	orrs	r3, r1
    2302:	079c      	lsls	r4, r3, #30
    2304:	d135      	bne.n	2372 <memcpy+0x7a>
    2306:	1c16      	adds	r6, r2, #0
    2308:	3e10      	subs	r6, #16
    230a:	0936      	lsrs	r6, r6, #4
    230c:	0135      	lsls	r5, r6, #4
    230e:	1945      	adds	r5, r0, r5
    2310:	3510      	adds	r5, #16
    2312:	1c0c      	adds	r4, r1, #0
    2314:	1c03      	adds	r3, r0, #0
    2316:	6827      	ldr	r7, [r4, #0]
    2318:	601f      	str	r7, [r3, #0]
    231a:	6867      	ldr	r7, [r4, #4]
    231c:	605f      	str	r7, [r3, #4]
    231e:	68a7      	ldr	r7, [r4, #8]
    2320:	609f      	str	r7, [r3, #8]
    2322:	68e7      	ldr	r7, [r4, #12]
    2324:	3410      	adds	r4, #16
    2326:	60df      	str	r7, [r3, #12]
    2328:	3310      	adds	r3, #16
    232a:	42ab      	cmp	r3, r5
    232c:	d1f3      	bne.n	2316 <memcpy+0x1e>
    232e:	1c73      	adds	r3, r6, #1
    2330:	011b      	lsls	r3, r3, #4
    2332:	18c5      	adds	r5, r0, r3
    2334:	18c9      	adds	r1, r1, r3
    2336:	230f      	movs	r3, #15
    2338:	4013      	ands	r3, r2
    233a:	2b03      	cmp	r3, #3
    233c:	d91b      	bls.n	2376 <memcpy+0x7e>
    233e:	1f1c      	subs	r4, r3, #4
    2340:	08a4      	lsrs	r4, r4, #2
    2342:	3401      	adds	r4, #1
    2344:	00a4      	lsls	r4, r4, #2
    2346:	2300      	movs	r3, #0
    2348:	58ce      	ldr	r6, [r1, r3]
    234a:	50ee      	str	r6, [r5, r3]
    234c:	3304      	adds	r3, #4
    234e:	42a3      	cmp	r3, r4
    2350:	d1fa      	bne.n	2348 <memcpy+0x50>
    2352:	18ed      	adds	r5, r5, r3
    2354:	18c9      	adds	r1, r1, r3
    2356:	2303      	movs	r3, #3
    2358:	401a      	ands	r2, r3
    235a:	d005      	beq.n	2368 <memcpy+0x70>
    235c:	2300      	movs	r3, #0
    235e:	5ccc      	ldrb	r4, [r1, r3]
    2360:	54ec      	strb	r4, [r5, r3]
    2362:	3301      	adds	r3, #1
    2364:	4293      	cmp	r3, r2
    2366:	d1fa      	bne.n	235e <memcpy+0x66>
    2368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    236a:	1c05      	adds	r5, r0, #0
    236c:	2a00      	cmp	r2, #0
    236e:	d1f5      	bne.n	235c <memcpy+0x64>
    2370:	e7fa      	b.n	2368 <memcpy+0x70>
    2372:	1c05      	adds	r5, r0, #0
    2374:	e7f2      	b.n	235c <memcpy+0x64>
    2376:	1c1a      	adds	r2, r3, #0
    2378:	e7f8      	b.n	236c <memcpy+0x74>
    237a:	46c0      	nop			; (mov r8, r8)

0000237c <register_fini>:
    237c:	b508      	push	{r3, lr}
    237e:	4b03      	ldr	r3, [pc, #12]	; (238c <register_fini+0x10>)
    2380:	2b00      	cmp	r3, #0
    2382:	d002      	beq.n	238a <register_fini+0xe>
    2384:	4802      	ldr	r0, [pc, #8]	; (2390 <register_fini+0x14>)
    2386:	f000 f805 	bl	2394 <atexit>
    238a:	bd08      	pop	{r3, pc}
    238c:	00000000 	.word	0x00000000
    2390:	000023a5 	.word	0x000023a5

00002394 <atexit>:
    2394:	b508      	push	{r3, lr}
    2396:	1c01      	adds	r1, r0, #0
    2398:	2200      	movs	r2, #0
    239a:	2000      	movs	r0, #0
    239c:	2300      	movs	r3, #0
    239e:	f000 f819 	bl	23d4 <__register_exitproc>
    23a2:	bd08      	pop	{r3, pc}

000023a4 <__libc_fini_array>:
    23a4:	b538      	push	{r3, r4, r5, lr}
    23a6:	4b09      	ldr	r3, [pc, #36]	; (23cc <__libc_fini_array+0x28>)
    23a8:	4d09      	ldr	r5, [pc, #36]	; (23d0 <__libc_fini_array+0x2c>)
    23aa:	1aed      	subs	r5, r5, r3
    23ac:	10ad      	asrs	r5, r5, #2
    23ae:	d009      	beq.n	23c4 <__libc_fini_array+0x20>
    23b0:	3d01      	subs	r5, #1
    23b2:	00ac      	lsls	r4, r5, #2
    23b4:	18e4      	adds	r4, r4, r3
    23b6:	e000      	b.n	23ba <__libc_fini_array+0x16>
    23b8:	3d01      	subs	r5, #1
    23ba:	6823      	ldr	r3, [r4, #0]
    23bc:	4798      	blx	r3
    23be:	3c04      	subs	r4, #4
    23c0:	2d00      	cmp	r5, #0
    23c2:	d1f9      	bne.n	23b8 <__libc_fini_array+0x14>
    23c4:	f000 f8dc 	bl	2580 <_fini>
    23c8:	bd38      	pop	{r3, r4, r5, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	0000258c 	.word	0x0000258c
    23d0:	00002590 	.word	0x00002590

000023d4 <__register_exitproc>:
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	464f      	mov	r7, r9
    23d8:	4646      	mov	r6, r8
    23da:	b4c0      	push	{r6, r7}
    23dc:	4698      	mov	r8, r3
    23de:	4b2b      	ldr	r3, [pc, #172]	; (248c <__register_exitproc+0xb8>)
    23e0:	25a4      	movs	r5, #164	; 0xa4
    23e2:	681b      	ldr	r3, [r3, #0]
    23e4:	006d      	lsls	r5, r5, #1
    23e6:	595c      	ldr	r4, [r3, r5]
    23e8:	b083      	sub	sp, #12
    23ea:	1c06      	adds	r6, r0, #0
    23ec:	1c0f      	adds	r7, r1, #0
    23ee:	4691      	mov	r9, r2
    23f0:	9301      	str	r3, [sp, #4]
    23f2:	2c00      	cmp	r4, #0
    23f4:	d044      	beq.n	2480 <__register_exitproc+0xac>
    23f6:	6865      	ldr	r5, [r4, #4]
    23f8:	2d1f      	cmp	r5, #31
    23fa:	dd1a      	ble.n	2432 <__register_exitproc+0x5e>
    23fc:	4b24      	ldr	r3, [pc, #144]	; (2490 <__register_exitproc+0xbc>)
    23fe:	2b00      	cmp	r3, #0
    2400:	d102      	bne.n	2408 <__register_exitproc+0x34>
    2402:	2001      	movs	r0, #1
    2404:	4240      	negs	r0, r0
    2406:	e01c      	b.n	2442 <__register_exitproc+0x6e>
    2408:	20c8      	movs	r0, #200	; 0xc8
    240a:	0040      	lsls	r0, r0, #1
    240c:	e000      	b.n	2410 <__register_exitproc+0x3c>
    240e:	bf00      	nop
    2410:	1e04      	subs	r4, r0, #0
    2412:	d0f6      	beq.n	2402 <__register_exitproc+0x2e>
    2414:	2500      	movs	r5, #0
    2416:	6045      	str	r5, [r0, #4]
    2418:	23a4      	movs	r3, #164	; 0xa4
    241a:	9801      	ldr	r0, [sp, #4]
    241c:	005b      	lsls	r3, r3, #1
    241e:	58c0      	ldr	r0, [r0, r3]
    2420:	9901      	ldr	r1, [sp, #4]
    2422:	6020      	str	r0, [r4, #0]
    2424:	50cc      	str	r4, [r1, r3]
    2426:	23c4      	movs	r3, #196	; 0xc4
    2428:	005b      	lsls	r3, r3, #1
    242a:	50e5      	str	r5, [r4, r3]
    242c:	23c6      	movs	r3, #198	; 0xc6
    242e:	005b      	lsls	r3, r3, #1
    2430:	50e5      	str	r5, [r4, r3]
    2432:	2e00      	cmp	r6, #0
    2434:	d10a      	bne.n	244c <__register_exitproc+0x78>
    2436:	1c6b      	adds	r3, r5, #1
    2438:	3502      	adds	r5, #2
    243a:	00ad      	lsls	r5, r5, #2
    243c:	6063      	str	r3, [r4, #4]
    243e:	2000      	movs	r0, #0
    2440:	512f      	str	r7, [r5, r4]
    2442:	b003      	add	sp, #12
    2444:	bc0c      	pop	{r2, r3}
    2446:	4690      	mov	r8, r2
    2448:	4699      	mov	r9, r3
    244a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    244c:	00ab      	lsls	r3, r5, #2
    244e:	18e3      	adds	r3, r4, r3
    2450:	2288      	movs	r2, #136	; 0x88
    2452:	4648      	mov	r0, r9
    2454:	5098      	str	r0, [r3, r2]
    2456:	20c4      	movs	r0, #196	; 0xc4
    2458:	0040      	lsls	r0, r0, #1
    245a:	1822      	adds	r2, r4, r0
    245c:	6810      	ldr	r0, [r2, #0]
    245e:	2101      	movs	r1, #1
    2460:	40a9      	lsls	r1, r5
    2462:	4308      	orrs	r0, r1
    2464:	6010      	str	r0, [r2, #0]
    2466:	2284      	movs	r2, #132	; 0x84
    2468:	0052      	lsls	r2, r2, #1
    246a:	4640      	mov	r0, r8
    246c:	5098      	str	r0, [r3, r2]
    246e:	2e02      	cmp	r6, #2
    2470:	d1e1      	bne.n	2436 <__register_exitproc+0x62>
    2472:	22c6      	movs	r2, #198	; 0xc6
    2474:	0052      	lsls	r2, r2, #1
    2476:	18a3      	adds	r3, r4, r2
    2478:	6818      	ldr	r0, [r3, #0]
    247a:	4301      	orrs	r1, r0
    247c:	6019      	str	r1, [r3, #0]
    247e:	e7da      	b.n	2436 <__register_exitproc+0x62>
    2480:	1c1c      	adds	r4, r3, #0
    2482:	344d      	adds	r4, #77	; 0x4d
    2484:	34ff      	adds	r4, #255	; 0xff
    2486:	515c      	str	r4, [r3, r5]
    2488:	e7b5      	b.n	23f6 <__register_exitproc+0x22>
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	00002568 	.word	0x00002568
    2490:	00000000 	.word	0x00000000
    2494:	41447249 	.word	0x41447249
    2498:	00000000 	.word	0x00000000
    249c:	454c4449 	.word	0x454c4449
    24a0:	00000000 	.word	0x00000000
    24a4:	000017ce 	.word	0x000017ce
    24a8:	000017ce 	.word	0x000017ce
    24ac:	000017ce 	.word	0x000017ce
    24b0:	00001826 	.word	0x00001826
    24b4:	00001808 	.word	0x00001808
    24b8:	00001820 	.word	0x00001820
    24bc:	000017ce 	.word	0x000017ce
    24c0:	000017ce 	.word	0x000017ce
    24c4:	00001826 	.word	0x00001826
    24c8:	00001808 	.word	0x00001808
    24cc:	20726d54 	.word	0x20726d54
    24d0:	00637653 	.word	0x00637653
    24d4:	00001980 	.word	0x00001980
    24d8:	000019dc 	.word	0x000019dc
    24dc:	000019dc 	.word	0x000019dc
    24e0:	0000197a 	.word	0x0000197a
    24e4:	0000197a 	.word	0x0000197a
    24e8:	00001996 	.word	0x00001996
    24ec:	00001986 	.word	0x00001986
    24f0:	0000199c 	.word	0x0000199c
    24f4:	000019ca 	.word	0x000019ca
    24f8:	00001bb8 	.word	0x00001bb8
    24fc:	00001c24 	.word	0x00001c24
    2500:	00001c24 	.word	0x00001c24
    2504:	00001b98 	.word	0x00001b98
    2508:	00001baa 	.word	0x00001baa
    250c:	00001bc6 	.word	0x00001bc6
    2510:	00001b9c 	.word	0x00001b9c
    2514:	00001bd4 	.word	0x00001bd4
    2518:	00001c14 	.word	0x00001c14
    251c:	00001c5c 	.word	0x00001c5c
    2520:	00001c9e 	.word	0x00001c9e
    2524:	00001c9e 	.word	0x00001c9e
    2528:	00001c9e 	.word	0x00001c9e
    252c:	00001c4e 	.word	0x00001c4e
    2530:	00001c6a 	.word	0x00001c6a
    2534:	00001c40 	.word	0x00001c40
    2538:	00001c78 	.word	0x00001c78
    253c:	00001c8e 	.word	0x00001c8e
    2540:	00001cc0 	.word	0x00001cc0
    2544:	00001cf6 	.word	0x00001cf6
    2548:	00001cf6 	.word	0x00001cf6
    254c:	00001cbc 	.word	0x00001cbc
    2550:	00001ce4 	.word	0x00001ce4
    2554:	00001cc4 	.word	0x00001cc4
    2558:	00001ce0 	.word	0x00001ce0
    255c:	00001cc8 	.word	0x00001cc8
    2560:	00001ccc 	.word	0x00001ccc
    2564:	00000043 	.word	0x00000043

00002568 <_global_impure_ptr>:
    2568:	20000010                                ... 

0000256c <_init>:
    256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2572:	bc08      	pop	{r3}
    2574:	469e      	mov	lr, r3
    2576:	4770      	bx	lr

00002578 <__init_array_start>:
    2578:	0000237d 	.word	0x0000237d

0000257c <__frame_dummy_init_array_entry>:
    257c:	000000d9                                ....

00002580 <_fini>:
    2580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2586:	bc08      	pop	{r3}
    2588:	469e      	mov	lr, r3
    258a:	4770      	bx	lr

0000258c <__fini_array_start>:
    258c:	000000b1 	.word	0x000000b1
